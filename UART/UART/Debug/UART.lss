
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00001868  000018fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800206  00800206  00001902  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029e3  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b4  00000000  00000000  0000452f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c6  00000000  00000000  000057e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000092c  00000000  00000000  00006eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000baf  00000000  00000000  000077d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b2  00000000  00000000  00008387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000ac39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
       2:	00 00       	nop
       4:	88 c3       	rjmp	.+1808   	; 0x716 <__vector_1>
       6:	00 00       	nop
       8:	b4 c3       	rjmp	.+1896   	; 0x772 <__vector_2>
       a:	00 00       	nop
       c:	e0 c3       	rjmp	.+1984   	; 0x7ce <__vector_3>
       e:	00 00       	nop
      10:	0c c4       	rjmp	.+2072   	; 0x82a <__vector_4>
      12:	00 00       	nop
      14:	38 c4       	rjmp	.+2160   	; 0x886 <__vector_5>
      16:	00 00       	nop
      18:	64 c4       	rjmp	.+2248   	; 0x8e2 <__vector_6>
      1a:	00 00       	nop
      1c:	90 c4       	rjmp	.+2336   	; 0x93e <__vector_7>
      1e:	00 00       	nop
      20:	bc c4       	rjmp	.+2424   	; 0x99a <__vector_8>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	9e c0       	rjmp	.+316    	; 0x166 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9c c0       	rjmp	.+312    	; 0x166 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9a c0       	rjmp	.+308    	; 0x166 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_25>
      68:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_26>
      6c:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_27>
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c0       	rjmp	.+240    	; 0x166 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c0       	rjmp	.+236    	; 0x166 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c0       	rjmp	.+232    	; 0x166 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c0       	rjmp	.+228    	; 0x166 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c0       	rjmp	.+224    	; 0x166 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c0       	rjmp	.+220    	; 0x166 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c0       	rjmp	.+216    	; 0x166 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_36>
      94:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_37>
      98:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__vector_38>
      9c:	64 c0       	rjmp	.+200    	; 0x166 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	62 c0       	rjmp	.+196    	; 0x166 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	60 c0       	rjmp	.+192    	; 0x166 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5e c0       	rjmp	.+188    	; 0x166 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5c c0       	rjmp	.+184    	; 0x166 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5a c0       	rjmp	.+180    	; 0x166 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	58 c0       	rjmp	.+176    	; 0x166 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	56 c0       	rjmp	.+172    	; 0x166 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	54 c0       	rjmp	.+168    	; 0x166 <__bad_interrupt>
      be:	00 00       	nop
      c0:	52 c0       	rjmp	.+164    	; 0x166 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	50 c0       	rjmp	.+160    	; 0x166 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4e c0       	rjmp	.+156    	; 0x166 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_51>
      d0:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_52>
      d4:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_53>
      d8:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_54>
      dc:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_55>
      e0:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_56>
      e4:	0e 05       	cpc	r16, r14
      e6:	1b 05       	cpc	r17, r11
      e8:	28 05       	cpc	r18, r8
      ea:	35 05       	cpc	r19, r5
      ec:	42 05       	cpc	r20, r2
      ee:	4f 05       	cpc	r20, r15
      f0:	5c 05       	cpc	r21, r12
      f2:	6c 05       	cpc	r22, r12
      f4:	79 05       	cpc	r23, r9
      f6:	86 05       	cpc	r24, r6
      f8:	93 05       	cpc	r25, r3
      fa:	c5 05       	cpc	r28, r5
      fc:	cc 05       	cpc	r28, r12
      fe:	d3 05       	cpc	r29, r3
     100:	da 05       	cpc	r29, r10
     102:	e1 05       	cpc	r30, r1
     104:	e8 05       	cpc	r30, r8
     106:	ef 05       	cpc	r30, r15
     108:	f8 05       	cpc	r31, r8
     10a:	ff 05       	cpc	r31, r15
     10c:	06 06       	cpc	r0, r22
     10e:	0d 06       	cpc	r0, r29
     110:	38 06       	cpc	r3, r24
     112:	40 06       	cpc	r4, r16
     114:	48 06       	cpc	r4, r24
     116:	50 06       	cpc	r5, r16
     118:	58 06       	cpc	r5, r24
     11a:	60 06       	cpc	r6, r16
     11c:	68 06       	cpc	r6, r24
     11e:	72 06       	cpc	r7, r18
     120:	7a 06       	cpc	r7, r26
     122:	82 06       	cpc	r8, r18
     124:	8a 06       	cpc	r8, r26

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d1 e2       	ldi	r29, 0x21	; 33
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61
     132:	00 e0       	ldi	r16, 0x00	; 0
     134:	0c bf       	out	0x3c, r16	; 60

00000136 <__do_copy_data>:
     136:	12 e0       	ldi	r17, 0x02	; 2
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b2 e0       	ldi	r27, 0x02	; 2
     13c:	e8 e6       	ldi	r30, 0x68	; 104
     13e:	f8 e1       	ldi	r31, 0x18	; 24
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0b bf       	out	0x3b, r16	; 59
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x14>
     146:	07 90       	elpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a6 30       	cpi	r26, 0x06	; 6
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0x10>

00000150 <__do_clear_bss>:
     150:	22 e0       	ldi	r18, 0x02	; 2
     152:	a6 e0       	ldi	r26, 0x06	; 6
     154:	b2 e0       	ldi	r27, 0x02	; 2
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a1 33       	cpi	r26, 0x31	; 49
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	5e d6       	rcall	.+3260   	; 0xe1e <main>
     162:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <btn_interrupt>:
 * @param int_num - The interrupt pin number that was triggered.
 *
 * @return Error code.
 */
void btn_interrupt(uint8_t int_num)
{	
     168:	cf 93       	push	r28
     16a:	c8 2f       	mov	r28, r24
	bool state;
	if (int_num<4)
     16c:	84 30       	cpi	r24, 0x04	; 4
     16e:	90 f4       	brcc	.+36     	; 0x194 <btn_interrupt+0x2c>
	{
		state=(gpio_hal_pin_read(&PIND,int_num));
     170:	68 2f       	mov	r22, r24
     172:	89 e2       	ldi	r24, 0x29	; 41
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	9b d1       	rcall	.+822    	; 0x4ae <gpio_hal_pin_read>
		if (g_button_callback != NULL)
     178:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <g_button_callback>
     17c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <g_button_callback+0x1>
     180:	30 97       	sbiw	r30, 0x00	; 0
     182:	c9 f0       	breq	.+50     	; 0x1b6 <btn_interrupt+0x4e>
		{
			g_button_callback(DB,int_num, state);
     184:	41 e0       	ldi	r20, 0x01	; 1
     186:	81 11       	cpse	r24, r1
     188:	01 c0       	rjmp	.+2      	; 0x18c <btn_interrupt+0x24>
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	6c 2f       	mov	r22, r28
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	19 95       	eicall
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <btn_interrupt+0x4e>
		}	
	}
	else
	{
		state=(gpio_hal_pin_read(&PINE,int_num));
     194:	68 2f       	mov	r22, r24
     196:	8c e2       	ldi	r24, 0x2C	; 44
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	89 d1       	rcall	.+786    	; 0x4ae <gpio_hal_pin_read>
     19c:	41 e0       	ldi	r20, 0x01	; 1
     19e:	81 11       	cpse	r24, r1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <btn_interrupt+0x3c>
     1a2:	40 e0       	ldi	r20, 0x00	; 0
		if (g_button_callback != NULL)
     1a4:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <g_button_callback>
     1a8:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <g_button_callback+0x1>
     1ac:	30 97       	sbiw	r30, 0x00	; 0
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <btn_interrupt+0x4e>
		{
			g_button_callback(EB,int_num, state);
     1b0:	6c 2f       	mov	r22, r28
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	19 95       	eicall
		}
	}
		
}
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <btn_init>:
 *        btn_pin - Pin of the button.
 *
 * @return Error code.
 */
uint32_t btn_init (enum portb btn_port, uint8_t btn_pin)
{	
     1ba:	cf 93       	push	r28
	uint32_t err=NO_ERROR;
	g_button_callback = NULL;
     1bc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <g_button_callback+0x1>
     1c0:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <g_button_callback>
	do 
	{
		if (btn_port!=DB && btn_port!=EB)
     1c4:	9d ef       	ldi	r25, 0xFD	; 253
     1c6:	98 0f       	add	r25, r24
     1c8:	92 30       	cpi	r25, 0x02	; 2
     1ca:	50 f0       	brcs	.+20     	; 0x1e0 <btn_init+0x26>
		{
			if (btn_port==AB || btn_port==BB || btn_port==CB || btn_port==FB || btn_port==GB || btn_port==HB || btn_port==JB || btn_port==KB || btn_port==LB )
     1cc:	83 30       	cpi	r24, 0x03	; 3
     1ce:	88 f1       	brcs	.+98     	; 0x232 <btn_init+0x78>
     1d0:	85 50       	subi	r24, 0x05	; 5
     1d2:	86 30       	cpi	r24, 0x06	; 6
     1d4:	98 f1       	brcs	.+102    	; 0x23c <btn_init+0x82>
				err=PIN_NOT_SUPPORT;
				break;
			}
			else
			{
				err=PORT_ERROR;
     1d6:	62 e0       	ldi	r22, 0x02	; 2
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	45 c0       	rjmp	.+138    	; 0x26a <btn_init+0xb0>
				break;
			}
		}
		if (btn_pin>7)
     1e0:	68 30       	cpi	r22, 0x08	; 8
     1e2:	88 f5       	brcc	.+98     	; 0x246 <btn_init+0x8c>
     1e4:	c6 2f       	mov	r28, r22
		{
			err=PIN_ERROR;
			break;
		}
		if (btn_port==DB)
     1e6:	83 30       	cpi	r24, 0x03	; 3
     1e8:	89 f4       	brne	.+34     	; 0x20c <btn_init+0x52>
		{	
			if (btn_pin>3)
     1ea:	64 30       	cpi	r22, 0x04	; 4
     1ec:	88 f5       	brcc	.+98     	; 0x250 <btn_init+0x96>
			{
				err=PIN_NOT_SUPPORT;
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTD, btn_pin, change, btn_interrupt);
     1ee:	24 eb       	ldi	r18, 0xB4	; 180
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	41 e0       	ldi	r20, 0x01	; 1
     1f4:	8b e2       	ldi	r24, 0x2B	; 43
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	65 d1       	rcall	.+714    	; 0x4c4 <gpio_hal_pin_config_interrupt>
			gpio_hal_pin_init(&DDRD, btn_pin, input);
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	6c 2f       	mov	r22, r28
     1fe:	8a e2       	ldi	r24, 0x2A	; 42
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	3a d0       	rcall	.+116    	; 0x278 <gpio_hal_pin_init>
 *
 * @return Error code.
 */
uint32_t btn_init (enum portb btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	cb 01       	movw	r24, r22
     20a:	2f c0       	rjmp	.+94     	; 0x26a <btn_init+0xb0>
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTD, btn_pin, change, btn_interrupt);
			gpio_hal_pin_init(&DDRD, btn_pin, input);
  		}
		else if (btn_port==EB)
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	29 f5       	brne	.+74     	; 0x25a <btn_init+0xa0>
		{	
			if (btn_pin<4)
     210:	64 30       	cpi	r22, 0x04	; 4
     212:	38 f1       	brcs	.+78     	; 0x262 <btn_init+0xa8>
			{
				err=PIN_NOT_SUPPORT;
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTE, btn_pin, change, btn_interrupt);
     214:	24 eb       	ldi	r18, 0xB4	; 180
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	8e e2       	ldi	r24, 0x2E	; 46
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	52 d1       	rcall	.+676    	; 0x4c4 <gpio_hal_pin_config_interrupt>
			gpio_hal_pin_init(&DDRE, btn_pin, input);
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	6c 2f       	mov	r22, r28
     224:	8d e2       	ldi	r24, 0x2D	; 45
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	27 d0       	rcall	.+78     	; 0x278 <gpio_hal_pin_init>
 *
 * @return Error code.
 */
uint32_t btn_init (enum portb btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	cb 01       	movw	r24, r22
     230:	1c c0       	rjmp	.+56     	; 0x26a <btn_init+0xb0>
	{
		if (btn_port!=DB && btn_port!=EB)
		{
			if (btn_port==AB || btn_port==BB || btn_port==CB || btn_port==FB || btn_port==GB || btn_port==HB || btn_port==JB || btn_port==KB || btn_port==LB )
			{
				err=PIN_NOT_SUPPORT;
     232:	64 e0       	ldi	r22, 0x04	; 4
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	17 c0       	rjmp	.+46     	; 0x26a <btn_init+0xb0>
     23c:	64 e0       	ldi	r22, 0x04	; 4
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	12 c0       	rjmp	.+36     	; 0x26a <btn_init+0xb0>
				break;
			}
		}
		if (btn_pin>7)
		{
			err=PIN_ERROR;
     246:	63 e0       	ldi	r22, 0x03	; 3
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0d c0       	rjmp	.+26     	; 0x26a <btn_init+0xb0>
		}
		if (btn_port==DB)
		{	
			if (btn_pin>3)
			{
				err=PIN_NOT_SUPPORT;
     250:	64 e0       	ldi	r22, 0x04	; 4
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	08 c0       	rjmp	.+16     	; 0x26a <btn_init+0xb0>
 *
 * @return Error code.
 */
uint32_t btn_init (enum portb btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	cb 01       	movw	r24, r22
     260:	04 c0       	rjmp	.+8      	; 0x26a <btn_init+0xb0>
  		}
		else if (btn_port==EB)
		{	
			if (btn_pin<4)
			{
				err=PIN_NOT_SUPPORT;
     262:	64 e0       	ldi	r22, 0x04	; 4
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
			gpio_hal_pin_config_interrupt(&PORTE, btn_pin, change, btn_interrupt);
			gpio_hal_pin_init(&DDRE, btn_pin, input);
		}
	} while (0);
	return err;
}
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <btn_set_event_callback>:
 *
 * @return Error code.
 */
uint32_t btn_set_event_callback(ButtonCallback_t callback)
{
	g_button_callback = callback;
     26e:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <g_button_callback+0x1>
     272:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <g_button_callback>
}
     276:	08 95       	ret

00000278 <gpio_hal_pin_init>:
 *        iotype - Whether it is an input or an output pin. (input/output)
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, enum io iotype )
{	
     278:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do 
	{
		if (port==NULL)
     27a:	89 2b       	or	r24, r25
     27c:	09 f4       	brne	.+2      	; 0x280 <gpio_hal_pin_init+0x8>
     27e:	51 c0       	rjmp	.+162    	; 0x322 <gpio_hal_pin_init+0xaa>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=DDRA && *port!=DDRB && *port!=DDRC && *port!=DDRD && *port!=DDRE && *port!=DDRF && *port!=DDRG && *port!=DDRH && *port!=DDRJ && *port!=DDRK && *port!=DDRL)
     280:	90 81       	ld	r25, Z
     282:	81 b1       	in	r24, 0x01	; 1
     284:	98 17       	cp	r25, r24
     286:	61 f1       	breq	.+88     	; 0x2e0 <gpio_hal_pin_init+0x68>
     288:	90 81       	ld	r25, Z
     28a:	84 b1       	in	r24, 0x04	; 4
     28c:	98 17       	cp	r25, r24
     28e:	41 f1       	breq	.+80     	; 0x2e0 <gpio_hal_pin_init+0x68>
     290:	90 81       	ld	r25, Z
     292:	87 b1       	in	r24, 0x07	; 7
     294:	98 17       	cp	r25, r24
     296:	21 f1       	breq	.+72     	; 0x2e0 <gpio_hal_pin_init+0x68>
     298:	90 81       	ld	r25, Z
     29a:	8a b1       	in	r24, 0x0a	; 10
     29c:	98 17       	cp	r25, r24
     29e:	01 f1       	breq	.+64     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2a0:	90 81       	ld	r25, Z
     2a2:	8d b1       	in	r24, 0x0d	; 13
     2a4:	98 17       	cp	r25, r24
     2a6:	e1 f0       	breq	.+56     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2a8:	90 81       	ld	r25, Z
     2aa:	80 b3       	in	r24, 0x10	; 16
     2ac:	98 17       	cp	r25, r24
     2ae:	c1 f0       	breq	.+48     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2b0:	90 81       	ld	r25, Z
     2b2:	83 b3       	in	r24, 0x13	; 19
     2b4:	98 17       	cp	r25, r24
     2b6:	a1 f0       	breq	.+40     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2b8:	90 81       	ld	r25, Z
     2ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     2be:	98 17       	cp	r25, r24
     2c0:	79 f0       	breq	.+30     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2c2:	90 81       	ld	r25, Z
     2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     2c8:	98 17       	cp	r25, r24
     2ca:	51 f0       	breq	.+20     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2cc:	90 81       	ld	r25, Z
     2ce:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     2d2:	98 17       	cp	r25, r24
     2d4:	29 f0       	breq	.+10     	; 0x2e0 <gpio_hal_pin_init+0x68>
     2d6:	90 81       	ld	r25, Z
     2d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     2dc:	98 13       	cpse	r25, r24
     2de:	26 c0       	rjmp	.+76     	; 0x32c <gpio_hal_pin_init+0xb4>
				{
					err=PORT_ERROR;
					break;
				}
		if (pin>7)
     2e0:	68 30       	cpi	r22, 0x08	; 8
     2e2:	48 f5       	brcc	.+82     	; 0x336 <gpio_hal_pin_init+0xbe>
		{
			err=PIN_ERROR;
			break;
		}
		if (iotype)
     2e4:	44 23       	and	r20, r20
     2e6:	71 f0       	breq	.+28     	; 0x304 <gpio_hal_pin_init+0x8c>
		{
			*port |= (1 << pin);
     2e8:	20 81       	ld	r18, Z
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <gpio_hal_pin_init+0x7c>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <gpio_hal_pin_init+0x78>
     2f8:	82 2b       	or	r24, r18
     2fa:	80 83       	st	Z, r24
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, enum io iotype )
{	
	uint32_t err=NO_ERROR;
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	cb 01       	movw	r24, r22
     302:	08 95       	ret
		{
			*port |= (1 << pin);
		}
		else
		{
			*port &= ~(1 << pin);
     304:	20 81       	ld	r18, Z
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 c0       	rjmp	.+4      	; 0x310 <gpio_hal_pin_init+0x98>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	6a 95       	dec	r22
     312:	e2 f7       	brpl	.-8      	; 0x30c <gpio_hal_pin_init+0x94>
     314:	80 95       	com	r24
     316:	82 23       	and	r24, r18
     318:	80 83       	st	Z, r24
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, enum io iotype )
{	
	uint32_t err=NO_ERROR;
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	cb 01       	movw	r24, r22
     320:	08 95       	ret
	do 
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	08 95       	ret
			break;
		}
		if (*port!=DDRA && *port!=DDRB && *port!=DDRC && *port!=DDRD && *port!=DDRE && *port!=DDRF && *port!=DDRG && *port!=DDRH && *port!=DDRJ && *port!=DDRK && *port!=DDRL)
				{
					err=PORT_ERROR;
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret
					break;
				}
		if (pin>7)
		{
			err=PIN_ERROR;
     336:	63 e0       	ldi	r22, 0x03	; 3
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
		{
			*port &= ~(1 << pin);
		}
	} while (0);
	return err;
}
     33e:	08 95       	ret

00000340 <gpio_hal_pin_set>:
 *        value - Output value (1 or 0)
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
     340:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do 
	{	
		if (port==NULL)
     342:	89 2b       	or	r24, r25
     344:	09 f4       	brne	.+2      	; 0x348 <gpio_hal_pin_set+0x8>
     346:	51 c0       	rjmp	.+162    	; 0x3ea <gpio_hal_pin_set+0xaa>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
     348:	90 81       	ld	r25, Z
     34a:	82 b1       	in	r24, 0x02	; 2
     34c:	98 17       	cp	r25, r24
     34e:	61 f1       	breq	.+88     	; 0x3a8 <gpio_hal_pin_set+0x68>
     350:	90 81       	ld	r25, Z
     352:	85 b1       	in	r24, 0x05	; 5
     354:	98 17       	cp	r25, r24
     356:	41 f1       	breq	.+80     	; 0x3a8 <gpio_hal_pin_set+0x68>
     358:	90 81       	ld	r25, Z
     35a:	88 b1       	in	r24, 0x08	; 8
     35c:	98 17       	cp	r25, r24
     35e:	21 f1       	breq	.+72     	; 0x3a8 <gpio_hal_pin_set+0x68>
     360:	90 81       	ld	r25, Z
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	98 17       	cp	r25, r24
     366:	01 f1       	breq	.+64     	; 0x3a8 <gpio_hal_pin_set+0x68>
     368:	90 81       	ld	r25, Z
     36a:	8e b1       	in	r24, 0x0e	; 14
     36c:	98 17       	cp	r25, r24
     36e:	e1 f0       	breq	.+56     	; 0x3a8 <gpio_hal_pin_set+0x68>
     370:	90 81       	ld	r25, Z
     372:	81 b3       	in	r24, 0x11	; 17
     374:	98 17       	cp	r25, r24
     376:	c1 f0       	breq	.+48     	; 0x3a8 <gpio_hal_pin_set+0x68>
     378:	90 81       	ld	r25, Z
     37a:	84 b3       	in	r24, 0x14	; 20
     37c:	98 17       	cp	r25, r24
     37e:	a1 f0       	breq	.+40     	; 0x3a8 <gpio_hal_pin_set+0x68>
     380:	90 81       	ld	r25, Z
     382:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     386:	98 17       	cp	r25, r24
     388:	79 f0       	breq	.+30     	; 0x3a8 <gpio_hal_pin_set+0x68>
     38a:	90 81       	ld	r25, Z
     38c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     390:	98 17       	cp	r25, r24
     392:	51 f0       	breq	.+20     	; 0x3a8 <gpio_hal_pin_set+0x68>
     394:	90 81       	ld	r25, Z
     396:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     39a:	98 17       	cp	r25, r24
     39c:	29 f0       	breq	.+10     	; 0x3a8 <gpio_hal_pin_set+0x68>
     39e:	90 81       	ld	r25, Z
     3a0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     3a4:	98 13       	cpse	r25, r24
     3a6:	26 c0       	rjmp	.+76     	; 0x3f4 <gpio_hal_pin_set+0xb4>
		{
			err=PORT_ERROR;
			break;
		}
		
		if (pin>7)
     3a8:	68 30       	cpi	r22, 0x08	; 8
     3aa:	48 f5       	brcc	.+82     	; 0x3fe <gpio_hal_pin_set+0xbe>
		{
			err=PIN_ERROR;
			break;
		}
		if (value)
     3ac:	44 23       	and	r20, r20
     3ae:	71 f0       	breq	.+28     	; 0x3cc <gpio_hal_pin_set+0x8c>
		{
			*port |= (1 << pin);
     3b0:	20 81       	ld	r18, Z
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <gpio_hal_pin_set+0x7c>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	6a 95       	dec	r22
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <gpio_hal_pin_set+0x78>
     3c0:	82 2b       	or	r24, r18
     3c2:	80 83       	st	Z, r24
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
	uint32_t err=NO_ERROR;
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	cb 01       	movw	r24, r22
     3ca:	08 95       	ret
		{
			*port |= (1 << pin);
		}
		else
		{
			*port &= ~(1 << pin);
     3cc:	20 81       	ld	r18, Z
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <gpio_hal_pin_set+0x98>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	6a 95       	dec	r22
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <gpio_hal_pin_set+0x94>
     3dc:	80 95       	com	r24
     3de:	82 23       	and	r24, r18
     3e0:	80 83       	st	Z, r24
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
	uint32_t err=NO_ERROR;
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	cb 01       	movw	r24, r22
     3e8:	08 95       	ret
	do 
	{	
		if (port==NULL)
		{
			err=NULL_ERROR;
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	08 95       	ret
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
		{
			err=PORT_ERROR;
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	08 95       	ret
			break;
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     3fe:	63 e0       	ldi	r22, 0x03	; 3
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
		{
			*port &= ~(1 << pin);
		}
	} while (0);
	return err;
}
     406:	08 95       	ret

00000408 <gpio_hal_pin_toggle>:
 *        pin - Output pin number
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_toggle(volatile uint8_t *port, uint8_t pin)
{
     408:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do
	{
		if (port==NULL)
     40a:	89 2b       	or	r24, r25
     40c:	09 f4       	brne	.+2      	; 0x410 <gpio_hal_pin_toggle+0x8>
     40e:	40 c0       	rjmp	.+128    	; 0x490 <gpio_hal_pin_toggle+0x88>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
     410:	90 81       	ld	r25, Z
     412:	82 b1       	in	r24, 0x02	; 2
     414:	98 17       	cp	r25, r24
     416:	61 f1       	breq	.+88     	; 0x470 <gpio_hal_pin_toggle+0x68>
     418:	90 81       	ld	r25, Z
     41a:	85 b1       	in	r24, 0x05	; 5
     41c:	98 17       	cp	r25, r24
     41e:	41 f1       	breq	.+80     	; 0x470 <gpio_hal_pin_toggle+0x68>
     420:	90 81       	ld	r25, Z
     422:	88 b1       	in	r24, 0x08	; 8
     424:	98 17       	cp	r25, r24
     426:	21 f1       	breq	.+72     	; 0x470 <gpio_hal_pin_toggle+0x68>
     428:	90 81       	ld	r25, Z
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	98 17       	cp	r25, r24
     42e:	01 f1       	breq	.+64     	; 0x470 <gpio_hal_pin_toggle+0x68>
     430:	90 81       	ld	r25, Z
     432:	8e b1       	in	r24, 0x0e	; 14
     434:	98 17       	cp	r25, r24
     436:	e1 f0       	breq	.+56     	; 0x470 <gpio_hal_pin_toggle+0x68>
     438:	90 81       	ld	r25, Z
     43a:	81 b3       	in	r24, 0x11	; 17
     43c:	98 17       	cp	r25, r24
     43e:	c1 f0       	breq	.+48     	; 0x470 <gpio_hal_pin_toggle+0x68>
     440:	90 81       	ld	r25, Z
     442:	84 b3       	in	r24, 0x14	; 20
     444:	98 17       	cp	r25, r24
     446:	a1 f0       	breq	.+40     	; 0x470 <gpio_hal_pin_toggle+0x68>
     448:	90 81       	ld	r25, Z
     44a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     44e:	98 17       	cp	r25, r24
     450:	79 f0       	breq	.+30     	; 0x470 <gpio_hal_pin_toggle+0x68>
     452:	90 81       	ld	r25, Z
     454:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     458:	98 17       	cp	r25, r24
     45a:	51 f0       	breq	.+20     	; 0x470 <gpio_hal_pin_toggle+0x68>
     45c:	90 81       	ld	r25, Z
     45e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     462:	98 17       	cp	r25, r24
     464:	29 f0       	breq	.+10     	; 0x470 <gpio_hal_pin_toggle+0x68>
     466:	90 81       	ld	r25, Z
     468:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     46c:	98 13       	cpse	r25, r24
     46e:	15 c0       	rjmp	.+42     	; 0x49a <gpio_hal_pin_toggle+0x92>
		{
			err=PORT_ERROR;
			break;
		}
		
		if (pin>7)
     470:	68 30       	cpi	r22, 0x08	; 8
     472:	c0 f4       	brcc	.+48     	; 0x4a4 <gpio_hal_pin_toggle+0x9c>
		{
			err=PIN_ERROR;
			break;
		}
		*port ^= (1 << pin);
     474:	20 81       	ld	r18, Z
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <gpio_hal_pin_toggle+0x78>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <gpio_hal_pin_toggle+0x74>
     484:	82 27       	eor	r24, r18
     486:	80 83       	st	Z, r24
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_toggle(volatile uint8_t *port, uint8_t pin)
{
	uint32_t err=NO_ERROR;
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	cb 01       	movw	r24, r22
     48e:	08 95       	ret
	do
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	08 95       	ret
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
		{
			err=PORT_ERROR;
     49a:	62 e0       	ldi	r22, 0x02	; 2
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	08 95       	ret
			break;
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     4a4:	63 e0       	ldi	r22, 0x03	; 3
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		*port ^= (1 << pin);
	} while (0);
	return err;
}
     4ac:	08 95       	ret

000004ae <gpio_hal_pin_read>:
 *
 * @return Value read from the pin.
 */
uint8_t gpio_hal_pin_read(volatile uint8_t *port, uint8_t pin)
{
	return *port & (1 << pin);
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 81       	ld	r18, Z
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <gpio_hal_pin_read+0xe>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	6a 95       	dec	r22
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <gpio_hal_pin_read+0xa>
}
     4c0:	82 23       	and	r24, r18
     4c2:	08 95       	ret

000004c4 <gpio_hal_pin_config_interrupt>:
 *        callback - the function to be called back when an interrupt occurs.
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_config_interrupt(volatile uint8_t *port, uint8_t pin, enum sense sensetype, interrupt_callback_t callback)
{	
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	uint8_t bit;
	volatile uint8_t *reg;
	do
	{
		if (port==NULL)
     4ca:	89 2b       	or	r24, r25
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <gpio_hal_pin_config_interrupt+0xc>
     4ce:	d6 c0       	rjmp	.+428    	; 0x67c <gpio_hal_pin_config_interrupt+0x1b8>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTD && *port!=PORTE)
     4d0:	90 81       	ld	r25, Z
     4d2:	8b b1       	in	r24, 0x0b	; 11
     4d4:	98 17       	cp	r25, r24
     4d6:	d1 f1       	breq	.+116    	; 0x54c <gpio_hal_pin_config_interrupt+0x88>
     4d8:	90 81       	ld	r25, Z
     4da:	8e b1       	in	r24, 0x0e	; 14
     4dc:	98 17       	cp	r25, r24
     4de:	b1 f1       	breq	.+108    	; 0x54c <gpio_hal_pin_config_interrupt+0x88>
		{
			if (*port==PORTA || *port==PORTB || *port==PORTC || *port==PORTF || *port==PORTG || *port==PORTH || *port==PORTJ || *port==PORTK || *port==PORTL)
     4e0:	90 81       	ld	r25, Z
     4e2:	82 b1       	in	r24, 0x02	; 2
     4e4:	98 17       	cp	r25, r24
     4e6:	09 f4       	brne	.+2      	; 0x4ea <gpio_hal_pin_config_interrupt+0x26>
     4e8:	ce c0       	rjmp	.+412    	; 0x686 <gpio_hal_pin_config_interrupt+0x1c2>
     4ea:	90 81       	ld	r25, Z
     4ec:	85 b1       	in	r24, 0x05	; 5
     4ee:	98 17       	cp	r25, r24
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <gpio_hal_pin_config_interrupt+0x30>
     4f2:	ce c0       	rjmp	.+412    	; 0x690 <gpio_hal_pin_config_interrupt+0x1cc>
     4f4:	90 81       	ld	r25, Z
     4f6:	88 b1       	in	r24, 0x08	; 8
     4f8:	98 17       	cp	r25, r24
     4fa:	09 f4       	brne	.+2      	; 0x4fe <gpio_hal_pin_config_interrupt+0x3a>
     4fc:	ce c0       	rjmp	.+412    	; 0x69a <gpio_hal_pin_config_interrupt+0x1d6>
     4fe:	90 81       	ld	r25, Z
     500:	81 b3       	in	r24, 0x11	; 17
     502:	98 17       	cp	r25, r24
     504:	09 f4       	brne	.+2      	; 0x508 <gpio_hal_pin_config_interrupt+0x44>
     506:	ce c0       	rjmp	.+412    	; 0x6a4 <gpio_hal_pin_config_interrupt+0x1e0>
     508:	90 81       	ld	r25, Z
     50a:	84 b3       	in	r24, 0x14	; 20
     50c:	98 17       	cp	r25, r24
     50e:	09 f4       	brne	.+2      	; 0x512 <gpio_hal_pin_config_interrupt+0x4e>
     510:	ce c0       	rjmp	.+412    	; 0x6ae <gpio_hal_pin_config_interrupt+0x1ea>
     512:	90 81       	ld	r25, Z
     514:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     518:	98 17       	cp	r25, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <gpio_hal_pin_config_interrupt+0x5a>
     51c:	cd c0       	rjmp	.+410    	; 0x6b8 <gpio_hal_pin_config_interrupt+0x1f4>
     51e:	90 81       	ld	r25, Z
     520:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     524:	98 17       	cp	r25, r24
     526:	09 f4       	brne	.+2      	; 0x52a <gpio_hal_pin_config_interrupt+0x66>
     528:	cc c0       	rjmp	.+408    	; 0x6c2 <gpio_hal_pin_config_interrupt+0x1fe>
     52a:	90 81       	ld	r25, Z
     52c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     530:	98 17       	cp	r25, r24
     532:	09 f4       	brne	.+2      	; 0x536 <gpio_hal_pin_config_interrupt+0x72>
     534:	cb c0       	rjmp	.+406    	; 0x6cc <gpio_hal_pin_config_interrupt+0x208>
     536:	90 81       	ld	r25, Z
     538:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <gpio_hal_pin_config_interrupt+0x7e>
     540:	ca c0       	rjmp	.+404    	; 0x6d6 <gpio_hal_pin_config_interrupt+0x212>
				err=PIN_NOT_SUPPORT;
				break;
			}
			else
			{
				err=PORT_ERROR;
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	e2 c0       	rjmp	.+452    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
				break;
			}
		}
		
		if (pin>7)
     54c:	68 30       	cpi	r22, 0x08	; 8
     54e:	08 f0       	brcs	.+2      	; 0x552 <gpio_hal_pin_config_interrupt+0x8e>
     550:	c7 c0       	rjmp	.+398    	; 0x6e0 <gpio_hal_pin_config_interrupt+0x21c>
		{
			err=PIN_ERROR;
			break;
		}
		if (*port == PORTD && pin<4)
     552:	90 81       	ld	r25, Z
     554:	8b b1       	in	r24, 0x0b	; 11
     556:	98 13       	cpse	r25, r24
     558:	03 c0       	rjmp	.+6      	; 0x560 <gpio_hal_pin_config_interrupt+0x9c>
     55a:	64 30       	cpi	r22, 0x04	; 4
     55c:	68 f0       	brcs	.+26     	; 0x578 <gpio_hal_pin_config_interrupt+0xb4>
     55e:	cf c0       	rjmp	.+414    	; 0x6fe <gpio_hal_pin_config_interrupt+0x23a>
		{
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
     560:	90 81       	ld	r25, Z
     562:	8e b1       	in	r24, 0x0e	; 14
     564:	98 13       	cpse	r25, r24
     566:	c1 c0       	rjmp	.+386    	; 0x6ea <gpio_hal_pin_config_interrupt+0x226>
     568:	64 30       	cpi	r22, 0x04	; 4
     56a:	08 f4       	brcc	.+2      	; 0x56e <gpio_hal_pin_config_interrupt+0xaa>
     56c:	c3 c0       	rjmp	.+390    	; 0x6f4 <gpio_hal_pin_config_interrupt+0x230>
		{
			reg = &EICRB;
			bit = pin-4;
     56e:	8c ef       	ldi	r24, 0xFC	; 252
     570:	86 0f       	add	r24, r22
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
		{
			reg = &EICRB;
     572:	ea e6       	ldi	r30, 0x6A	; 106
     574:	f0 e0       	ldi	r31, 0x00	; 0
			bit = pin-4;
     576:	03 c0       	rjmp	.+6      	; 0x57e <gpio_hal_pin_config_interrupt+0xba>
			break;
		}
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
			bit = pin;
     578:	86 2f       	mov	r24, r22
			err=PIN_ERROR;
			break;
		}
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
     57a:	e9 e6       	ldi	r30, 0x69	; 105
     57c:	f0 e0       	ldi	r31, 0x00	; 0
		else
		{
			err=PIN_NOT_SUPPORT;
			break;
		}
		switch (sensetype)
     57e:	41 30       	cpi	r20, 0x01	; 1
     580:	f9 f0       	breq	.+62     	; 0x5c0 <gpio_hal_pin_config_interrupt+0xfc>
     582:	30 f0       	brcs	.+12     	; 0x590 <gpio_hal_pin_config_interrupt+0xcc>
     584:	42 30       	cpi	r20, 0x02	; 2
     586:	b1 f1       	breq	.+108    	; 0x5f4 <gpio_hal_pin_config_interrupt+0x130>
     588:	43 30       	cpi	r20, 0x03	; 3
     58a:	09 f4       	brne	.+2      	; 0x58e <gpio_hal_pin_config_interrupt+0xca>
     58c:	4e c0       	rjmp	.+156    	; 0x62a <gpio_hal_pin_config_interrupt+0x166>
     58e:	63 c0       	rjmp	.+198    	; 0x656 <gpio_hal_pin_config_interrupt+0x192>
		{
			case low:
			{
				(*reg) &= ~(1 << (2 * bit + 1)) & ~(1 << (2 * bit));
     590:	70 81       	ld	r23, Z
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	dc 01       	movw	r26, r24
     59a:	11 96       	adiw	r26, 0x01	; 1
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	ea 01       	movw	r28, r20
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <gpio_hal_pin_config_interrupt+0xe4>
     5a4:	cc 0f       	add	r28, r28
     5a6:	dd 1f       	adc	r29, r29
     5a8:	aa 95       	dec	r26
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <gpio_hal_pin_config_interrupt+0xe0>
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <gpio_hal_pin_config_interrupt+0xee>
     5ae:	44 0f       	add	r20, r20
     5b0:	55 1f       	adc	r21, r21
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <gpio_hal_pin_config_interrupt+0xea>
     5b6:	4c 2b       	or	r20, r28
     5b8:	40 95       	com	r20
     5ba:	47 23       	and	r20, r23
     5bc:	40 83       	st	Z, r20
				break;
     5be:	4b c0       	rjmp	.+150    	; 0x656 <gpio_hal_pin_config_interrupt+0x192>
			}
			case change:
			{
				(*reg) |= (1 << (2 * bit));
     5c0:	70 81       	ld	r23, Z
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	da 01       	movw	r26, r20
     5ce:	08 2e       	mov	r0, r24
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <gpio_hal_pin_config_interrupt+0x112>
     5d2:	aa 0f       	add	r26, r26
     5d4:	bb 1f       	adc	r27, r27
     5d6:	0a 94       	dec	r0
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <gpio_hal_pin_config_interrupt+0x10e>
     5da:	a7 2b       	or	r26, r23
     5dc:	a0 83       	st	Z, r26
				(*reg) &= ~(1 << (2 * bit + 1));
     5de:	70 81       	ld	r23, Z
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <gpio_hal_pin_config_interrupt+0x124>
     5e4:	44 0f       	add	r20, r20
     5e6:	55 1f       	adc	r21, r21
     5e8:	8a 95       	dec	r24
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <gpio_hal_pin_config_interrupt+0x120>
     5ec:	40 95       	com	r20
     5ee:	47 23       	and	r20, r23
     5f0:	40 83       	st	Z, r20
				break;
     5f2:	31 c0       	rjmp	.+98     	; 0x656 <gpio_hal_pin_config_interrupt+0x192>
			}
			case falling:
			{
				(*reg) |= (1 << (2 * bit + 1));
     5f4:	70 81       	ld	r23, Z
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	dc 01       	movw	r26, r24
     5fe:	11 96       	adiw	r26, 0x01	; 1
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	ea 01       	movw	r28, r20
     606:	02 c0       	rjmp	.+4      	; 0x60c <gpio_hal_pin_config_interrupt+0x148>
     608:	cc 0f       	add	r28, r28
     60a:	dd 1f       	adc	r29, r29
     60c:	aa 95       	dec	r26
     60e:	e2 f7       	brpl	.-8      	; 0x608 <gpio_hal_pin_config_interrupt+0x144>
     610:	de 01       	movw	r26, r28
     612:	a7 2b       	or	r26, r23
     614:	a0 83       	st	Z, r26
				(*reg) &= ~(1 << (2 * bit));
     616:	90 81       	ld	r25, Z
     618:	02 c0       	rjmp	.+4      	; 0x61e <gpio_hal_pin_config_interrupt+0x15a>
     61a:	44 0f       	add	r20, r20
     61c:	55 1f       	adc	r21, r21
     61e:	8a 95       	dec	r24
     620:	e2 f7       	brpl	.-8      	; 0x61a <gpio_hal_pin_config_interrupt+0x156>
     622:	40 95       	com	r20
     624:	49 23       	and	r20, r25
     626:	40 83       	st	Z, r20
				break;
     628:	16 c0       	rjmp	.+44     	; 0x656 <gpio_hal_pin_config_interrupt+0x192>
			}
			case rising:
			{
				(*reg) |= (1 << (2 * bit + 1)) | (1 << (2 * bit));
     62a:	70 81       	ld	r23, Z
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	dc 01       	movw	r26, r24
     634:	11 96       	adiw	r26, 0x01	; 1
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	ea 01       	movw	r28, r20
     63c:	02 c0       	rjmp	.+4      	; 0x642 <gpio_hal_pin_config_interrupt+0x17e>
     63e:	cc 0f       	add	r28, r28
     640:	dd 1f       	adc	r29, r29
     642:	aa 95       	dec	r26
     644:	e2 f7       	brpl	.-8      	; 0x63e <gpio_hal_pin_config_interrupt+0x17a>
     646:	02 c0       	rjmp	.+4      	; 0x64c <gpio_hal_pin_config_interrupt+0x188>
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	8a 95       	dec	r24
     64e:	e2 f7       	brpl	.-8      	; 0x648 <gpio_hal_pin_config_interrupt+0x184>
     650:	47 2b       	or	r20, r23
     652:	4c 2b       	or	r20, r28
     654:	40 83       	st	Z, r20
				break;
			}
		}
		EIMSK |= (1 << pin);
     656:	4d b3       	in	r20, 0x1d	; 29
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <gpio_hal_pin_config_interrupt+0x19e>
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	6a 95       	dec	r22
     664:	e2 f7       	brpl	.-8      	; 0x65e <gpio_hal_pin_config_interrupt+0x19a>
     666:	84 2b       	or	r24, r20
     668:	8d bb       	out	0x1d, r24	; 29
		sei();
     66a:	78 94       	sei
		g_interrupt_callback=callback;
     66c:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
     670:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 *
 * @return Error code.
 */
uint32_t gpio_hal_pin_config_interrupt(volatile uint8_t *port, uint8_t pin, enum sense sensetype, interrupt_callback_t callback)
{	
	uint32_t err=NO_ERROR;
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	cb 01       	movw	r24, r22
     67a:	4a c0       	rjmp	.+148    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
	volatile uint8_t *reg;
	do
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	45 c0       	rjmp	.+138    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
		}
		if (*port!=PORTD && *port!=PORTE)
		{
			if (*port==PORTA || *port==PORTB || *port==PORTC || *port==PORTF || *port==PORTG || *port==PORTH || *port==PORTJ || *port==PORTK || *port==PORTL)
			{
				err=PIN_NOT_SUPPORT;
     686:	64 e0       	ldi	r22, 0x04	; 4
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	40 c0       	rjmp	.+128    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     690:	64 e0       	ldi	r22, 0x04	; 4
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	3b c0       	rjmp	.+118    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     69a:	64 e0       	ldi	r22, 0x04	; 4
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	36 c0       	rjmp	.+108    	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6a4:	64 e0       	ldi	r22, 0x04	; 4
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	31 c0       	rjmp	.+98     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2c c0       	rjmp	.+88     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	27 c0       	rjmp	.+78     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	22 c0       	rjmp	.+68     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6cc:	64 e0       	ldi	r22, 0x04	; 4
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	1d c0       	rjmp	.+58     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	18 c0       	rjmp	.+48     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
			}
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     6e0:	63 e0       	ldi	r22, 0x03	; 3
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	13 c0       	rjmp	.+38     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
			reg = &EICRB;
			bit = pin-4;
		}
		else
		{
			err=PIN_NOT_SUPPORT;
     6ea:	64 e0       	ldi	r22, 0x04	; 4
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e c0       	rjmp	.+28     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	09 c0       	rjmp	.+18     	; 0x710 <gpio_hal_pin_config_interrupt+0x24c>
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
     6fe:	90 81       	ld	r25, Z
     700:	8e b1       	in	r24, 0x0e	; 14
     702:	98 17       	cp	r25, r24
     704:	09 f4       	brne	.+2      	; 0x708 <gpio_hal_pin_config_interrupt+0x244>
     706:	33 cf       	rjmp	.-410    	; 0x56e <gpio_hal_pin_config_interrupt+0xaa>
			reg = &EICRB;
			bit = pin-4;
		}
		else
		{
			err=PIN_NOT_SUPPORT;
     708:	64 e0       	ldi	r22, 0x04	; 4
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
		EIMSK |= (1 << pin);
		sei();
		g_interrupt_callback=callback;
	} while (0);
	return err;
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <__vector_1>:

ISR(INT0_vect)
{
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
     720:	0b b6       	in	r0, 0x3b	; 59
     722:	0f 92       	push	r0
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     73c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     740:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     744:	30 97       	sbiw	r30, 0x00	; 0
     746:	11 f0       	breq	.+4      	; 0x74c <__vector_1+0x36>
	{
		g_interrupt_callback(0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	19 95       	eicall
	}
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	0f 90       	pop	r0
     766:	0b be       	out	0x3b, r0	; 59
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <__vector_2>:

ISR(INT1_vect)
{
     772:	1f 92       	push	r1
     774:	0f 92       	push	r0
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	0f 92       	push	r0
     77a:	11 24       	eor	r1, r1
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     798:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     79c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     7a0:	30 97       	sbiw	r30, 0x00	; 0
     7a2:	11 f0       	breq	.+4      	; 0x7a8 <__vector_2+0x36>
	{
		g_interrupt_callback(1);
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	19 95       	eicall
	}
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0b be       	out	0x3b, r0	; 59
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <__vector_3>:

ISR(INT2_vect)
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	0b b6       	in	r0, 0x3b	; 59
     7da:	0f 92       	push	r0
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     7f4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     7f8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     7fc:	30 97       	sbiw	r30, 0x00	; 0
     7fe:	11 f0       	breq	.+4      	; 0x804 <__vector_3+0x36>
	{
		g_interrupt_callback(2);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	19 95       	eicall
	}
}
     804:	ff 91       	pop	r31
     806:	ef 91       	pop	r30
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	7f 91       	pop	r23
     812:	6f 91       	pop	r22
     814:	5f 91       	pop	r21
     816:	4f 91       	pop	r20
     818:	3f 91       	pop	r19
     81a:	2f 91       	pop	r18
     81c:	0f 90       	pop	r0
     81e:	0b be       	out	0x3b, r0	; 59
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_4>:

ISR(INT3_vect)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     850:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     854:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     858:	30 97       	sbiw	r30, 0x00	; 0
     85a:	11 f0       	breq	.+4      	; 0x860 <__vector_4+0x36>
	{
		g_interrupt_callback(3);
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	19 95       	eicall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_5>:

ISR(INT4_vect)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	0b b6       	in	r0, 0x3b	; 59
     892:	0f 92       	push	r0
     894:	2f 93       	push	r18
     896:	3f 93       	push	r19
     898:	4f 93       	push	r20
     89a:	5f 93       	push	r21
     89c:	6f 93       	push	r22
     89e:	7f 93       	push	r23
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	af 93       	push	r26
     8a6:	bf 93       	push	r27
     8a8:	ef 93       	push	r30
     8aa:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     8ac:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     8b0:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     8b4:	30 97       	sbiw	r30, 0x00	; 0
     8b6:	11 f0       	breq	.+4      	; 0x8bc <__vector_5+0x36>
	{
		g_interrupt_callback(4);
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	19 95       	eicall
	}
}
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	0f 90       	pop	r0
     8d6:	0b be       	out	0x3b, r0	; 59
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <__vector_6>:

ISR(INT5_vect)
{
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	0b b6       	in	r0, 0x3b	; 59
     8ee:	0f 92       	push	r0
     8f0:	2f 93       	push	r18
     8f2:	3f 93       	push	r19
     8f4:	4f 93       	push	r20
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
     902:	bf 93       	push	r27
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     908:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     90c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     910:	30 97       	sbiw	r30, 0x00	; 0
     912:	11 f0       	breq	.+4      	; 0x918 <__vector_6+0x36>
	{
		g_interrupt_callback(5);
     914:	85 e0       	ldi	r24, 0x05	; 5
     916:	19 95       	eicall
	}
}
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0b be       	out	0x3b, r0	; 59
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <__vector_7>:

ISR(INT6_vect)
{
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	0f 92       	push	r0
     946:	11 24       	eor	r1, r1
     948:	0b b6       	in	r0, 0x3b	; 59
     94a:	0f 92       	push	r0
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	4f 93       	push	r20
     952:	5f 93       	push	r21
     954:	6f 93       	push	r22
     956:	7f 93       	push	r23
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
     95c:	af 93       	push	r26
     95e:	bf 93       	push	r27
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     964:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     968:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	11 f0       	breq	.+4      	; 0x974 <__vector_7+0x36>
	{
		g_interrupt_callback(6);
     970:	86 e0       	ldi	r24, 0x06	; 6
     972:	19 95       	eicall
	}
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0b be       	out	0x3b, r0	; 59
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_8>:

ISR(INT7_vect)
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	0b b6       	in	r0, 0x3b	; 59
     9a6:	0f 92       	push	r0
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     9c0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     9c4:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     9c8:	30 97       	sbiw	r30, 0x00	; 0
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <__vector_8+0x36>
	{
		g_interrupt_callback(7);
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	19 95       	eicall
	}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	7f 91       	pop	r23
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0b be       	out	0x3b, r0	; 59
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <led_init>:
 *        led_pin - Pin of the LED.
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
     9f6:	cf 93       	push	r28
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
     9f8:	8b 30       	cpi	r24, 0x0B	; 11
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <led_init+0x8>
     9fc:	a1 c0       	rjmp	.+322    	; 0xb40 <led_init+0x14a>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     9fe:	68 30       	cpi	r22, 0x08	; 8
     a00:	08 f0       	brcs	.+2      	; 0xa04 <led_init+0xe>
     a02:	a3 c0       	rjmp	.+326    	; 0xb4a <led_init+0x154>
		{
			err=PIN_ERROR;
			break;
		}
		switch (led_port)
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	8b 30       	cpi	r24, 0x0B	; 11
     a08:	91 05       	cpc	r25, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <led_init+0x18>
     a0c:	a3 c0       	rjmp	.+326    	; 0xb54 <led_init+0x15e>
     a0e:	c6 2f       	mov	r28, r22
     a10:	fc 01       	movw	r30, r24
     a12:	88 27       	eor	r24, r24
     a14:	ee 58       	subi	r30, 0x8E	; 142
     a16:	ff 4f       	sbci	r31, 0xFF	; 255
     a18:	8f 4f       	sbci	r24, 0xFF	; 255
     a1a:	13 c7       	rjmp	.+3622   	; 0x1842 <__tablejump2__>
		{
			case AL:
			{
				gpio_hal_pin_init(&DDRA,led_pin,output);
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	81 e2       	ldi	r24, 0x21	; 33
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	2a dc       	rcall	.-1964   	; 0x278 <gpio_hal_pin_init>
				gpio_hal_pin_set(&PORTA, led_pin, 0);
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	6c 2f       	mov	r22, r28
     a28:	82 e2       	ldi	r24, 0x22	; 34
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	89 dc       	rcall	.-1774   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	cb 01       	movw	r24, r22
		{
			case AL:
			{
				gpio_hal_pin_init(&DDRA,led_pin,output);
				gpio_hal_pin_set(&PORTA, led_pin, 0);
				break;
     a34:	97 c0       	rjmp	.+302    	; 0xb64 <led_init+0x16e>
			}
			case BL:
			{
				gpio_hal_pin_init(&DDRB,led_pin,output);
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	84 e2       	ldi	r24, 0x24	; 36
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	1d dc       	rcall	.-1990   	; 0x278 <gpio_hal_pin_init>
				gpio_hal_pin_set(&PORTB, led_pin, 0);
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	6c 2f       	mov	r22, r28
     a42:	85 e2       	ldi	r24, 0x25	; 37
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	7c dc       	rcall	.-1800   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
			}
			case BL:
			{
				gpio_hal_pin_init(&DDRB,led_pin,output);
				gpio_hal_pin_set(&PORTB, led_pin, 0);
				break;
     a4c:	cb 01       	movw	r24, r22
			}
			case CL:
			{
				gpio_hal_pin_init(&DDRC,led_pin,output);
     a4e:	8a c0       	rjmp	.+276    	; 0xb64 <led_init+0x16e>
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	87 e2       	ldi	r24, 0x27	; 39
     a54:	90 e0       	ldi	r25, 0x00	; 0
				gpio_hal_pin_set(&PORTC, led_pin, 0);
     a56:	10 dc       	rcall	.-2016   	; 0x278 <gpio_hal_pin_init>
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	6c 2f       	mov	r22, r28
     a5c:	88 e2       	ldi	r24, 0x28	; 40
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	6f dc       	rcall	.-1826   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
			}
			case CL:
			{
				gpio_hal_pin_init(&DDRC,led_pin,output);
				gpio_hal_pin_set(&PORTC, led_pin, 0);
				break;
     a66:	cb 01       	movw	r24, r22
			}
			case DL:
			{
				gpio_hal_pin_init(&DDRD,led_pin,output);
     a68:	7d c0       	rjmp	.+250    	; 0xb64 <led_init+0x16e>
     a6a:	41 e0       	ldi	r20, 0x01	; 1
     a6c:	8a e2       	ldi	r24, 0x2A	; 42
     a6e:	90 e0       	ldi	r25, 0x00	; 0
				gpio_hal_pin_set(&PORTD, led_pin, 0);
     a70:	03 dc       	rcall	.-2042   	; 0x278 <gpio_hal_pin_init>
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	6c 2f       	mov	r22, r28
     a76:	8b e2       	ldi	r24, 0x2B	; 43
     a78:	90 e0       	ldi	r25, 0x00	; 0
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     a7a:	62 dc       	rcall	.-1852   	; 0x340 <gpio_hal_pin_set>
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
				gpio_hal_pin_set(&PORTD, led_pin, 0);
				break;
			}
			case EL:
			{
				gpio_hal_pin_init(&DDRE,led_pin,output);
     a80:	cb 01       	movw	r24, r22
     a82:	70 c0       	rjmp	.+224    	; 0xb64 <led_init+0x16e>
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	8d e2       	ldi	r24, 0x2D	; 45
     a88:	90 e0       	ldi	r25, 0x00	; 0
				gpio_hal_pin_set(&PORTE, led_pin, 0);
     a8a:	f6 db       	rcall	.-2068   	; 0x278 <gpio_hal_pin_init>
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	6c 2f       	mov	r22, r28
     a90:	8e e2       	ldi	r24, 0x2E	; 46
     a92:	90 e0       	ldi	r25, 0x00	; 0
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     a94:	55 dc       	rcall	.-1878   	; 0x340 <gpio_hal_pin_set>
     a96:	60 e0       	ldi	r22, 0x00	; 0
			}
			case EL:
			{
				gpio_hal_pin_init(&DDRE,led_pin,output);
				gpio_hal_pin_set(&PORTE, led_pin, 0);
				break;
     a98:	70 e0       	ldi	r23, 0x00	; 0
			}
			case FL:
			{
				gpio_hal_pin_init(&DDRF,led_pin,output);
     a9a:	cb 01       	movw	r24, r22
     a9c:	63 c0       	rjmp	.+198    	; 0xb64 <led_init+0x16e>
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	80 e3       	ldi	r24, 0x30	; 48
     aa2:	90 e0       	ldi	r25, 0x00	; 0
				gpio_hal_pin_set(&PORTF, led_pin, 0);
     aa4:	e9 db       	rcall	.-2094   	; 0x278 <gpio_hal_pin_init>
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	6c 2f       	mov	r22, r28
     aaa:	81 e3       	ldi	r24, 0x31	; 49
     aac:	90 e0       	ldi	r25, 0x00	; 0
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     aae:	48 dc       	rcall	.-1904   	; 0x340 <gpio_hal_pin_set>
     ab0:	60 e0       	ldi	r22, 0x00	; 0
			}
			case FL:
			{
				gpio_hal_pin_init(&DDRF,led_pin,output);
				gpio_hal_pin_set(&PORTF, led_pin, 0);
				break;
     ab2:	70 e0       	ldi	r23, 0x00	; 0
			}
			case GL:
			{	
				if (led_pin>5)
     ab4:	cb 01       	movw	r24, r22
     ab6:	56 c0       	rjmp	.+172    	; 0xb64 <led_init+0x16e>
     ab8:	66 30       	cpi	r22, 0x06	; 6
				{
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_init(&DDRG,led_pin,output);
     aba:	08 f0       	brcs	.+2      	; 0xabe <led_init+0xc8>
     abc:	4f c0       	rjmp	.+158    	; 0xb5c <led_init+0x166>
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	83 e3       	ldi	r24, 0x33	; 51
				gpio_hal_pin_set(&PORTG, led_pin, 0);
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	d9 db       	rcall	.-2126   	; 0x278 <gpio_hal_pin_init>
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	6c 2f       	mov	r22, r28
     aca:	84 e3       	ldi	r24, 0x34	; 52
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	38 dc       	rcall	.-1936   	; 0x340 <gpio_hal_pin_set>
     ad0:	60 e0       	ldi	r22, 0x00	; 0
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_init(&DDRG,led_pin,output);
				gpio_hal_pin_set(&PORTG, led_pin, 0);
				break;
     ad2:	70 e0       	ldi	r23, 0x00	; 0
			}
			case HL:
			{
				gpio_hal_pin_init(&DDRH,led_pin,output);
     ad4:	cb 01       	movw	r24, r22
     ad6:	46 c0       	rjmp	.+140    	; 0xb64 <led_init+0x16e>
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	81 e0       	ldi	r24, 0x01	; 1
				gpio_hal_pin_set(&PORTH, led_pin, 0);
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	cc db       	rcall	.-2152   	; 0x278 <gpio_hal_pin_init>
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	6c 2f       	mov	r22, r28
     ae4:	82 e0       	ldi	r24, 0x02	; 2
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	2b dc       	rcall	.-1962   	; 0x340 <gpio_hal_pin_set>
     aea:	60 e0       	ldi	r22, 0x00	; 0
				gpio_hal_pin_set(&PORTH, led_pin, 0);
				break;
			}
			case JL:
			{
				gpio_hal_pin_init(&DDRJ,led_pin,output);
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	cb 01       	movw	r24, r22
     af0:	39 c0       	rjmp	.+114    	; 0xb64 <led_init+0x16e>
     af2:	41 e0       	ldi	r20, 0x01	; 1
				gpio_hal_pin_set(&PORTJ, led_pin, 0);
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	bf db       	rcall	.-2178   	; 0x278 <gpio_hal_pin_init>
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	6c 2f       	mov	r22, r28
     afe:	85 e0       	ldi	r24, 0x05	; 5
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	1e dc       	rcall	.-1988   	; 0x340 <gpio_hal_pin_set>
			}
			case JL:
			{
				gpio_hal_pin_init(&DDRJ,led_pin,output);
				gpio_hal_pin_set(&PORTJ, led_pin, 0);
				break;
     b04:	60 e0       	ldi	r22, 0x00	; 0
			}
			case KL:
			{
				gpio_hal_pin_init(&DDRK,led_pin,output);
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	cb 01       	movw	r24, r22
     b0a:	2c c0       	rjmp	.+88     	; 0xb64 <led_init+0x16e>
     b0c:	41 e0       	ldi	r20, 0x01	; 1
				gpio_hal_pin_set(&PORTK, led_pin, 0);
     b0e:	87 e0       	ldi	r24, 0x07	; 7
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	b2 db       	rcall	.-2204   	; 0x278 <gpio_hal_pin_init>
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	6c 2f       	mov	r22, r28
     b18:	88 e0       	ldi	r24, 0x08	; 8
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	11 dc       	rcall	.-2014   	; 0x340 <gpio_hal_pin_set>
     b1e:	60 e0       	ldi	r22, 0x00	; 0
			}
			case KL:
			{
				gpio_hal_pin_init(&DDRK,led_pin,output);
				gpio_hal_pin_set(&PORTK, led_pin, 0);
				break;
     b20:	70 e0       	ldi	r23, 0x00	; 0
			}
			case LL:
			{
				gpio_hal_pin_init(&DDRL,led_pin,output);
     b22:	cb 01       	movw	r24, r22
     b24:	1f c0       	rjmp	.+62     	; 0xb64 <led_init+0x16e>
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	8a e0       	ldi	r24, 0x0A	; 10
     b2a:	91 e0       	ldi	r25, 0x01	; 1
				gpio_hal_pin_set(&PORTL, led_pin, 0);
     b2c:	a5 db       	rcall	.-2230   	; 0x278 <gpio_hal_pin_init>
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	6c 2f       	mov	r22, r28
     b32:	8b e0       	ldi	r24, 0x0B	; 11
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	04 dc       	rcall	.-2040   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	cb 01       	movw	r24, r22
			}
			case LL:
			{
				gpio_hal_pin_init(&DDRL,led_pin,output);
				gpio_hal_pin_set(&PORTL, led_pin, 0);
				break;
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <led_init+0x16e>
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
		{
			err=PORT_ERROR;
     b40:	62 e0       	ldi	r22, 0x02	; 2
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0d c0       	rjmp	.+26     	; 0xb64 <led_init+0x16e>
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	08 c0       	rjmp	.+16     	; 0xb64 <led_init+0x16e>
 *
 * @return Error code.
 */
uint32_t led_init (enum portl led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	cb 01       	movw	r24, r22
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <led_init+0x16e>
			}
			case GL:
			{	
				if (led_pin>5)
				{
					err=PIN_ERROR;
     b5c:	63 e0       	ldi	r22, 0x03	; 3
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}
	}while (0);
	return err;		
}
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <led_toggle>:
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
     b68:	8b 30       	cpi	r24, 0x0B	; 11
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <led_toggle+0x6>
     b6c:	5d c0       	rjmp	.+186    	; 0xc28 <led_toggle+0xc0>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     b6e:	68 30       	cpi	r22, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <led_toggle+0xc>
     b72:	5f c0       	rjmp	.+190    	; 0xc32 <led_toggle+0xca>
		{
			err=PIN_ERROR;
			break;
		}
		switch (led_port)
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	8b 30       	cpi	r24, 0x0B	; 11
     b78:	91 05       	cpc	r25, r1
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <led_toggle+0x16>
     b7c:	5f c0       	rjmp	.+190    	; 0xc3c <led_toggle+0xd4>
     b7e:	fc 01       	movw	r30, r24
     b80:	88 27       	eor	r24, r24
     b82:	e3 58       	subi	r30, 0x83	; 131
     b84:	ff 4f       	sbci	r31, 0xFF	; 255
     b86:	8f 4f       	sbci	r24, 0xFF	; 255
     b88:	5c c6       	rjmp	.+3256   	; 0x1842 <__tablejump2__>
		{
			case AL:
			{
				gpio_hal_pin_toggle(&PORTA, led_pin);
     b8a:	82 e2       	ldi	r24, 0x22	; 34
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	3c dc       	rcall	.-1928   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	cb 01       	movw	r24, r22
		switch (led_port)
		{
			case AL:
			{
				gpio_hal_pin_toggle(&PORTA, led_pin);
				break;
     b96:	08 95       	ret
			}
			case BL:
			{
				gpio_hal_pin_toggle(&PORTB, led_pin);
     b98:	85 e2       	ldi	r24, 0x25	; 37
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	35 dc       	rcall	.-1942   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	cb 01       	movw	r24, r22
				gpio_hal_pin_toggle(&PORTB, led_pin);
				break;
			}
			case CL:
			{
				gpio_hal_pin_toggle(&PORTC, led_pin);
     ba4:	08 95       	ret
     ba6:	88 e2       	ldi	r24, 0x28	; 40
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	2e dc       	rcall	.-1956   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case CL:
			{
				gpio_hal_pin_toggle(&PORTC, led_pin);
				break;
     bb0:	cb 01       	movw	r24, r22
			}
			case DL:
			{
				gpio_hal_pin_toggle(&PORTD, led_pin);
     bb2:	08 95       	ret
     bb4:	8b e2       	ldi	r24, 0x2B	; 43
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	27 dc       	rcall	.-1970   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case DL:
			{
				gpio_hal_pin_toggle(&PORTD, led_pin);
				break;
     bbe:	cb 01       	movw	r24, r22
			}
			case EL:
			{
				gpio_hal_pin_toggle(&PORTE, led_pin);
     bc0:	08 95       	ret
     bc2:	8e e2       	ldi	r24, 0x2E	; 46
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	20 dc       	rcall	.-1984   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case EL:
			{
				gpio_hal_pin_toggle(&PORTE, led_pin);
				break;
     bcc:	cb 01       	movw	r24, r22
			}
			case FL:
			{
				gpio_hal_pin_toggle(&PORTF, led_pin);
     bce:	08 95       	ret
     bd0:	81 e3       	ldi	r24, 0x31	; 49
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	19 dc       	rcall	.-1998   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case FL:
			{
				gpio_hal_pin_toggle(&PORTF, led_pin);
				break;
     bda:	cb 01       	movw	r24, r22
			}
			case GL:
			{
				if (led_pin>5)
     bdc:	08 95       	ret
     bde:	66 30       	cpi	r22, 0x06	; 6
				{
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_toggle(&PORTG, led_pin);
     be0:	88 f5       	brcc	.+98     	; 0xc44 <led_toggle+0xdc>
     be2:	84 e3       	ldi	r24, 0x34	; 52
     be4:	90 e0       	ldi	r25, 0x00	; 0
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     be6:	10 dc       	rcall	.-2016   	; 0x408 <gpio_hal_pin_toggle>
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
				{
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_toggle(&PORTG, led_pin);
				break;
     bec:	cb 01       	movw	r24, r22
			}
			case HL:
			{
				gpio_hal_pin_toggle(&PORTH, led_pin);
     bee:	08 95       	ret
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	91 e0       	ldi	r25, 0x01	; 1
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     bf4:	09 dc       	rcall	.-2030   	; 0x408 <gpio_hal_pin_toggle>
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case HL:
			{
				gpio_hal_pin_toggle(&PORTH, led_pin);
				break;
     bfa:	cb 01       	movw	r24, r22
			}
			case JL:
			{
				gpio_hal_pin_toggle(&PORTJ, led_pin);
     bfc:	08 95       	ret
     bfe:	85 e0       	ldi	r24, 0x05	; 5
     c00:	91 e0       	ldi	r25, 0x01	; 1
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c02:	02 dc       	rcall	.-2044   	; 0x408 <gpio_hal_pin_toggle>
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
				gpio_hal_pin_toggle(&PORTJ, led_pin);
				break;
			}
			case KL:
			{
				gpio_hal_pin_toggle(&PORTK, led_pin);
     c08:	cb 01       	movw	r24, r22
     c0a:	08 95       	ret
     c0c:	88 e0       	ldi	r24, 0x08	; 8
     c0e:	91 e0       	ldi	r25, 0x01	; 1
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c10:	fb db       	rcall	.-2058   	; 0x408 <gpio_hal_pin_toggle>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case KL:
			{
				gpio_hal_pin_toggle(&PORTK, led_pin);
				break;
     c16:	cb 01       	movw	r24, r22
			}
			case LL:
			{
				gpio_hal_pin_toggle(&PORTL, led_pin);
     c18:	08 95       	ret
     c1a:	8b e0       	ldi	r24, 0x0B	; 11
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	f4 db       	rcall	.-2072   	; 0x408 <gpio_hal_pin_toggle>
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	cb 01       	movw	r24, r22
				break;
			}
			case LL:
			{
				gpio_hal_pin_toggle(&PORTL, led_pin);
				break;
     c26:	08 95       	ret
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
		{
			err=PORT_ERROR;
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	08 95       	ret
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     c32:	63 e0       	ldi	r22, 0x03	; 3
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	08 95       	ret
  *
  * @return Error code.
  */
uint32_t led_toggle(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	cb 01       	movw	r24, r22
     c42:	08 95       	ret
			}
			case GL:
			{
				if (led_pin>5)
				{
					err=PIN_ERROR;
     c44:	63 e0       	ldi	r22, 0x03	; 3
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}
	}while (0);
	return err;
}
     c4c:	08 95       	ret

00000c4e <led_off>:
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
     c4e:	8b 30       	cpi	r24, 0x0B	; 11
     c50:	08 f0       	brcs	.+2      	; 0xc54 <led_off+0x6>
     c52:	68 c0       	rjmp	.+208    	; 0xd24 <led_off+0xd6>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     c54:	68 30       	cpi	r22, 0x08	; 8
     c56:	08 f0       	brcs	.+2      	; 0xc5a <led_off+0xc>
     c58:	6a c0       	rjmp	.+212    	; 0xd2e <led_off+0xe0>
		{
			err=PIN_ERROR;
			break;
		}
		switch (led_port)
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	8b 30       	cpi	r24, 0x0B	; 11
     c5e:	91 05       	cpc	r25, r1
     c60:	08 f0       	brcs	.+2      	; 0xc64 <led_off+0x16>
     c62:	6a c0       	rjmp	.+212    	; 0xd38 <led_off+0xea>
     c64:	fc 01       	movw	r30, r24
     c66:	88 27       	eor	r24, r24
     c68:	e8 57       	subi	r30, 0x78	; 120
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	8f 4f       	sbci	r24, 0xFF	; 255
     c6e:	e9 c5       	rjmp	.+3026   	; 0x1842 <__tablejump2__>
		{
			case AL:
			{
				gpio_hal_pin_set(&PORTA, led_pin, 0);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	82 e2       	ldi	r24, 0x22	; 34
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	64 db       	rcall	.-2360   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	cb 01       	movw	r24, r22
		switch (led_port)
		{
			case AL:
			{
				gpio_hal_pin_set(&PORTA, led_pin, 0);
				break;
     c7e:	08 95       	ret
			}
			case BL:
			{
				gpio_hal_pin_set(&PORTB, led_pin, 0);
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	85 e2       	ldi	r24, 0x25	; 37
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	5c db       	rcall	.-2376   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	cb 01       	movw	r24, r22
				break;
			}
			case BL:
			{
				gpio_hal_pin_set(&PORTB, led_pin, 0);
				break;
     c8e:	08 95       	ret
			}
			case CL:
			{
				gpio_hal_pin_set(&PORTC, led_pin, 0);
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	88 e2       	ldi	r24, 0x28	; 40
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	54 db       	rcall	.-2392   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	cb 01       	movw	r24, r22
				gpio_hal_pin_set(&PORTC, led_pin, 0);
				break;
			}
			case DL:
			{
				gpio_hal_pin_set(&PORTD, led_pin, 0);
     c9e:	08 95       	ret
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	8b e2       	ldi	r24, 0x2B	; 43
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	4c db       	rcall	.-2408   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case DL:
			{
				gpio_hal_pin_set(&PORTD, led_pin, 0);
				break;
     cac:	cb 01       	movw	r24, r22
			}
			case EL:
			{
				gpio_hal_pin_set(&PORTE, led_pin, 0);
     cae:	08 95       	ret
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	8e e2       	ldi	r24, 0x2E	; 46
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	44 db       	rcall	.-2424   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case EL:
			{
				gpio_hal_pin_set(&PORTE, led_pin, 0);
				break;
     cbc:	cb 01       	movw	r24, r22
			}
			case FL:
			{
				gpio_hal_pin_set(&PORTF, led_pin, 0);
     cbe:	08 95       	ret
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	81 e3       	ldi	r24, 0x31	; 49
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	3c db       	rcall	.-2440   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case FL:
			{
				gpio_hal_pin_set(&PORTF, led_pin, 0);
				break;
     ccc:	cb 01       	movw	r24, r22
			}
			case GL:
			{
				if (led_pin>5)
     cce:	08 95       	ret
     cd0:	66 30       	cpi	r22, 0x06	; 6
				{
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_set(&PORTG, led_pin, 0);
     cd2:	b0 f5       	brcc	.+108    	; 0xd40 <led_off+0xf2>
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	84 e3       	ldi	r24, 0x34	; 52
     cd8:	90 e0       	ldi	r25, 0x00	; 0
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     cda:	32 db       	rcall	.-2460   	; 0x340 <gpio_hal_pin_set>
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
				{
					err=PIN_ERROR;
					break;
				}
				gpio_hal_pin_set(&PORTG, led_pin, 0);
				break;
     ce0:	cb 01       	movw	r24, r22
			}
			case HL:
			{
				gpio_hal_pin_set(&PORTH, led_pin, 0);
     ce2:	08 95       	ret
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	91 e0       	ldi	r25, 0x01	; 1
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     cea:	2a db       	rcall	.-2476   	; 0x340 <gpio_hal_pin_set>
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case HL:
			{
				gpio_hal_pin_set(&PORTH, led_pin, 0);
				break;
     cf0:	cb 01       	movw	r24, r22
			}
			case JL:
			{
				gpio_hal_pin_set(&PORTJ, led_pin, 0);
     cf2:	08 95       	ret
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	91 e0       	ldi	r25, 0x01	; 1
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     cfa:	22 db       	rcall	.-2492   	; 0x340 <gpio_hal_pin_set>
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case JL:
			{
				gpio_hal_pin_set(&PORTJ, led_pin, 0);
				break;
     d00:	cb 01       	movw	r24, r22
			}
			case KL:
			{
				gpio_hal_pin_set(&PORTK, led_pin, 0);
     d02:	08 95       	ret
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	91 e0       	ldi	r25, 0x01	; 1
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     d0a:	1a db       	rcall	.-2508   	; 0x340 <gpio_hal_pin_set>
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
				break;
			}
			case KL:
			{
				gpio_hal_pin_set(&PORTK, led_pin, 0);
				break;
     d10:	cb 01       	movw	r24, r22
			}
			case LL:
			{
				gpio_hal_pin_set(&PORTL, led_pin, 0);
     d12:	08 95       	ret
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	8b e0       	ldi	r24, 0x0B	; 11
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	12 db       	rcall	.-2524   	; 0x340 <gpio_hal_pin_set>
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
				break;
			}
			case LL:
			{
				gpio_hal_pin_set(&PORTL, led_pin, 0);
				break;
     d22:	08 95       	ret
	uint32_t err=NO_ERROR;
	do
	{
		if (led_port!=AL && led_port!=BL && led_port!=CL && led_port!=DL && led_port!=EL && led_port!=FL && led_port!=GL && led_port!=HL && led_port!=JL && led_port!=KL && led_port!=LL )
		{
			err=PORT_ERROR;
     d24:	62 e0       	ldi	r22, 0x02	; 2
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	08 95       	ret
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     d2e:	63 e0       	ldi	r22, 0x03	; 3
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	08 95       	ret
 *
 * @return Error code.
 */
uint32_t led_off(enum portl led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	cb 01       	movw	r24, r22
     d3e:	08 95       	ret
			}
			case GL:
			{
				if (led_pin>5)
				{
					err=PIN_ERROR;
     d40:	63 e0       	ldi	r22, 0x03	; 3
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}
	}while (0);
	return err;
}
     d48:	08 95       	ret

00000d4a <when_transmission_complete>:
    }
}

void when_transmission_complete(uint8_t uart_number)
{
	if(uart_number == g_uart_number)
     d4a:	81 11       	cpse	r24, r1
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <when_transmission_complete+0x1c>
	{		
		led_toggle(g_led_port, g_led_pin);
     d4e:	67 e0       	ldi	r22, 0x07	; 7
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0a df       	rcall	.-492    	; 0xb68 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	89 e6       	ldi	r24, 0x69	; 105
     d58:	98 e1       	ldi	r25, 0x18	; 24
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <when_transmission_complete+0x10>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <when_transmission_complete+0x1a>
     d64:	00 00       	nop
     d66:	08 95       	ret

00000d68 <when_byte_received>:
	}	
}

void when_byte_received(uint8_t uart_number, char data, bool parity_error)
{
	if ((uart_number == g_uart_number) && (data == 5) && (parity_error == false) )
     d68:	81 11       	cpse	r24, r1
     d6a:	34 c0       	rjmp	.+104    	; 0xdd4 <when_byte_received+0x6c>
     d6c:	65 30       	cpi	r22, 0x05	; 5
     d6e:	91 f5       	brne	.+100    	; 0xdd4 <when_byte_received+0x6c>
     d70:	41 11       	cpse	r20, r1
     d72:	30 c0       	rjmp	.+96     	; 0xdd4 <when_byte_received+0x6c>
	{
		led_toggle(g_led_port, g_led_pin);
     d74:	67 e0       	ldi	r22, 0x07	; 7
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	f7 de       	rcall	.-530    	; 0xb68 <led_toggle>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	89 e6       	ldi	r24, 0x69	; 105
     d7e:	98 e1       	ldi	r25, 0x18	; 24
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	80 40       	sbci	r24, 0x00	; 0
     d84:	90 40       	sbci	r25, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <when_byte_received+0x18>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <when_byte_received+0x22>
     d8a:	00 00       	nop
		_delay_ms(500);
		led_toggle(g_led_port, g_led_pin);
     d8c:	67 e0       	ldi	r22, 0x07	; 7
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	eb de       	rcall	.-554    	; 0xb68 <led_toggle>
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	89 e6       	ldi	r24, 0x69	; 105
     d96:	98 e1       	ldi	r25, 0x18	; 24
     d98:	21 50       	subi	r18, 0x01	; 1
     d9a:	80 40       	sbci	r24, 0x00	; 0
     d9c:	90 40       	sbci	r25, 0x00	; 0
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <when_byte_received+0x30>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <when_byte_received+0x3a>
     da2:	00 00       	nop
		_delay_ms(500);
		led_toggle(g_led_port, g_led_pin);
     da4:	67 e0       	ldi	r22, 0x07	; 7
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	df de       	rcall	.-578    	; 0xb68 <led_toggle>
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	89 e6       	ldi	r24, 0x69	; 105
     dae:	98 e1       	ldi	r25, 0x18	; 24
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	80 40       	sbci	r24, 0x00	; 0
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <when_byte_received+0x48>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <when_byte_received+0x52>
		_delay_ms(500);
		led_toggle(g_led_port, g_led_pin);
     dba:	00 00       	nop
     dbc:	67 e0       	ldi	r22, 0x07	; 7
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	d3 de       	rcall	.-602    	; 0xb68 <led_toggle>
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	89 e6       	ldi	r24, 0x69	; 105
     dc6:	98 e1       	ldi	r25, 0x18	; 24
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	80 40       	sbci	r24, 0x00	; 0
     dcc:	90 40       	sbci	r25, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <when_byte_received+0x60>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <when_byte_received+0x6a>
     dd2:	00 00       	nop
     dd4:	08 95       	ret

00000dd6 <on_button_pressed>:
		_delay_ms(500);
	}
}

void on_button_pressed(enum portx buttonPort, uint8_t buttonPin, bool buttonState)
{	
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <on_button_pressed+0x6>
     ddc:	1f 92       	push	r1
     dde:	1f 92       	push	r1
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer [buffer_length] = {3, 5, 6, 10, 24};
     de4:	95 e0       	ldi	r25, 0x05	; 5
     de6:	e0 e0       	ldi	r30, 0x00	; 0
     de8:	f2 e0       	ldi	r31, 0x02	; 2
     dea:	de 01       	movw	r26, r28
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	01 90       	ld	r0, Z+
     df0:	0d 92       	st	X+, r0
     df2:	9a 95       	dec	r25
     df4:	e1 f7       	brne	.-8      	; 0xdee <on_button_pressed+0x18>
	if( (buttonPort == g_btn_port) && (buttonPin == g_btn_pin) && (buttonState == 0) )
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	51 f4       	brne	.+20     	; 0xe0e <on_button_pressed+0x38>
     dfa:	61 11       	cpse	r22, r1
     dfc:	08 c0       	rjmp	.+16     	; 0xe0e <on_button_pressed+0x38>
     dfe:	41 11       	cpse	r20, r1
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <on_button_pressed+0x38>
	{
		hal_uart_send(g_uart_number, &buffer[0], buffer_length);
     e02:	45 e0       	ldi	r20, 0x05	; 5
     e04:	be 01       	movw	r22, r28
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	2c d1       	rcall	.+600    	; 0x1066 <hal_uart_send>
	}
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <main>:
void on_button_pressed(enum portx buttonPort, uint8_t buttonPin, bool buttonState);


int main(void)
{	
	btn_init (g_btn_port,g_btn_pin);
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	cb d9       	rcall	.-3178   	; 0x1ba <btn_init>
	btn_set_event_callback(on_button_pressed);
     e24:	8b ee       	ldi	r24, 0xEB	; 235
     e26:	96 e0       	ldi	r25, 0x06	; 6
     e28:	22 da       	rcall	.-3004   	; 0x26e <btn_set_event_callback>
	led_init (g_led_port, g_led_pin);
     e2a:	67 e0       	ldi	r22, 0x07	; 7
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	e3 dd       	rcall	.-1082   	; 0x9f6 <led_init>
	led_off (g_led_port, g_led_pin);
     e30:	67 e0       	ldi	r22, 0x07	; 7
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0c df       	rcall	.-488    	; 0xc4e <led_off>
     e36:	02 e0       	ldi	r16, 0x02	; 2
	hal_uart_init(g_uart_number, 9600, 8, NO_PARITY);
     e38:	28 e0       	ldi	r18, 0x08	; 8
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	55 e2       	ldi	r21, 0x25	; 37
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	60 d2       	rcall	.+1216   	; 0x1306 <hal_uart_init>
     e46:	65 ea       	ldi	r22, 0xA5	; 165
	hal_uart_set_callbacks(when_byte_received, when_transmission_complete );
     e48:	76 e0       	ldi	r23, 0x06	; 6
     e4a:	84 eb       	ldi	r24, 0xB4	; 180
     e4c:	96 e0       	ldi	r25, 0x06	; 6
     e4e:	01 d0       	rcall	.+2      	; 0xe52 <hal_uart_set_callbacks>
     e50:	ff cf       	rjmp	.-2      	; 0xe50 <main+0x32>

00000e52 <hal_uart_set_callbacks>:
uint32_t hal_uart_set_callbacks(on_byte_received obr, on_transmission_complete otc)
{	
	uint32_t err = 0;
	do 
	{
		if (obr == NULL || otc == NULL)
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	79 f0       	breq	.+30     	; 0xe74 <hal_uart_set_callbacks+0x22>
     e56:	61 15       	cp	r22, r1
     e58:	71 05       	cpc	r23, r1
     e5a:	89 f0       	breq	.+34     	; 0xe7e <hal_uart_set_callbacks+0x2c>
		{
			err=CALLBACK_MISSING;
			break;
		}
		g_on_byte_received = obr;
     e5c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <g_on_byte_received+0x1>
     e60:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <g_on_byte_received>
		g_on_transmission_complete = otc;
     e64:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <g_on_transmission_complete+0x1>
     e68:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <g_on_transmission_complete>
	return err;
}

uint32_t hal_uart_set_callbacks(on_byte_received obr, on_transmission_complete otc)
{	
	uint32_t err = 0;
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	cb 01       	movw	r24, r22
     e72:	08 95       	ret
	do 
	{
		if (obr == NULL || otc == NULL)
		{
			err=CALLBACK_MISSING;
     e74:	68 e0       	ldi	r22, 0x08	; 8
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	08 95       	ret
     e7e:	68 e0       	ldi	r22, 0x08	; 8
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
		g_on_byte_received = obr;
		g_on_transmission_complete = otc;
	}while (0);
		
	return err;
}
     e86:	08 95       	ret

00000e88 <map_uart_registers>:
uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
	do 
	{	
		if (uart_number > 3)
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <map_uart_registers+0x6>
     e8c:	aa c0       	rjmp	.+340    	; 0xfe2 <map_uart_registers+0x15a>
		{
			err = UNSUPPORTED_UART;
			break;
		}
		
		switch (uart_number){
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	81 f1       	breq	.+96     	; 0xef2 <map_uart_registers+0x6a>
     e92:	38 f0       	brcs	.+14     	; 0xea2 <map_uart_registers+0x1a>
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	09 f4       	brne	.+2      	; 0xe9a <map_uart_registers+0x12>
     e98:	54 c0       	rjmp	.+168    	; 0xf42 <map_uart_registers+0xba>
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	09 f4       	brne	.+2      	; 0xea0 <map_uart_registers+0x18>
     e9e:	79 c0       	rjmp	.+242    	; 0xf92 <map_uart_registers+0x10a>
     ea0:	a5 c0       	rjmp	.+330    	; 0xfec <map_uart_registers+0x164>
			case 0:
			{
				UCSRnA = &UCSR0A;
     ea2:	80 ec       	ldi	r24, 0xC0	; 192
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UCSRnA+0x1>
     eaa:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UCSRnA>
				UCSRnB = &UCSR0B;
     eae:	81 ec       	ldi	r24, 0xC1	; 193
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <UCSRnB+0x1>
     eb6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UCSRnB>
				UCSRnC = &UCSR0C;
     eba:	82 ec       	ldi	r24, 0xC2	; 194
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <UCSRnC+0x1>
     ec2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UCSRnC>
				UBRRnL = &UBRR0L;
     ec6:	84 ec       	ldi	r24, 0xC4	; 196
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <UBRRnL+0x1>
     ece:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <UBRRnL>
				UBRRnH = &UBRR0H;
     ed2:	85 ec       	ldi	r24, 0xC5	; 197
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UBRRnH+0x1>
     eda:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <UBRRnH>
				UDRn = &UDR0;
     ede:	86 ec       	ldi	r24, 0xC6	; 198
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <UDRn+0x1>
     ee6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <UDRn>
}


uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR0B;
				UCSRnC = &UCSR0C;
				UBRRnL = &UBRR0L;
				UBRRnH = &UBRR0H;
				UDRn = &UDR0;
				break;
     ef0:	08 95       	ret
			}
			case 1:
			{
				UCSRnA = &UCSR1A;
     ef2:	88 ec       	ldi	r24, 0xC8	; 200
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UCSRnA+0x1>
     efa:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UCSRnA>
				UCSRnB = &UCSR1B;
     efe:	89 ec       	ldi	r24, 0xC9	; 201
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <UCSRnB+0x1>
     f06:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UCSRnB>
				UCSRnC = &UCSR1C;
     f0a:	8a ec       	ldi	r24, 0xCA	; 202
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <UCSRnC+0x1>
     f12:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UCSRnC>
				UBRRnL = &UBRR1L;
     f16:	8c ec       	ldi	r24, 0xCC	; 204
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <UBRRnL+0x1>
     f1e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <UBRRnL>
				UBRRnH = &UBRR1H;
     f22:	8d ec       	ldi	r24, 0xCD	; 205
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UBRRnH+0x1>
     f2a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <UBRRnH>
				UDRn = &UDR1;
     f2e:	8e ec       	ldi	r24, 0xCE	; 206
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <UDRn+0x1>
     f36:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <UDRn>
}


uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR1B;
				UCSRnC = &UCSR1C;
				UBRRnL = &UBRR1L;
				UBRRnH = &UBRR1H;
				UDRn = &UDR1;
				break;
     f40:	08 95       	ret
			}
			case 2:
			{
				UCSRnA = &UCSR2A;
     f42:	80 ed       	ldi	r24, 0xD0	; 208
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UCSRnA+0x1>
     f4a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UCSRnA>
				UCSRnB = &UCSR2B;
     f4e:	81 ed       	ldi	r24, 0xD1	; 209
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <UCSRnB+0x1>
     f56:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UCSRnB>
				UCSRnC = &UCSR2C;
     f5a:	82 ed       	ldi	r24, 0xD2	; 210
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <UCSRnC+0x1>
     f62:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UCSRnC>
				UBRRnL = &UBRR2L;
     f66:	84 ed       	ldi	r24, 0xD4	; 212
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <UBRRnL+0x1>
     f6e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <UBRRnL>
				UBRRnH = &UBRR2H;
     f72:	85 ed       	ldi	r24, 0xD5	; 213
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UBRRnH+0x1>
     f7a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <UBRRnH>
				UDRn = &UDR2;
     f7e:	86 ed       	ldi	r24, 0xD6	; 214
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <UDRn+0x1>
     f86:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <UDRn>
}


uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR2B;
				UCSRnC = &UCSR2C;
				UBRRnL = &UBRR2L;
				UBRRnH = &UBRR2H;
				UDRn = &UDR2;
				break;
     f90:	08 95       	ret
			}
			case 3:
			{
				UCSRnA = &UCSR3A;
     f92:	80 e3       	ldi	r24, 0x30	; 48
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UCSRnA+0x1>
     f9a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UCSRnA>
				UCSRnB = &UCSR3B;
     f9e:	81 e3       	ldi	r24, 0x31	; 49
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <UCSRnB+0x1>
     fa6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UCSRnB>
				UCSRnC = &UCSR3C;
     faa:	82 e3       	ldi	r24, 0x32	; 50
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <UCSRnC+0x1>
     fb2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <UCSRnC>
				UBRRnL = &UBRR3L;
     fb6:	84 e3       	ldi	r24, 0x34	; 52
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <UBRRnL+0x1>
     fbe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <UBRRnL>
				UBRRnH = &UBRR3H;
     fc2:	85 e3       	ldi	r24, 0x35	; 53
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <UBRRnH+0x1>
     fca:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <UBRRnH>
				UDRn = &UDR3;
     fce:	86 e3       	ldi	r24, 0x36	; 54
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <UDRn+0x1>
     fd6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <UDRn>
}


uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR3B;
				UCSRnC = &UCSR3C;
				UBRRnL = &UBRR3L;
				UBRRnH = &UBRR3H;
				UDRn = &UDR3;
				break;
     fe0:	08 95       	ret
	uint32_t err = 0;
	do 
	{	
		if (uart_number > 3)
		{
			err = UNSUPPORTED_UART;
     fe2:	65 e0       	ldi	r22, 0x05	; 5
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	08 95       	ret
}


uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = 0;
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	cb 01       	movw	r24, r22
			}
		}
	} while (0);
		
	return err;
}
     ff2:	08 95       	ret

00000ff4 <on_trasmit_buffer_empty>:
}

void on_trasmit_buffer_empty (uint8_t uart_number)
{	
	
	map_uart_registers(uart_number);
     ff4:	49 df       	rcall	.-366    	; 0xe88 <map_uart_registers>
	if (g_tx_buff_idx < g_bytes_to_be_tx  && g_tx_busy)
     ff6:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <g_tx_buff_idx>
     ffa:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <g_bytes_to_be_tx>
     ffe:	98 17       	cp	r25, r24
    1000:	20 f5       	brcc	.+72     	; 0x104a <on_trasmit_buffer_empty+0x56>
    1002:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <g_tx_busy>
    1006:	88 23       	and	r24, r24
    1008:	69 f1       	breq	.+90     	; 0x1064 <on_trasmit_buffer_empty+0x70>
	{	
		cli();
    100a:	f8 94       	cli
		if ( (*UCSRnA) & (1<<UDREn))
    100c:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UCSRnA>
    1010:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UCSRnA+0x1>
    1014:	80 81       	ld	r24, Z
    1016:	85 ff       	sbrs	r24, 5
    1018:	16 c0       	rjmp	.+44     	; 0x1046 <on_trasmit_buffer_empty+0x52>
		{
			*UDRn = g_internal_tx_buff[g_tx_buff_idx++];
    101a:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <UDRn>
    101e:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <UDRn+0x1>
    1022:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <g_tx_buff_idx>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	8e 0f       	add	r24, r30
    102a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <g_tx_buff_idx>
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	e3 5e       	subi	r30, 0xE3	; 227
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	80 81       	ld	r24, Z
    1036:	8c 93       	st	X, r24
			(*UCSRnA) &= ~(1<<UDREn);
    1038:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UCSRnA>
    103c:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UCSRnA+0x1>
    1040:	80 81       	ld	r24, Z
    1042:	8f 7d       	andi	r24, 0xDF	; 223
    1044:	80 83       	st	Z, r24
		}
		sei();
    1046:	78 94       	sei
    1048:	08 95       	ret
	}
	else if (g_tx_buff_idx == g_bytes_to_be_tx  && g_tx_busy)
    104a:	98 13       	cpse	r25, r24
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <on_trasmit_buffer_empty+0x70>
    104e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <g_tx_busy>
    1052:	88 23       	and	r24, r24
    1054:	39 f0       	breq	.+14     	; 0x1064 <on_trasmit_buffer_empty+0x70>
	{
		(*UCSRnB) &= ~(1<<UDRIEn); //disable Tx buffer empty interrupt
    1056:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    105a:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    105e:	80 81       	ld	r24, Z
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	80 83       	st	Z, r24
    1064:	08 95       	ret

00001066 <hal_uart_send>:
		
	return err;
}

uint32_t hal_uart_send(uint8_t uart_number, uint8_t *tx_buffer, uint8_t length)
{	
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
	uint32_t err = 0;
	do 
	{	
		if(length == 0)
    106e:	44 23       	and	r20, r20
    1070:	41 f1       	breq	.+80     	; 0x10c2 <hal_uart_send+0x5c>
		{
			break;
		}		
		if(g_tx_busy)
    1072:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <g_tx_busy>
    1076:	91 11       	cpse	r25, r1
    1078:	28 c0       	rjmp	.+80     	; 0x10ca <hal_uart_send+0x64>
    107a:	c4 2f       	mov	r28, r20
    107c:	8b 01       	movw	r16, r22
    107e:	d8 2f       	mov	r29, r24
		{
			err = UART_ERROR_TX_BUSY;
			break;
		}
		if (map_uart_registers(uart_number))
    1080:	03 df       	rcall	.-506    	; 0xe88 <map_uart_registers>
    1082:	67 2b       	or	r22, r23
    1084:	68 2b       	or	r22, r24
    1086:	69 2b       	or	r22, r25
    1088:	29 f5       	brne	.+74     	; 0x10d4 <hal_uart_send+0x6e>
		{
			err = UNSUPPORTED_UART;
			break;
		}
		if (INT_TX_BUFF_LEN < length)
    108a:	c5 31       	cpi	r28, 0x15	; 21
    108c:	40 f5       	brcc	.+80     	; 0x10de <hal_uart_send+0x78>
		{
			err = TX_ARRAY_ERROR;
			break;
		}
		g_tx_busy = true;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <g_tx_busy>
		memcpy(g_internal_tx_buff, tx_buffer, length);
    1094:	4c 2f       	mov	r20, r28
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	b8 01       	movw	r22, r16
    109a:	8d e1       	ldi	r24, 0x1D	; 29
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	d9 d3       	rcall	.+1970   	; 0x1852 <memcpy>
		g_bytes_to_be_tx = length;
    10a0:	c0 93 1c 02 	sts	0x021C, r28	; 0x80021c <g_bytes_to_be_tx>
		g_tx_buff_idx = 0;
    10a4:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <g_tx_buff_idx>
		on_trasmit_buffer_empty (uart_number);
    10a8:	8d 2f       	mov	r24, r29
    10aa:	a4 df       	rcall	.-184    	; 0xff4 <on_trasmit_buffer_empty>
		(*UCSRnB) |= (1<<UDRIEn); //disable Tx buffer empty interrupt
    10ac:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    10b0:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    10b4:	80 81       	ld	r24, Z
    10b6:	80 62       	ori	r24, 0x20	; 32
    10b8:	80 83       	st	Z, r24
	return err;
}

uint32_t hal_uart_send(uint8_t uart_number, uint8_t *tx_buffer, uint8_t length)
{	
	uint32_t err = 0;
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	cb 01       	movw	r24, r22
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <hal_uart_send+0x80>
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	cb 01       	movw	r24, r22
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <hal_uart_send+0x80>
		{
			break;
		}		
		if(g_tx_busy)
		{
			err = UART_ERROR_TX_BUSY;
    10ca:	69 e0       	ldi	r22, 0x09	; 9
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <hal_uart_send+0x80>
			break;
		}
		if (map_uart_registers(uart_number))
		{
			err = UNSUPPORTED_UART;
    10d4:	65 e0       	ldi	r22, 0x05	; 5
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <hal_uart_send+0x80>
			break;
		}
		if (INT_TX_BUFF_LEN < length)
		{
			err = TX_ARRAY_ERROR;
    10de:	6a e0       	ldi	r22, 0x0A	; 10
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
		on_trasmit_buffer_empty (uart_number);
		(*UCSRnB) |= (1<<UDRIEn); //disable Tx buffer empty interrupt
	} while (0);
	
	return err;
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <set_baudrate_registers>:
	uint32_t err = 0;
	uint16_t regValue = 0;
	
	do
	{	
		if (baudrate != 2400 && baudrate != 4800 && baudrate != 9600 && baudrate != 19200)
    10f0:	60 36       	cpi	r22, 0x60	; 96
    10f2:	29 e0       	ldi	r18, 0x09	; 9
    10f4:	72 07       	cpc	r23, r18
    10f6:	81 05       	cpc	r24, r1
    10f8:	91 05       	cpc	r25, r1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <set_baudrate_registers+0x34>
    10fc:	60 3c       	cpi	r22, 0xC0	; 192
    10fe:	22 e1       	ldi	r18, 0x12	; 18
    1100:	72 07       	cpc	r23, r18
    1102:	81 05       	cpc	r24, r1
    1104:	91 05       	cpc	r25, r1
    1106:	89 f0       	breq	.+34     	; 0x112a <set_baudrate_registers+0x3a>
    1108:	60 38       	cpi	r22, 0x80	; 128
    110a:	25 e2       	ldi	r18, 0x25	; 37
    110c:	72 07       	cpc	r23, r18
    110e:	81 05       	cpc	r24, r1
    1110:	91 05       	cpc	r25, r1
    1112:	71 f0       	breq	.+28     	; 0x1130 <set_baudrate_registers+0x40>
    1114:	61 15       	cp	r22, r1
    1116:	7b 44       	sbci	r23, 0x4B	; 75
    1118:	81 05       	cpc	r24, r1
    111a:	91 05       	cpc	r25, r1
    111c:	d9 f4       	brne	.+54     	; 0x1154 <set_baudrate_registers+0x64>
				regValue = 103;
				break;
			}
			case 19200	:
			{
				regValue = 51;
    111e:	83 e3       	ldi	r24, 0x33	; 51
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <set_baudrate_registers+0x44>
		
		//considering 16MHz clock rate
		switch (baudrate){
			case 2400   :
			{
				regValue = 416;
    1124:	80 ea       	ldi	r24, 0xA0	; 160
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <set_baudrate_registers+0x44>
				break;
			}
			case 4800   :
			{
				regValue = 207;
    112a:	8f ec       	ldi	r24, 0xCF	; 207
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <set_baudrate_registers+0x44>
				break;
			}
			case 9600   :
			{
				regValue = 103;
    1130:	87 e6       	ldi	r24, 0x67	; 103
    1132:	90 e0       	ldi	r25, 0x00	; 0
				regValue = 103;
				break;  // baudrate = 9600
			}
		}
		
		*UBRRnL = (regValue & 0x00FF);   // set the upper 8 bits
    1134:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <UBRRnL>
    1138:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <UBRRnL+0x1>
    113c:	80 83       	st	Z, r24
		*UBRRnH = ((regValue & 0x0F00)>>8); // set the lower 8 bits
    113e:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <UBRRnH>
    1142:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <UBRRnH+0x1>
    1146:	88 27       	eor	r24, r24
    1148:	9f 70       	andi	r25, 0x0F	; 15
    114a:	90 83       	st	Z, r25
	return err;
}

uint32_t set_baudrate_registers(uint32_t baudrate)
{	
	uint32_t err = 0;
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	cb 01       	movw	r24, r22
    1152:	08 95       	ret
	
	do
	{	
		if (baudrate != 2400 && baudrate != 4800 && baudrate != 9600 && baudrate != 19200)
		{
			err = UNSUPPORTED_BAUDRATE;
    1154:	66 e0       	ldi	r22, 0x06	; 6
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
		*UBRRnL = (regValue & 0x00FF);   // set the upper 8 bits
		*UBRRnH = ((regValue & 0x0F00)>>8); // set the lower 8 bits
	}while(0);
	
	return err;
}
    115c:	08 95       	ret

0000115e <set_frame_size>:
uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
	do
	{	
		if (frame_size > 8 || frame_size < 5)
    115e:	9b ef       	ldi	r25, 0xFB	; 251
    1160:	98 0f       	add	r25, r24
    1162:	94 30       	cpi	r25, 0x04	; 4
    1164:	08 f0       	brcs	.+2      	; 0x1168 <set_frame_size+0xa>
    1166:	89 c0       	rjmp	.+274    	; 0x127a <set_frame_size+0x11c>
		{
			err = UNSUPPORTED_FRAME_SIZE;
			break;
		}
		switch (frame_size){
    1168:	86 30       	cpi	r24, 0x06	; 6
    116a:	19 f1       	breq	.+70     	; 0x11b2 <set_frame_size+0x54>
    116c:	18 f4       	brcc	.+6      	; 0x1174 <set_frame_size+0x16>
    116e:	85 30       	cpi	r24, 0x05	; 5
    1170:	39 f0       	breq	.+14     	; 0x1180 <set_frame_size+0x22>
    1172:	6a c0       	rjmp	.+212    	; 0x1248 <set_frame_size+0xea>
    1174:	87 30       	cpi	r24, 0x07	; 7
    1176:	b1 f1       	breq	.+108    	; 0x11e4 <set_frame_size+0x86>
    1178:	88 30       	cpi	r24, 0x08	; 8
    117a:	09 f4       	brne	.+2      	; 0x117e <set_frame_size+0x20>
    117c:	4c c0       	rjmp	.+152    	; 0x1216 <set_frame_size+0xb8>
    117e:	64 c0       	rjmp	.+200    	; 0x1248 <set_frame_size+0xea>
			case 5 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    1180:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    1184:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    1188:	80 81       	ld	r24, Z
    118a:	8b 7f       	andi	r24, 0xFB	; 251
    118c:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn1);
    118e:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1192:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    1196:	80 81       	ld	r24, Z
    1198:	8b 7f       	andi	r24, 0xFB	; 251
    119a:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn0);
    119c:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    11a0:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    11a4:	80 81       	ld	r24, Z
    11a6:	8d 7f       	andi	r24, 0xFD	; 253
    11a8:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	cb 01       	movw	r24, r22
			case 5 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) &= ~(1<<UCSZn1);
				(*UCSRnC) &= ~(1<<UCSZn0);
				break;
    11b0:	08 95       	ret
			}
			case 6 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    11b2:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    11b6:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    11ba:	80 81       	ld	r24, Z
    11bc:	8b 7f       	andi	r24, 0xFB	; 251
    11be:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn1);
    11c0:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    11c4:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    11c8:	80 81       	ld	r24, Z
    11ca:	8b 7f       	andi	r24, 0xFB	; 251
    11cc:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    11ce:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    11d2:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	cb 01       	movw	r24, r22
			case 6 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) &= ~(1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break;
    11e2:	08 95       	ret
			}
			case 7 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    11e4:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    11e8:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    11ec:	80 81       	ld	r24, Z
    11ee:	8b 7f       	andi	r24, 0xFB	; 251
    11f0:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    11f2:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    11f6:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    11fa:	80 81       	ld	r24, Z
    11fc:	84 60       	ori	r24, 0x04	; 4
    11fe:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn0);
    1200:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1204:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    1208:	80 81       	ld	r24, Z
    120a:	8d 7f       	andi	r24, 0xFD	; 253
    120c:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	cb 01       	movw	r24, r22
			case 7 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) &= ~(1<<UCSZn0);
				break;
    1214:	08 95       	ret
			}
			case 8 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    1216:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    121a:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    121e:	80 81       	ld	r24, Z
    1220:	8b 7f       	andi	r24, 0xFB	; 251
    1222:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    1224:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1228:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    122c:	80 81       	ld	r24, Z
    122e:	84 60       	ori	r24, 0x04	; 4
    1230:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    1232:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1236:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    123a:	80 81       	ld	r24, Z
    123c:	82 60       	ori	r24, 0x02	; 2
    123e:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	cb 01       	movw	r24, r22
			case 8 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break;
    1246:	08 95       	ret
			}
			default:
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    1248:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
    124c:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    1250:	80 81       	ld	r24, Z
    1252:	8b 7f       	andi	r24, 0xFB	; 251
    1254:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    1256:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    125a:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    125e:	80 81       	ld	r24, Z
    1260:	84 60       	ori	r24, 0x04	; 4
    1262:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    1264:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1268:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    126c:	80 81       	ld	r24, Z
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = 0;
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	cb 01       	movw	r24, r22
			default:
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break; // default is 8 bit version
    1278:	08 95       	ret
	uint32_t err = 0;
	do
	{	
		if (frame_size > 8 || frame_size < 5)
		{
			err = UNSUPPORTED_FRAME_SIZE;
    127a:	67 e0       	ldi	r22, 0x07	; 7
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	} while (0);
	
	return err;
}
    1282:	08 95       	ret

00001284 <set_parity_register_values>:

void set_parity_register_values(uint8_t parity_type)
{
	switch (parity_type){
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	09 f1       	breq	.+66     	; 0x12ca <set_parity_register_values+0x46>
    1288:	88 f0       	brcs	.+34     	; 0x12ac <set_parity_register_values+0x28>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	69 f5       	brne	.+90     	; 0x12e8 <set_parity_register_values+0x64>
		case (NO_PARITY): 
		{
			(*UCSRnC) &= ~(1<<UPMn1);	 
    128e:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    1292:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    1296:	80 81       	ld	r24, Z
    1298:	8f 7d       	andi	r24, 0xDF	; 223
    129a:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    129c:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12a0:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	80 83       	st	Z, r24
			break;
    12aa:	08 95       	ret
		}
		case (EVEN)		: 
		{
			(*UCSRnC) |=  (1<<UPMn1);	 
    12ac:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12b0:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12b4:	80 81       	ld	r24, Z
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    12ba:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12be:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 7e       	andi	r24, 0xEF	; 239
    12c6:	80 83       	st	Z, r24
			break;
    12c8:	08 95       	ret
		}
		case (ODD)		: 
		{
			(*UCSRnC) |=  (1<<UPMn1);  
    12ca:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12ce:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12d2:	80 81       	ld	r24, Z
    12d4:	80 62       	ori	r24, 0x20	; 32
    12d6:	80 83       	st	Z, r24
			(*UCSRnC) |=  (1<<UPMn0);	
    12d8:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12dc:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12e0:	80 81       	ld	r24, Z
    12e2:	80 61       	ori	r24, 0x10	; 16
    12e4:	80 83       	st	Z, r24
			break;
    12e6:	08 95       	ret
		}
		default			: 
		{
			(*UCSRnC) &= ~(1<<UPMn1);	 
    12e8:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12ec:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7d       	andi	r24, 0xDF	; 223
    12f4:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    12f6:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
    12fa:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    12fe:	80 81       	ld	r24, Z
    1300:	8f 7e       	andi	r24, 0xEF	; 239
    1302:	80 83       	st	Z, r24
    1304:	08 95       	ret

00001306 <hal_uart_init>:
uint32_t set_frame_size(uint8_t frame_size);
void set_parity_register_values(uint8_t parity_type);
void on_trasmit_buffer_empty (uint8_t uart_number);

uint32_t hal_uart_init(uint8_t uart_number, uint32_t baudrate, uint8_t frame_size, uint8_t parity_type)
{	
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	cf 93       	push	r28
    1312:	6a 01       	movw	r12, r20
    1314:	7b 01       	movw	r14, r22
    1316:	c2 2f       	mov	r28, r18
	uint32_t err = 0;
	do 
	{
		sei();  // to enable global interrupts
    1318:	78 94       	sei
		
		if (map_uart_registers(uart_number))  //choose correct register set for the given UART number
    131a:	b6 dd       	rcall	.-1172   	; 0xe88 <map_uart_registers>
    131c:	67 2b       	or	r22, r23
    131e:	68 2b       	or	r22, r24
    1320:	69 2b       	or	r22, r25
    1322:	09 f0       	breq	.+2      	; 0x1326 <hal_uart_init+0x20>
    1324:	4d c0       	rjmp	.+154    	; 0x13c0 <hal_uart_init+0xba>
		{
			err=UNSUPPORTED_UART;
			break;
		}
		
		if (set_baudrate_registers(baudrate))  // to fill the UBRRn register according to the given baudrate
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	e2 de       	rcall	.-572    	; 0x10f0 <set_baudrate_registers>
    132c:	67 2b       	or	r22, r23
    132e:	68 2b       	or	r22, r24
    1330:	69 2b       	or	r22, r25
    1332:	09 f0       	breq	.+2      	; 0x1336 <hal_uart_init+0x30>
    1334:	4a c0       	rjmp	.+148    	; 0x13ca <hal_uart_init+0xc4>
		{
			err=UNSUPPORTED_BAUDRATE;
			break;
		}
		
		if (set_frame_size(frame_size)) // set register values belongs to frame size configuration
    1336:	8c 2f       	mov	r24, r28
    1338:	12 df       	rcall	.-476    	; 0x115e <set_frame_size>
    133a:	67 2b       	or	r22, r23
    133c:	68 2b       	or	r22, r24
    133e:	69 2b       	or	r22, r25
    1340:	09 f0       	breq	.+2      	; 0x1344 <hal_uart_init+0x3e>
    1342:	48 c0       	rjmp	.+144    	; 0x13d4 <hal_uart_init+0xce>
		{
			err=UNSUPPORTED_FRAME_SIZE;
			break;
		}
		
		set_parity_register_values(parity_type);
    1344:	80 2f       	mov	r24, r16
    1346:	9e df       	rcall	.-196    	; 0x1284 <set_parity_register_values>
    1348:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
		
		(*UCSRnC) &= ~(1<<UMSELn1) & ~(1<<UMSELn0); // set mode to asynchronous UART
    134c:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    1350:	80 81       	ld	r24, Z
    1352:	8f 73       	andi	r24, 0x3F	; 63
    1354:	80 83       	st	Z, r24
    1356:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
		(*UCSRnC) &= ~(1<<USBSn); // to use only 1 stop bit
    135a:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    135e:	80 81       	ld	r24, Z
    1360:	87 7f       	andi	r24, 0xF7	; 247
    1362:	80 83       	st	Z, r24
    1364:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <UCSRnC>
		(*UCSRnC) &= ~(1<<UCPOLn); //don't use clock parity as asynchronous mode is used
    1368:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <UCSRnC+0x1>
    136c:	80 81       	ld	r24, Z
    136e:	8e 7f       	andi	r24, 0xFE	; 254
    1370:	80 83       	st	Z, r24
    1372:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UCSRnA>
		
		(*UCSRnA) |= (1<<TXCn);  // to clear the flag should give 1
    1376:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UCSRnA+0x1>
    137a:	80 81       	ld	r24, Z
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	80 83       	st	Z, r24
    1380:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <UCSRnA>
		(*UCSRnA) &= ~(1<<FEn) & ~(1<<DORn) & ~(1<<UPEn) & ~(1<<U2Xn) & ~(1<<MPCMn);
    1384:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <UCSRnA+0x1>
    1388:	80 81       	ld	r24, Z
    138a:	80 7e       	andi	r24, 0xE0	; 224
    138c:	80 83       	st	Z, r24
    138e:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
		
		(*UCSRnB) |= (1<<RXCIEn) | (1<<TXCIEn); //enable Rx complete and Tx complete interrupts
    1392:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    1396:	80 81       	ld	r24, Z
    1398:	80 6c       	ori	r24, 0xC0	; 192
    139a:	80 83       	st	Z, r24
    139c:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
		(*UCSRnB) &= ~(1<<UDRIEn); //disable Tx buffer empty interrupt
    13a0:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	80 83       	st	Z, r24
    13aa:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UCSRnB>
		(*UCSRnB) |= (1<<RXENn) | (1<<TXENn); // enable UART transmitter and receiver
    13ae:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <UCSRnB+0x1>
    13b2:	80 81       	ld	r24, Z
    13b4:	88 61       	ori	r24, 0x18	; 24
    13b6:	80 83       	st	Z, r24
    13b8:	60 e0       	ldi	r22, 0x00	; 0
void set_parity_register_values(uint8_t parity_type);
void on_trasmit_buffer_empty (uint8_t uart_number);

uint32_t hal_uart_init(uint8_t uart_number, uint32_t baudrate, uint8_t frame_size, uint8_t parity_type)
{	
	uint32_t err = 0;
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	cb 01       	movw	r24, r22
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <hal_uart_init+0xd6>
    13c0:	65 e0       	ldi	r22, 0x05	; 5
	{
		sei();  // to enable global interrupts
		
		if (map_uart_registers(uart_number))  //choose correct register set for the given UART number
		{
			err=UNSUPPORTED_UART;
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <hal_uart_init+0xd6>
    13ca:	66 e0       	ldi	r22, 0x06	; 6
			break;
		}
		
		if (set_baudrate_registers(baudrate))  // to fill the UBRRn register according to the given baudrate
		{
			err=UNSUPPORTED_BAUDRATE;
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <hal_uart_init+0xd6>
    13d4:	67 e0       	ldi	r22, 0x07	; 7
			break;
		}
		
		if (set_frame_size(frame_size)) // set register values belongs to frame size configuration
		{
			err=UNSUPPORTED_FRAME_SIZE;
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	cf 91       	pop	r28
		(*UCSRnB) |= (1<<RXENn) | (1<<TXENn); // enable UART transmitter and receiver
		
	} while (0);
		
	return err;
}
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	08 95       	ret

000013ea <__vector_25>:
    13ea:	1f 92       	push	r1
	}
}

////////////////////////////received complete interrupt callings/////////////
ISR(USART0_RX_vect)
{
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	0b b6       	in	r0, 0x3b	; 59
    13f6:	0f 92       	push	r0
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
	bool parity_error = (UCSR0A & (1<<UPE0))>>UPE0;
    1410:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	g_on_byte_received(0, UDR0, parity_error);
    1414:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	82 ff       	sbrs	r24, 2
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <g_on_byte_received>
    1422:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <g_on_byte_received+0x1>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	19 95       	eicall
}
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0b be       	out	0x3b, r0	; 59
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_36>:

ISR(USART1_RX_vect)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	0b b6       	in	r0, 0x3b	; 59
    145c:	0f 92       	push	r0
    145e:	2f 93       	push	r18
    1460:	3f 93       	push	r19
    1462:	4f 93       	push	r20
    1464:	5f 93       	push	r21
    1466:	6f 93       	push	r22
    1468:	7f 93       	push	r23
    146a:	8f 93       	push	r24
    146c:	9f 93       	push	r25
    146e:	af 93       	push	r26
    1470:	bf 93       	push	r27
    1472:	ef 93       	push	r30
    1474:	ff 93       	push	r31
	bool parity_error = (UCSR1A & (1<<UPE1))>>UPE1;
    1476:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
	g_on_byte_received(1, UDR1, parity_error);
    147a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	82 ff       	sbrs	r24, 2
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <g_on_byte_received>
    1488:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <g_on_byte_received+0x1>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	19 95       	eicall
}
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0b be       	out	0x3b, r0	; 59
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	0f 90       	pop	r0
    14b2:	1f 90       	pop	r1
    14b4:	18 95       	reti

000014b6 <__vector_51>:

ISR(USART2_RX_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	0b b6       	in	r0, 0x3b	; 59
    14c2:	0f 92       	push	r0
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
    14da:	ff 93       	push	r31
	bool parity_error = (UCSR2A & (1<<UPE2))>>UPE2;
    14dc:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	g_on_byte_received(2, UDR2, parity_error);
    14e0:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	82 ff       	sbrs	r24, 2
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <g_on_byte_received>
    14ee:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <g_on_byte_received+0x1>
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	19 95       	eicall
}
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0b be       	out	0x3b, r0	; 59
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_54>:

ISR(USART3_RX_vect)
{
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	0b b6       	in	r0, 0x3b	; 59
    1528:	0f 92       	push	r0
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	ef 93       	push	r30
    1540:	ff 93       	push	r31
	bool parity_error = (UCSR3A & (1<<UPE3))>>UPE3;
    1542:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	g_on_byte_received(3, UDR3, parity_error);
    1546:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	82 ff       	sbrs	r24, 2
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <g_on_byte_received>
    1554:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <g_on_byte_received+0x1>
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	19 95       	eicall
}
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0b be       	out	0x3b, r0	; 59
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_27>:

/////////////////////////transmission complete interrupt callings //////////////
ISR(USART0_TX_vect)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	0b b6       	in	r0, 0x3b	; 59
    158e:	0f 92       	push	r0
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
	g_tx_buff_idx=0;
    15a8:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <g_tx_buff_idx>
	g_tx_busy=false;
    15ac:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <g_tx_busy>
	g_on_transmission_complete(0);
    15b0:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <g_on_transmission_complete>
    15b4:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <g_on_transmission_complete+0x1>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	19 95       	eicall
}
    15bc:	ff 91       	pop	r31
    15be:	ef 91       	pop	r30
    15c0:	bf 91       	pop	r27
    15c2:	af 91       	pop	r26
    15c4:	9f 91       	pop	r25
    15c6:	8f 91       	pop	r24
    15c8:	7f 91       	pop	r23
    15ca:	6f 91       	pop	r22
    15cc:	5f 91       	pop	r21
    15ce:	4f 91       	pop	r20
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0b be       	out	0x3b, r0	; 59
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	0f 90       	pop	r0
    15de:	1f 90       	pop	r1
    15e0:	18 95       	reti

000015e2 <__vector_38>:

ISR(USART1_TX_vect)
{
    15e2:	1f 92       	push	r1
    15e4:	0f 92       	push	r0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	0f 92       	push	r0
    15ea:	11 24       	eor	r1, r1
    15ec:	0b b6       	in	r0, 0x3b	; 59
    15ee:	0f 92       	push	r0
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
	g_tx_buff_idx=0;
    1608:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <g_tx_buff_idx>
	g_tx_busy=false;
    160c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <g_tx_busy>
	g_on_transmission_complete(1);
    1610:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <g_on_transmission_complete>
    1614:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <g_on_transmission_complete+0x1>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	19 95       	eicall
}
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_53>:

ISR(USART2_TX_vect)
{	
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	0b b6       	in	r0, 0x3b	; 59
    164e:	0f 92       	push	r0
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
	g_tx_buff_idx=0;
    1668:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <g_tx_buff_idx>
	g_tx_busy=false;
    166c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <g_tx_busy>
	g_on_transmission_complete(2);
    1670:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <g_on_transmission_complete>
    1674:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <g_on_transmission_complete+0x1>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	19 95       	eicall
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0b be       	out	0x3b, r0	; 59
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <__vector_56>:

ISR(USART3_TX_vect)
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	0b b6       	in	r0, 0x3b	; 59
    16ae:	0f 92       	push	r0
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
	g_tx_buff_idx=0;
    16c8:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <g_tx_buff_idx>
	g_tx_busy=false;
    16cc:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <g_tx_busy>
	g_on_transmission_complete(3);
    16d0:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <g_on_transmission_complete>
    16d4:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <g_on_transmission_complete+0x1>
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	19 95       	eicall
}
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0b be       	out	0x3b, r0	; 59
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <__vector_26>:


/////////////////////////transmit buffer empty interrupt callings //////////////
ISR(USART0_UDRE_vect)
{
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	0b b6       	in	r0, 0x3b	; 59
    170e:	0f 92       	push	r0
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
	on_trasmit_buffer_empty (0);
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	64 dc       	rcall	.-1848   	; 0xff4 <on_trasmit_buffer_empty>
}
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0b be       	out	0x3b, r0	; 59
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_37>:

ISR(USART1_UDRE_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	0b b6       	in	r0, 0x3b	; 59
    175e:	0f 92       	push	r0
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
	on_trasmit_buffer_empty (1);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	3c dc       	rcall	.-1928   	; 0xff4 <on_trasmit_buffer_empty>
}
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0b be       	out	0x3b, r0	; 59
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	0b b6       	in	r0, 0x3b	; 59
    17ae:	0f 92       	push	r0
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
	on_trasmit_buffer_empty (2);
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	14 dc       	rcall	.-2008   	; 0xff4 <on_trasmit_buffer_empty>
}
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0b be       	out	0x3b, r0	; 59
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	0b b6       	in	r0, 0x3b	; 59
    17fe:	0f 92       	push	r0
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
	on_trasmit_buffer_empty (3);
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	ec db       	rcall	.-2088   	; 0xff4 <on_trasmit_buffer_empty>
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	7f 91       	pop	r23
    182a:	6f 91       	pop	r22
    182c:	5f 91       	pop	r21
    182e:	4f 91       	pop	r20
    1830:	3f 91       	pop	r19
    1832:	2f 91       	pop	r18
    1834:	0f 90       	pop	r0
    1836:	0b be       	out	0x3b, r0	; 59
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__tablejump2__>:
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	88 1f       	adc	r24, r24
    1848:	8b bf       	out	0x3b, r24	; 59
    184a:	07 90       	elpm	r0, Z+
    184c:	f6 91       	elpm	r31, Z
    184e:	e0 2d       	mov	r30, r0
    1850:	19 94       	eijmp

00001852 <memcpy>:
    1852:	fb 01       	movw	r30, r22
    1854:	dc 01       	movw	r26, r24
    1856:	02 c0       	rjmp	.+4      	; 0x185c <memcpy+0xa>
    1858:	01 90       	ld	r0, Z+
    185a:	0d 92       	st	X+, r0
    185c:	41 50       	subi	r20, 0x01	; 1
    185e:	50 40       	sbci	r21, 0x00	; 0
    1860:	d8 f7       	brcc	.-10     	; 0x1858 <memcpy+0x6>
    1862:	08 95       	ret

00001864 <_exit>:
    1864:	f8 94       	cli

00001866 <__stop_program>:
    1866:	ff cf       	rjmp	.-2      	; 0x1866 <__stop_program>

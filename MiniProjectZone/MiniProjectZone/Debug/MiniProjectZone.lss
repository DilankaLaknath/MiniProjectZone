
MiniProjectZone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00001c2a  00001cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  00800206  00800206  00001cc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cb5  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014bf  00000000  00000000  00004c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001971  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a1c  00000000  00000000  00007a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f7b  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029b7  00000000  00000000  000093db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000bd92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c0       	rjmp	.+264    	; 0x10a <__ctors_end>
       2:	00 00       	nop
       4:	8c c3       	rjmp	.+1816   	; 0x71e <__vector_1>
       6:	00 00       	nop
       8:	b8 c3       	rjmp	.+1904   	; 0x77a <__vector_2>
       a:	00 00       	nop
       c:	e4 c3       	rjmp	.+1992   	; 0x7d6 <__vector_3>
       e:	00 00       	nop
      10:	10 c4       	rjmp	.+2080   	; 0x832 <__vector_4>
      12:	00 00       	nop
      14:	3c c4       	rjmp	.+2168   	; 0x88e <__vector_5>
      16:	00 00       	nop
      18:	68 c4       	rjmp	.+2256   	; 0x8ea <__vector_6>
      1a:	00 00       	nop
      1c:	94 c4       	rjmp	.+2344   	; 0x946 <__vector_7>
      1e:	00 00       	nop
      20:	c0 c4       	rjmp	.+2432   	; 0x9a2 <__vector_8>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_25>
      68:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_26>
      6c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_27>
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c0       	rjmp	.+200    	; 0x14a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c0       	rjmp	.+188    	; 0x14a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_36>
      94:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__vector_37>
      98:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_38>
      9c:	56 c0       	rjmp	.+172    	; 0x14a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	54 c0       	rjmp	.+168    	; 0x14a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c0       	rjmp	.+164    	; 0x14a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c0       	rjmp	.+160    	; 0x14a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c0       	rjmp	.+156    	; 0x14a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c0       	rjmp	.+152    	; 0x14a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c0       	rjmp	.+148    	; 0x14a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c0       	rjmp	.+144    	; 0x14a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c0       	rjmp	.+140    	; 0x14a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c0       	rjmp	.+136    	; 0x14a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c0       	rjmp	.+132    	; 0x14a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c0       	rjmp	.+128    	; 0x14a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__vector_51>
      d0:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_52>
      d4:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_53>
      d8:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_54>
      dc:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_55>
      e0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_56>
      e4:	0e 05       	cpc	r16, r14
      e6:	1e 05       	cpc	r17, r14
      e8:	2e 05       	cpc	r18, r14
      ea:	3e 05       	cpc	r19, r14
      ec:	4e 05       	cpc	r20, r14
      ee:	5e 05       	cpc	r21, r14
      f0:	6e 05       	cpc	r22, r14
      f2:	7e 05       	cpc	r23, r14
      f4:	8e 05       	cpc	r24, r14
      f6:	9e 05       	cpc	r25, r14
      f8:	ae 05       	cpc	r26, r14
      fa:	da 07       	cpc	r29, r26
      fc:	e5 07       	cpc	r30, r21
      fe:	fa 07       	cpc	r31, r26
     100:	0f 08       	sbc	r0, r15
     102:	24 08       	sbc	r2, r4
     104:	41 08       	sbc	r4, r1
     106:	7d 08       	sbc	r7, r13
     108:	9e 08       	sbc	r9, r14

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d1 e2       	ldi	r29, 0x21	; 33
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0c bf       	out	0x3c, r16	; 60

0000011a <__do_copy_data>:
     11a:	12 e0       	ldi	r17, 0x02	; 2
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	ea e2       	ldi	r30, 0x2A	; 42
     122:	fc e1       	ldi	r31, 0x1C	; 28
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a6 30       	cpi	r26, 0x06	; 6
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	22 e0       	ldi	r18, 0x02	; 2
     136:	a6 e0       	ldi	r26, 0x06	; 6
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a5 36       	cpi	r26, 0x65	; 101
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	28 d6       	rcall	.+3152   	; 0xd96 <main>
     146:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <btn_interrupt>:
	}while(0);
	return err;
}

void btn_interrupt(uint8_t int_num)
{	
     14c:	cf 93       	push	r28
     14e:	c8 2f       	mov	r28, r24
	bool state;
	if (int_num<4)
     150:	84 30       	cpi	r24, 0x04	; 4
     152:	b0 f4       	brcc	.+44     	; 0x180 <btn_interrupt+0x34>
	{
		state=(gpio_hal_pin_read(&PIND,int_num));
     154:	68 2f       	mov	r22, r24
     156:	89 e2       	ldi	r24, 0x29	; 41
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	ad d1       	rcall	.+858    	; 0x4b6 <gpio_hal_pin_read>
		if (g_button_callback != NULL)
     15c:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <g_button_callback>
     160:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <g_button_callback+0x1>
     164:	30 97       	sbiw	r30, 0x00	; 0
     166:	09 f1       	breq	.+66     	; 0x1aa <btn_interrupt+0x5e>
		{	
			if (state)
     168:	88 23       	and	r24, r24
     16a:	29 f0       	breq	.+10     	; 0x176 <btn_interrupt+0x2a>
			{
				g_button_callback(PortD,int_num, released);
     16c:	41 e0       	ldi	r20, 0x01	; 1
     16e:	6c 2f       	mov	r22, r28
     170:	83 e0       	ldi	r24, 0x03	; 3
     172:	19 95       	eicall
     174:	1a c0       	rjmp	.+52     	; 0x1aa <btn_interrupt+0x5e>
			}
			else
			{
				g_button_callback(PortD,int_num, pressed);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	6c 2f       	mov	r22, r28
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	19 95       	eicall
     17e:	15 c0       	rjmp	.+42     	; 0x1aa <btn_interrupt+0x5e>
			}
		}	
	}
	else
	{
		state=(gpio_hal_pin_read(&PINE,int_num));
     180:	68 2f       	mov	r22, r24
     182:	8c e2       	ldi	r24, 0x2C	; 44
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	97 d1       	rcall	.+814    	; 0x4b6 <gpio_hal_pin_read>
		if (g_button_callback != NULL)
     188:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <g_button_callback>
     18c:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <g_button_callback+0x1>
     190:	30 97       	sbiw	r30, 0x00	; 0
     192:	59 f0       	breq	.+22     	; 0x1aa <btn_interrupt+0x5e>
		{
			if (state)
     194:	88 23       	and	r24, r24
     196:	29 f0       	breq	.+10     	; 0x1a2 <btn_interrupt+0x56>
			{
				g_button_callback(PortE,int_num, released);
     198:	41 e0       	ldi	r20, 0x01	; 1
     19a:	6c 2f       	mov	r22, r28
     19c:	84 e0       	ldi	r24, 0x04	; 4
     19e:	19 95       	eicall
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <btn_interrupt+0x5e>
			}
			else
			{
				g_button_callback(PortE,int_num, pressed);
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	6c 2f       	mov	r22, r28
     1a6:	84 e0       	ldi	r24, 0x04	; 4
     1a8:	19 95       	eicall
			}
		}
	}
}
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <btn_init>:
#include "error.h"

ButtonCallback_t g_button_callback;

uint32_t btn_init (portx btn_port, uint8_t btn_pin)
{	
     1ae:	cf 93       	push	r28
	uint32_t err=NO_ERROR;
	g_button_callback = NULL;
     1b0:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <g_button_callback+0x1>
     1b4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <g_button_callback>
	do 
	{
		if (btn_port!=PortD && btn_port!=PortE)
     1b8:	9d ef       	ldi	r25, 0xFD	; 253
     1ba:	98 0f       	add	r25, r24
     1bc:	92 30       	cpi	r25, 0x02	; 2
     1be:	50 f0       	brcs	.+20     	; 0x1d4 <btn_init+0x26>
		{
			if (btn_port==PortA || btn_port==PortB || btn_port==PortC || btn_port==PortF || btn_port==PortG || btn_port==PortH || btn_port==PortJ || btn_port==PortK || btn_port==PortL )
     1c0:	83 30       	cpi	r24, 0x03	; 3
     1c2:	88 f1       	brcs	.+98     	; 0x226 <btn_init+0x78>
     1c4:	85 50       	subi	r24, 0x05	; 5
     1c6:	86 30       	cpi	r24, 0x06	; 6
     1c8:	98 f1       	brcs	.+102    	; 0x230 <btn_init+0x82>
				err=PIN_NOT_SUPPORT;
				break;
			}
			else
			{
				err=PORT_ERROR;
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	45 c0       	rjmp	.+138    	; 0x25e <btn_init+0xb0>
				break;
			}
		}
		if (btn_pin>7)
     1d4:	68 30       	cpi	r22, 0x08	; 8
     1d6:	88 f5       	brcc	.+98     	; 0x23a <btn_init+0x8c>
     1d8:	c6 2f       	mov	r28, r22
		{
			err=PIN_ERROR;
			break;
		}
		if (btn_port==PortD)
     1da:	83 30       	cpi	r24, 0x03	; 3
     1dc:	89 f4       	brne	.+34     	; 0x200 <btn_init+0x52>
		{	
			if (btn_pin>3)
     1de:	64 30       	cpi	r22, 0x04	; 4
     1e0:	88 f5       	brcc	.+98     	; 0x244 <btn_init+0x96>
			{
				err=PIN_NOT_SUPPORT;
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTD, btn_pin, change, btn_interrupt);
     1e2:	26 ea       	ldi	r18, 0xA6	; 166
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	41 e0       	ldi	r20, 0x01	; 1
     1e8:	8b e2       	ldi	r24, 0x2B	; 43
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	6f d1       	rcall	.+734    	; 0x4cc <gpio_hal_pin_config_interrupt>
			gpio_hal_pin_init(&DDRD, btn_pin, input);
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	6c 2f       	mov	r22, r28
     1f2:	8a e2       	ldi	r24, 0x2A	; 42
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	44 d0       	rcall	.+136    	; 0x280 <gpio_hal_pin_init>

ButtonCallback_t g_button_callback;

uint32_t btn_init (portx btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	cb 01       	movw	r24, r22
     1fe:	2f c0       	rjmp	.+94     	; 0x25e <btn_init+0xb0>
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTD, btn_pin, change, btn_interrupt);
			gpio_hal_pin_init(&DDRD, btn_pin, input);
  		}
		else if (btn_port==PortE)
     200:	84 30       	cpi	r24, 0x04	; 4
     202:	29 f5       	brne	.+74     	; 0x24e <btn_init+0xa0>
		{	
			if (btn_pin<4)
     204:	64 30       	cpi	r22, 0x04	; 4
     206:	38 f1       	brcs	.+78     	; 0x256 <btn_init+0xa8>
			{
				err=PIN_NOT_SUPPORT;
				break;
			}
			gpio_hal_pin_config_interrupt(&PORTE, btn_pin, change, btn_interrupt);
     208:	26 ea       	ldi	r18, 0xA6	; 166
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	8e e2       	ldi	r24, 0x2E	; 46
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	5c d1       	rcall	.+696    	; 0x4cc <gpio_hal_pin_config_interrupt>
			gpio_hal_pin_init(&DDRE, btn_pin, input);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	6c 2f       	mov	r22, r28
     218:	8d e2       	ldi	r24, 0x2D	; 45
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	31 d0       	rcall	.+98     	; 0x280 <gpio_hal_pin_init>

ButtonCallback_t g_button_callback;

uint32_t btn_init (portx btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	cb 01       	movw	r24, r22
     224:	1c c0       	rjmp	.+56     	; 0x25e <btn_init+0xb0>
	{
		if (btn_port!=PortD && btn_port!=PortE)
		{
			if (btn_port==PortA || btn_port==PortB || btn_port==PortC || btn_port==PortF || btn_port==PortG || btn_port==PortH || btn_port==PortJ || btn_port==PortK || btn_port==PortL )
			{
				err=PIN_NOT_SUPPORT;
     226:	64 e0       	ldi	r22, 0x04	; 4
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	17 c0       	rjmp	.+46     	; 0x25e <btn_init+0xb0>
     230:	64 e0       	ldi	r22, 0x04	; 4
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	12 c0       	rjmp	.+36     	; 0x25e <btn_init+0xb0>
				break;
			}
		}
		if (btn_pin>7)
		{
			err=PIN_ERROR;
     23a:	63 e0       	ldi	r22, 0x03	; 3
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0d c0       	rjmp	.+26     	; 0x25e <btn_init+0xb0>
		}
		if (btn_port==PortD)
		{	
			if (btn_pin>3)
			{
				err=PIN_NOT_SUPPORT;
     244:	64 e0       	ldi	r22, 0x04	; 4
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	08 c0       	rjmp	.+16     	; 0x25e <btn_init+0xb0>

ButtonCallback_t g_button_callback;

uint32_t btn_init (portx btn_port, uint8_t btn_pin)
{	
	uint32_t err=NO_ERROR;
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	cb 01       	movw	r24, r22
     254:	04 c0       	rjmp	.+8      	; 0x25e <btn_init+0xb0>
  		}
		else if (btn_port==PortE)
		{	
			if (btn_pin<4)
			{
				err=PIN_NOT_SUPPORT;
     256:	64 e0       	ldi	r22, 0x04	; 4
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
			gpio_hal_pin_config_interrupt(&PORTE, btn_pin, change, btn_interrupt);
			gpio_hal_pin_init(&DDRE, btn_pin, input);
		}
	} while (0);
	return err;
}
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <btn_set_event_callback>:
uint32_t btn_set_event_callback(ButtonCallback_t callback)
{
	uint32_t err=NO_ERROR;
	do 
	{
		if (callback == NULL)
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	41 f0       	breq	.+16     	; 0x276 <btn_set_event_callback+0x14>
		{
			err = APP_CALLBACK_MISSING;
			break;
		}
		g_button_callback = callback;
     266:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <g_button_callback+0x1>
     26a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <g_button_callback>
	return err;
}

uint32_t btn_set_event_callback(ButtonCallback_t callback)
{
	uint32_t err=NO_ERROR;
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	cb 01       	movw	r24, r22
     274:	08 95       	ret
	do 
	{
		if (callback == NULL)
		{
			err = APP_CALLBACK_MISSING;
     276:	6c e0       	ldi	r22, 0x0C	; 12
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		g_button_callback = callback;
	}while(0);
	return err;
}
     27e:	08 95       	ret

00000280 <gpio_hal_pin_init>:
	
interrupt_callback_t g_interrupt_callback = NULL;


uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, io iotype )
{	
     280:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do 
	{
		if (port==NULL)
     282:	89 2b       	or	r24, r25
     284:	09 f4       	brne	.+2      	; 0x288 <gpio_hal_pin_init+0x8>
     286:	51 c0       	rjmp	.+162    	; 0x32a <gpio_hal_pin_init+0xaa>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=DDRA && *port!=DDRB && *port!=DDRC && *port!=DDRD && *port!=DDRE && *port!=DDRF && *port!=DDRG && *port!=DDRH && *port!=DDRJ && *port!=DDRK && *port!=DDRL)
     288:	90 81       	ld	r25, Z
     28a:	81 b1       	in	r24, 0x01	; 1
     28c:	98 17       	cp	r25, r24
     28e:	61 f1       	breq	.+88     	; 0x2e8 <gpio_hal_pin_init+0x68>
     290:	90 81       	ld	r25, Z
     292:	84 b1       	in	r24, 0x04	; 4
     294:	98 17       	cp	r25, r24
     296:	41 f1       	breq	.+80     	; 0x2e8 <gpio_hal_pin_init+0x68>
     298:	90 81       	ld	r25, Z
     29a:	87 b1       	in	r24, 0x07	; 7
     29c:	98 17       	cp	r25, r24
     29e:	21 f1       	breq	.+72     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2a0:	90 81       	ld	r25, Z
     2a2:	8a b1       	in	r24, 0x0a	; 10
     2a4:	98 17       	cp	r25, r24
     2a6:	01 f1       	breq	.+64     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2a8:	90 81       	ld	r25, Z
     2aa:	8d b1       	in	r24, 0x0d	; 13
     2ac:	98 17       	cp	r25, r24
     2ae:	e1 f0       	breq	.+56     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2b0:	90 81       	ld	r25, Z
     2b2:	80 b3       	in	r24, 0x10	; 16
     2b4:	98 17       	cp	r25, r24
     2b6:	c1 f0       	breq	.+48     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2b8:	90 81       	ld	r25, Z
     2ba:	83 b3       	in	r24, 0x13	; 19
     2bc:	98 17       	cp	r25, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2c0:	90 81       	ld	r25, Z
     2c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     2c6:	98 17       	cp	r25, r24
     2c8:	79 f0       	breq	.+30     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2ca:	90 81       	ld	r25, Z
     2cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
     2d0:	98 17       	cp	r25, r24
     2d2:	51 f0       	breq	.+20     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2d4:	90 81       	ld	r25, Z
     2d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     2da:	98 17       	cp	r25, r24
     2dc:	29 f0       	breq	.+10     	; 0x2e8 <gpio_hal_pin_init+0x68>
     2de:	90 81       	ld	r25, Z
     2e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
     2e4:	98 13       	cpse	r25, r24
     2e6:	26 c0       	rjmp	.+76     	; 0x334 <gpio_hal_pin_init+0xb4>
				{
					err=PORT_ERROR;
					break;
				}
		if (pin>7)
     2e8:	68 30       	cpi	r22, 0x08	; 8
     2ea:	48 f5       	brcc	.+82     	; 0x33e <gpio_hal_pin_init+0xbe>
		{
			err=PIN_ERROR;
			break;
		}
		if (iotype)
     2ec:	44 23       	and	r20, r20
     2ee:	71 f0       	breq	.+28     	; 0x30c <gpio_hal_pin_init+0x8c>
		{
			*port |= (1 << pin);
     2f0:	20 81       	ld	r18, Z
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <gpio_hal_pin_init+0x7c>
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <gpio_hal_pin_init+0x78>
     300:	82 2b       	or	r24, r18
     302:	80 83       	st	Z, r24
interrupt_callback_t g_interrupt_callback = NULL;


uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, io iotype )
{	
	uint32_t err=NO_ERROR;
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	cb 01       	movw	r24, r22
     30a:	08 95       	ret
		{
			*port |= (1 << pin);
		}
		else
		{
			*port &= ~(1 << pin);
     30c:	20 81       	ld	r18, Z
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <gpio_hal_pin_init+0x98>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	6a 95       	dec	r22
     31a:	e2 f7       	brpl	.-8      	; 0x314 <gpio_hal_pin_init+0x94>
     31c:	80 95       	com	r24
     31e:	82 23       	and	r24, r18
     320:	80 83       	st	Z, r24
interrupt_callback_t g_interrupt_callback = NULL;


uint32_t gpio_hal_pin_init(volatile uint8_t *port, uint8_t pin, io iotype )
{	
	uint32_t err=NO_ERROR;
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	cb 01       	movw	r24, r22
     328:	08 95       	ret
	do 
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret
			break;
		}
		if (*port!=DDRA && *port!=DDRB && *port!=DDRC && *port!=DDRD && *port!=DDRE && *port!=DDRF && *port!=DDRG && *port!=DDRH && *port!=DDRJ && *port!=DDRK && *port!=DDRL)
				{
					err=PORT_ERROR;
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	08 95       	ret
					break;
				}
		if (pin>7)
		{
			err=PIN_ERROR;
     33e:	63 e0       	ldi	r22, 0x03	; 3
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
		{
			*port &= ~(1 << pin);
		}
	} while (0);
	return err;
}
     346:	08 95       	ret

00000348 <gpio_hal_pin_set>:

uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
     348:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do 
	{	
		if (port==NULL)
     34a:	89 2b       	or	r24, r25
     34c:	09 f4       	brne	.+2      	; 0x350 <gpio_hal_pin_set+0x8>
     34e:	51 c0       	rjmp	.+162    	; 0x3f2 <gpio_hal_pin_set+0xaa>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
     350:	90 81       	ld	r25, Z
     352:	82 b1       	in	r24, 0x02	; 2
     354:	98 17       	cp	r25, r24
     356:	61 f1       	breq	.+88     	; 0x3b0 <gpio_hal_pin_set+0x68>
     358:	90 81       	ld	r25, Z
     35a:	85 b1       	in	r24, 0x05	; 5
     35c:	98 17       	cp	r25, r24
     35e:	41 f1       	breq	.+80     	; 0x3b0 <gpio_hal_pin_set+0x68>
     360:	90 81       	ld	r25, Z
     362:	88 b1       	in	r24, 0x08	; 8
     364:	98 17       	cp	r25, r24
     366:	21 f1       	breq	.+72     	; 0x3b0 <gpio_hal_pin_set+0x68>
     368:	90 81       	ld	r25, Z
     36a:	8b b1       	in	r24, 0x0b	; 11
     36c:	98 17       	cp	r25, r24
     36e:	01 f1       	breq	.+64     	; 0x3b0 <gpio_hal_pin_set+0x68>
     370:	90 81       	ld	r25, Z
     372:	8e b1       	in	r24, 0x0e	; 14
     374:	98 17       	cp	r25, r24
     376:	e1 f0       	breq	.+56     	; 0x3b0 <gpio_hal_pin_set+0x68>
     378:	90 81       	ld	r25, Z
     37a:	81 b3       	in	r24, 0x11	; 17
     37c:	98 17       	cp	r25, r24
     37e:	c1 f0       	breq	.+48     	; 0x3b0 <gpio_hal_pin_set+0x68>
     380:	90 81       	ld	r25, Z
     382:	84 b3       	in	r24, 0x14	; 20
     384:	98 17       	cp	r25, r24
     386:	a1 f0       	breq	.+40     	; 0x3b0 <gpio_hal_pin_set+0x68>
     388:	90 81       	ld	r25, Z
     38a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     38e:	98 17       	cp	r25, r24
     390:	79 f0       	breq	.+30     	; 0x3b0 <gpio_hal_pin_set+0x68>
     392:	90 81       	ld	r25, Z
     394:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     398:	98 17       	cp	r25, r24
     39a:	51 f0       	breq	.+20     	; 0x3b0 <gpio_hal_pin_set+0x68>
     39c:	90 81       	ld	r25, Z
     39e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     3a2:	98 17       	cp	r25, r24
     3a4:	29 f0       	breq	.+10     	; 0x3b0 <gpio_hal_pin_set+0x68>
     3a6:	90 81       	ld	r25, Z
     3a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     3ac:	98 13       	cpse	r25, r24
     3ae:	26 c0       	rjmp	.+76     	; 0x3fc <gpio_hal_pin_set+0xb4>
		{
			err=PORT_ERROR;
			break;
		}
		
		if (pin>7)
     3b0:	68 30       	cpi	r22, 0x08	; 8
     3b2:	48 f5       	brcc	.+82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			err=PIN_ERROR;
			break;
		}
		if (value)
     3b4:	44 23       	and	r20, r20
     3b6:	71 f0       	breq	.+28     	; 0x3d4 <gpio_hal_pin_set+0x8c>
		{
			*port |= (1 << pin);
     3b8:	20 81       	ld	r18, Z
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <gpio_hal_pin_set+0x7c>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	6a 95       	dec	r22
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <gpio_hal_pin_set+0x78>
     3c8:	82 2b       	or	r24, r18
     3ca:	80 83       	st	Z, r24
	return err;
}

uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
	uint32_t err=NO_ERROR;
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	cb 01       	movw	r24, r22
     3d2:	08 95       	ret
		{
			*port |= (1 << pin);
		}
		else
		{
			*port &= ~(1 << pin);
     3d4:	20 81       	ld	r18, Z
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <gpio_hal_pin_set+0x98>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <gpio_hal_pin_set+0x94>
     3e4:	80 95       	com	r24
     3e6:	82 23       	and	r24, r18
     3e8:	80 83       	st	Z, r24
	return err;
}

uint32_t gpio_hal_pin_set(volatile uint8_t *port, uint8_t pin, uint8_t value)
{
	uint32_t err=NO_ERROR;
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	cb 01       	movw	r24, r22
     3f0:	08 95       	ret
	do 
	{	
		if (port==NULL)
		{
			err=NULL_ERROR;
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	08 95       	ret
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
		{
			err=PORT_ERROR;
     3fc:	62 e0       	ldi	r22, 0x02	; 2
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret
			break;
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     406:	63 e0       	ldi	r22, 0x03	; 3
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
		{
			*port &= ~(1 << pin);
		}
	} while (0);
	return err;
}
     40e:	08 95       	ret

00000410 <gpio_hal_pin_toggle>:

uint32_t gpio_hal_pin_toggle(volatile uint8_t *port, uint8_t pin)
{
     410:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	do
	{
		if (port==NULL)
     412:	89 2b       	or	r24, r25
     414:	09 f4       	brne	.+2      	; 0x418 <gpio_hal_pin_toggle+0x8>
     416:	40 c0       	rjmp	.+128    	; 0x498 <gpio_hal_pin_toggle+0x88>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
     418:	90 81       	ld	r25, Z
     41a:	82 b1       	in	r24, 0x02	; 2
     41c:	98 17       	cp	r25, r24
     41e:	61 f1       	breq	.+88     	; 0x478 <gpio_hal_pin_toggle+0x68>
     420:	90 81       	ld	r25, Z
     422:	85 b1       	in	r24, 0x05	; 5
     424:	98 17       	cp	r25, r24
     426:	41 f1       	breq	.+80     	; 0x478 <gpio_hal_pin_toggle+0x68>
     428:	90 81       	ld	r25, Z
     42a:	88 b1       	in	r24, 0x08	; 8
     42c:	98 17       	cp	r25, r24
     42e:	21 f1       	breq	.+72     	; 0x478 <gpio_hal_pin_toggle+0x68>
     430:	90 81       	ld	r25, Z
     432:	8b b1       	in	r24, 0x0b	; 11
     434:	98 17       	cp	r25, r24
     436:	01 f1       	breq	.+64     	; 0x478 <gpio_hal_pin_toggle+0x68>
     438:	90 81       	ld	r25, Z
     43a:	8e b1       	in	r24, 0x0e	; 14
     43c:	98 17       	cp	r25, r24
     43e:	e1 f0       	breq	.+56     	; 0x478 <gpio_hal_pin_toggle+0x68>
     440:	90 81       	ld	r25, Z
     442:	81 b3       	in	r24, 0x11	; 17
     444:	98 17       	cp	r25, r24
     446:	c1 f0       	breq	.+48     	; 0x478 <gpio_hal_pin_toggle+0x68>
     448:	90 81       	ld	r25, Z
     44a:	84 b3       	in	r24, 0x14	; 20
     44c:	98 17       	cp	r25, r24
     44e:	a1 f0       	breq	.+40     	; 0x478 <gpio_hal_pin_toggle+0x68>
     450:	90 81       	ld	r25, Z
     452:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     456:	98 17       	cp	r25, r24
     458:	79 f0       	breq	.+30     	; 0x478 <gpio_hal_pin_toggle+0x68>
     45a:	90 81       	ld	r25, Z
     45c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     460:	98 17       	cp	r25, r24
     462:	51 f0       	breq	.+20     	; 0x478 <gpio_hal_pin_toggle+0x68>
     464:	90 81       	ld	r25, Z
     466:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     46a:	98 17       	cp	r25, r24
     46c:	29 f0       	breq	.+10     	; 0x478 <gpio_hal_pin_toggle+0x68>
     46e:	90 81       	ld	r25, Z
     470:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     474:	98 13       	cpse	r25, r24
     476:	15 c0       	rjmp	.+42     	; 0x4a2 <gpio_hal_pin_toggle+0x92>
		{
			err=PORT_ERROR;
			break;
		}
		
		if (pin>7)
     478:	68 30       	cpi	r22, 0x08	; 8
     47a:	c0 f4       	brcc	.+48     	; 0x4ac <gpio_hal_pin_toggle+0x9c>
		{
			err=PIN_ERROR;
			break;
		}
		*port ^= (1 << pin);
     47c:	20 81       	ld	r18, Z
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <gpio_hal_pin_toggle+0x78>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <gpio_hal_pin_toggle+0x74>
     48c:	82 27       	eor	r24, r18
     48e:	80 83       	st	Z, r24
	return err;
}

uint32_t gpio_hal_pin_toggle(volatile uint8_t *port, uint8_t pin)
{
	uint32_t err=NO_ERROR;
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	cb 01       	movw	r24, r22
     496:	08 95       	ret
	do
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     498:	61 e0       	ldi	r22, 0x01	; 1
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	08 95       	ret
			break;
		}
		if (*port!=PORTA && *port!=PORTB && *port!=PORTC && *port!=PORTD && *port!=PORTE && *port!=PORTF && *port!=PORTG && *port!=PORTH && *port!=PORTJ && *port!=PORTK && *port!=PORTL)
		{
			err=PORT_ERROR;
     4a2:	62 e0       	ldi	r22, 0x02	; 2
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	08 95       	ret
			break;
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     4ac:	63 e0       	ldi	r22, 0x03	; 3
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		*port ^= (1 << pin);
	} while (0);
	return err;
}
     4b4:	08 95       	ret

000004b6 <gpio_hal_pin_read>:

uint8_t gpio_hal_pin_read(volatile uint8_t *port, uint8_t pin)
{
	return *port & (1 << pin);
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 81       	ld	r18, Z
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <gpio_hal_pin_read+0xe>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <gpio_hal_pin_read+0xa>
}
     4c8:	82 23       	and	r24, r18
     4ca:	08 95       	ret

000004cc <gpio_hal_pin_config_interrupt>:

uint32_t gpio_hal_pin_config_interrupt(volatile uint8_t *port, uint8_t pin, sense sensetype, interrupt_callback_t callback)
{	
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	fc 01       	movw	r30, r24
	uint32_t err=NO_ERROR;
	uint8_t bit;
	volatile uint8_t *reg;
	do
	{
		if (port==NULL)
     4d2:	89 2b       	or	r24, r25
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <gpio_hal_pin_config_interrupt+0xc>
     4d6:	d6 c0       	rjmp	.+428    	; 0x684 <gpio_hal_pin_config_interrupt+0x1b8>
		{
			err=NULL_ERROR;
			break;
		}
		if (*port!=PORTD && *port!=PORTE)
     4d8:	90 81       	ld	r25, Z
     4da:	8b b1       	in	r24, 0x0b	; 11
     4dc:	98 17       	cp	r25, r24
     4de:	d1 f1       	breq	.+116    	; 0x554 <gpio_hal_pin_config_interrupt+0x88>
     4e0:	90 81       	ld	r25, Z
     4e2:	8e b1       	in	r24, 0x0e	; 14
     4e4:	98 17       	cp	r25, r24
     4e6:	b1 f1       	breq	.+108    	; 0x554 <gpio_hal_pin_config_interrupt+0x88>
		{
			if (*port==PORTA || *port==PORTB || *port==PORTC || *port==PORTF || *port==PORTG || *port==PORTH || *port==PORTJ || *port==PORTK || *port==PORTL)
     4e8:	90 81       	ld	r25, Z
     4ea:	82 b1       	in	r24, 0x02	; 2
     4ec:	98 17       	cp	r25, r24
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <gpio_hal_pin_config_interrupt+0x26>
     4f0:	ce c0       	rjmp	.+412    	; 0x68e <gpio_hal_pin_config_interrupt+0x1c2>
     4f2:	90 81       	ld	r25, Z
     4f4:	85 b1       	in	r24, 0x05	; 5
     4f6:	98 17       	cp	r25, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <gpio_hal_pin_config_interrupt+0x30>
     4fa:	ce c0       	rjmp	.+412    	; 0x698 <gpio_hal_pin_config_interrupt+0x1cc>
     4fc:	90 81       	ld	r25, Z
     4fe:	88 b1       	in	r24, 0x08	; 8
     500:	98 17       	cp	r25, r24
     502:	09 f4       	brne	.+2      	; 0x506 <gpio_hal_pin_config_interrupt+0x3a>
     504:	ce c0       	rjmp	.+412    	; 0x6a2 <gpio_hal_pin_config_interrupt+0x1d6>
     506:	90 81       	ld	r25, Z
     508:	81 b3       	in	r24, 0x11	; 17
     50a:	98 17       	cp	r25, r24
     50c:	09 f4       	brne	.+2      	; 0x510 <gpio_hal_pin_config_interrupt+0x44>
     50e:	ce c0       	rjmp	.+412    	; 0x6ac <gpio_hal_pin_config_interrupt+0x1e0>
     510:	90 81       	ld	r25, Z
     512:	84 b3       	in	r24, 0x14	; 20
     514:	98 17       	cp	r25, r24
     516:	09 f4       	brne	.+2      	; 0x51a <gpio_hal_pin_config_interrupt+0x4e>
     518:	ce c0       	rjmp	.+412    	; 0x6b6 <gpio_hal_pin_config_interrupt+0x1ea>
     51a:	90 81       	ld	r25, Z
     51c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     520:	98 17       	cp	r25, r24
     522:	09 f4       	brne	.+2      	; 0x526 <gpio_hal_pin_config_interrupt+0x5a>
     524:	cd c0       	rjmp	.+410    	; 0x6c0 <gpio_hal_pin_config_interrupt+0x1f4>
     526:	90 81       	ld	r25, Z
     528:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
     52c:	98 17       	cp	r25, r24
     52e:	09 f4       	brne	.+2      	; 0x532 <gpio_hal_pin_config_interrupt+0x66>
     530:	cc c0       	rjmp	.+408    	; 0x6ca <gpio_hal_pin_config_interrupt+0x1fe>
     532:	90 81       	ld	r25, Z
     534:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     538:	98 17       	cp	r25, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <gpio_hal_pin_config_interrupt+0x72>
     53c:	cb c0       	rjmp	.+406    	; 0x6d4 <gpio_hal_pin_config_interrupt+0x208>
     53e:	90 81       	ld	r25, Z
     540:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     544:	98 17       	cp	r25, r24
     546:	09 f4       	brne	.+2      	; 0x54a <gpio_hal_pin_config_interrupt+0x7e>
     548:	ca c0       	rjmp	.+404    	; 0x6de <gpio_hal_pin_config_interrupt+0x212>
				err=PIN_NOT_SUPPORT;
				break;
			}
			else
			{
				err=PORT_ERROR;
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	e2 c0       	rjmp	.+452    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
				break;
			}
		}
		
		if (pin>7)
     554:	68 30       	cpi	r22, 0x08	; 8
     556:	08 f0       	brcs	.+2      	; 0x55a <gpio_hal_pin_config_interrupt+0x8e>
     558:	c7 c0       	rjmp	.+398    	; 0x6e8 <gpio_hal_pin_config_interrupt+0x21c>
		{
			err=PIN_ERROR;
			break;
		}
		if (*port == PORTD && pin<4)
     55a:	90 81       	ld	r25, Z
     55c:	8b b1       	in	r24, 0x0b	; 11
     55e:	98 13       	cpse	r25, r24
     560:	03 c0       	rjmp	.+6      	; 0x568 <gpio_hal_pin_config_interrupt+0x9c>
     562:	64 30       	cpi	r22, 0x04	; 4
     564:	68 f0       	brcs	.+26     	; 0x580 <gpio_hal_pin_config_interrupt+0xb4>
     566:	cf c0       	rjmp	.+414    	; 0x706 <gpio_hal_pin_config_interrupt+0x23a>
		{
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
     568:	90 81       	ld	r25, Z
     56a:	8e b1       	in	r24, 0x0e	; 14
     56c:	98 13       	cpse	r25, r24
     56e:	c1 c0       	rjmp	.+386    	; 0x6f2 <gpio_hal_pin_config_interrupt+0x226>
     570:	64 30       	cpi	r22, 0x04	; 4
     572:	08 f4       	brcc	.+2      	; 0x576 <gpio_hal_pin_config_interrupt+0xaa>
     574:	c3 c0       	rjmp	.+390    	; 0x6fc <gpio_hal_pin_config_interrupt+0x230>
		{
			reg = &EICRB;
			bit = pin-4;
     576:	8c ef       	ldi	r24, 0xFC	; 252
     578:	86 0f       	add	r24, r22
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
		{
			reg = &EICRB;
     57a:	ea e6       	ldi	r30, 0x6A	; 106
     57c:	f0 e0       	ldi	r31, 0x00	; 0
			bit = pin-4;
     57e:	03 c0       	rjmp	.+6      	; 0x586 <gpio_hal_pin_config_interrupt+0xba>
			break;
		}
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
			bit = pin;
     580:	86 2f       	mov	r24, r22
			err=PIN_ERROR;
			break;
		}
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
     582:	e9 e6       	ldi	r30, 0x69	; 105
     584:	f0 e0       	ldi	r31, 0x00	; 0
		else
		{
			err=PIN_NOT_SUPPORT;
			break;
		}
		switch (sensetype)
     586:	41 30       	cpi	r20, 0x01	; 1
     588:	f9 f0       	breq	.+62     	; 0x5c8 <gpio_hal_pin_config_interrupt+0xfc>
     58a:	30 f0       	brcs	.+12     	; 0x598 <gpio_hal_pin_config_interrupt+0xcc>
     58c:	42 30       	cpi	r20, 0x02	; 2
     58e:	b1 f1       	breq	.+108    	; 0x5fc <gpio_hal_pin_config_interrupt+0x130>
     590:	43 30       	cpi	r20, 0x03	; 3
     592:	09 f4       	brne	.+2      	; 0x596 <gpio_hal_pin_config_interrupt+0xca>
     594:	4e c0       	rjmp	.+156    	; 0x632 <gpio_hal_pin_config_interrupt+0x166>
     596:	63 c0       	rjmp	.+198    	; 0x65e <gpio_hal_pin_config_interrupt+0x192>
		{
			case low:
			{
				(*reg) &= ~(1 << (2 * bit + 1)) & ~(1 << (2 * bit));
     598:	70 81       	ld	r23, Z
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	dc 01       	movw	r26, r24
     5a2:	11 96       	adiw	r26, 0x01	; 1
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	ea 01       	movw	r28, r20
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <gpio_hal_pin_config_interrupt+0xe4>
     5ac:	cc 0f       	add	r28, r28
     5ae:	dd 1f       	adc	r29, r29
     5b0:	aa 95       	dec	r26
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <gpio_hal_pin_config_interrupt+0xe0>
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <gpio_hal_pin_config_interrupt+0xee>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	8a 95       	dec	r24
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <gpio_hal_pin_config_interrupt+0xea>
     5be:	4c 2b       	or	r20, r28
     5c0:	40 95       	com	r20
     5c2:	47 23       	and	r20, r23
     5c4:	40 83       	st	Z, r20
				break;
     5c6:	4b c0       	rjmp	.+150    	; 0x65e <gpio_hal_pin_config_interrupt+0x192>
			}
			case change:
			{
				(*reg) |= (1 << (2 * bit));
     5c8:	70 81       	ld	r23, Z
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	da 01       	movw	r26, r20
     5d6:	08 2e       	mov	r0, r24
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <gpio_hal_pin_config_interrupt+0x112>
     5da:	aa 0f       	add	r26, r26
     5dc:	bb 1f       	adc	r27, r27
     5de:	0a 94       	dec	r0
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <gpio_hal_pin_config_interrupt+0x10e>
     5e2:	a7 2b       	or	r26, r23
     5e4:	a0 83       	st	Z, r26
				(*reg) &= ~(1 << (2 * bit + 1));
     5e6:	70 81       	ld	r23, Z
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <gpio_hal_pin_config_interrupt+0x124>
     5ec:	44 0f       	add	r20, r20
     5ee:	55 1f       	adc	r21, r21
     5f0:	8a 95       	dec	r24
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <gpio_hal_pin_config_interrupt+0x120>
     5f4:	40 95       	com	r20
     5f6:	47 23       	and	r20, r23
     5f8:	40 83       	st	Z, r20
				break;
     5fa:	31 c0       	rjmp	.+98     	; 0x65e <gpio_hal_pin_config_interrupt+0x192>
			}
			case falling:
			{
				(*reg) |= (1 << (2 * bit + 1));
     5fc:	70 81       	ld	r23, Z
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	dc 01       	movw	r26, r24
     606:	11 96       	adiw	r26, 0x01	; 1
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	ea 01       	movw	r28, r20
     60e:	02 c0       	rjmp	.+4      	; 0x614 <gpio_hal_pin_config_interrupt+0x148>
     610:	cc 0f       	add	r28, r28
     612:	dd 1f       	adc	r29, r29
     614:	aa 95       	dec	r26
     616:	e2 f7       	brpl	.-8      	; 0x610 <gpio_hal_pin_config_interrupt+0x144>
     618:	de 01       	movw	r26, r28
     61a:	a7 2b       	or	r26, r23
     61c:	a0 83       	st	Z, r26
				(*reg) &= ~(1 << (2 * bit));
     61e:	90 81       	ld	r25, Z
     620:	02 c0       	rjmp	.+4      	; 0x626 <gpio_hal_pin_config_interrupt+0x15a>
     622:	44 0f       	add	r20, r20
     624:	55 1f       	adc	r21, r21
     626:	8a 95       	dec	r24
     628:	e2 f7       	brpl	.-8      	; 0x622 <gpio_hal_pin_config_interrupt+0x156>
     62a:	40 95       	com	r20
     62c:	49 23       	and	r20, r25
     62e:	40 83       	st	Z, r20
				break;
     630:	16 c0       	rjmp	.+44     	; 0x65e <gpio_hal_pin_config_interrupt+0x192>
			}
			case rising:
			{
				(*reg) |= (1 << (2 * bit + 1)) | (1 << (2 * bit));
     632:	70 81       	ld	r23, Z
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	dc 01       	movw	r26, r24
     63c:	11 96       	adiw	r26, 0x01	; 1
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	ea 01       	movw	r28, r20
     644:	02 c0       	rjmp	.+4      	; 0x64a <gpio_hal_pin_config_interrupt+0x17e>
     646:	cc 0f       	add	r28, r28
     648:	dd 1f       	adc	r29, r29
     64a:	aa 95       	dec	r26
     64c:	e2 f7       	brpl	.-8      	; 0x646 <gpio_hal_pin_config_interrupt+0x17a>
     64e:	02 c0       	rjmp	.+4      	; 0x654 <gpio_hal_pin_config_interrupt+0x188>
     650:	44 0f       	add	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	8a 95       	dec	r24
     656:	e2 f7       	brpl	.-8      	; 0x650 <gpio_hal_pin_config_interrupt+0x184>
     658:	47 2b       	or	r20, r23
     65a:	4c 2b       	or	r20, r28
     65c:	40 83       	st	Z, r20
				break;
			}
		}
		EIMSK |= (1 << pin);
     65e:	4d b3       	in	r20, 0x1d	; 29
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <gpio_hal_pin_config_interrupt+0x19e>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	6a 95       	dec	r22
     66c:	e2 f7       	brpl	.-8      	; 0x666 <gpio_hal_pin_config_interrupt+0x19a>
     66e:	84 2b       	or	r24, r20
     670:	8d bb       	out	0x1d, r24	; 29
		sei();
     672:	78 94       	sei
		g_interrupt_callback=callback;
     674:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
     678:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
	return *port & (1 << pin);
}

uint32_t gpio_hal_pin_config_interrupt(volatile uint8_t *port, uint8_t pin, sense sensetype, interrupt_callback_t callback)
{	
	uint32_t err=NO_ERROR;
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	cb 01       	movw	r24, r22
     682:	4a c0       	rjmp	.+148    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
	volatile uint8_t *reg;
	do
	{
		if (port==NULL)
		{
			err=NULL_ERROR;
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	45 c0       	rjmp	.+138    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
		}
		if (*port!=PORTD && *port!=PORTE)
		{
			if (*port==PORTA || *port==PORTB || *port==PORTC || *port==PORTF || *port==PORTG || *port==PORTH || *port==PORTJ || *port==PORTK || *port==PORTL)
			{
				err=PIN_NOT_SUPPORT;
     68e:	64 e0       	ldi	r22, 0x04	; 4
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	40 c0       	rjmp	.+128    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	3b c0       	rjmp	.+118    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6a2:	64 e0       	ldi	r22, 0x04	; 4
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	36 c0       	rjmp	.+108    	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	31 c0       	rjmp	.+98     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6b6:	64 e0       	ldi	r22, 0x04	; 4
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2c c0       	rjmp	.+88     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6c0:	64 e0       	ldi	r22, 0x04	; 4
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	27 c0       	rjmp	.+78     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6ca:	64 e0       	ldi	r22, 0x04	; 4
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	22 c0       	rjmp	.+68     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6d4:	64 e0       	ldi	r22, 0x04	; 4
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	1d c0       	rjmp	.+58     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6de:	64 e0       	ldi	r22, 0x04	; 4
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	18 c0       	rjmp	.+48     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
			}
		}
		
		if (pin>7)
		{
			err=PIN_ERROR;
     6e8:	63 e0       	ldi	r22, 0x03	; 3
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	13 c0       	rjmp	.+38     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
			reg = &EICRB;
			bit = pin-4;
		}
		else
		{
			err=PIN_NOT_SUPPORT;
     6f2:	64 e0       	ldi	r22, 0x04	; 4
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e c0       	rjmp	.+28     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
     6fc:	64 e0       	ldi	r22, 0x04	; 4
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	09 c0       	rjmp	.+18     	; 0x718 <gpio_hal_pin_config_interrupt+0x24c>
		if (*port == PORTD && pin<4)
		{
			reg = &EICRA;
			bit = pin;
		}
		else if (*port == PORTE && pin>3)
     706:	90 81       	ld	r25, Z
     708:	8e b1       	in	r24, 0x0e	; 14
     70a:	98 17       	cp	r25, r24
     70c:	09 f4       	brne	.+2      	; 0x710 <gpio_hal_pin_config_interrupt+0x244>
     70e:	33 cf       	rjmp	.-410    	; 0x576 <gpio_hal_pin_config_interrupt+0xaa>
			reg = &EICRB;
			bit = pin-4;
		}
		else
		{
			err=PIN_NOT_SUPPORT;
     710:	64 e0       	ldi	r22, 0x04	; 4
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
		EIMSK |= (1 << pin);
		sei();
		g_interrupt_callback=callback;
	} while (0);
	return err;
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <__vector_1>:

ISR(INT0_vect)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     744:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     748:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	11 f0       	breq	.+4      	; 0x754 <__vector_1+0x36>
	{
		g_interrupt_callback(0);
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	19 95       	eicall
	}
}
     754:	ff 91       	pop	r31
     756:	ef 91       	pop	r30
     758:	bf 91       	pop	r27
     75a:	af 91       	pop	r26
     75c:	9f 91       	pop	r25
     75e:	8f 91       	pop	r24
     760:	7f 91       	pop	r23
     762:	6f 91       	pop	r22
     764:	5f 91       	pop	r21
     766:	4f 91       	pop	r20
     768:	3f 91       	pop	r19
     76a:	2f 91       	pop	r18
     76c:	0f 90       	pop	r0
     76e:	0b be       	out	0x3b, r0	; 59
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <__vector_2>:

ISR(INT1_vect)
{
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	0b b6       	in	r0, 0x3b	; 59
     786:	0f 92       	push	r0
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	ef 93       	push	r30
     79e:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     7a0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     7a4:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	11 f0       	breq	.+4      	; 0x7b0 <__vector_2+0x36>
	{
		g_interrupt_callback(1);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	19 95       	eicall
	}
}
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0b be       	out	0x3b, r0	; 59
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <__vector_3>:

ISR(INT2_vect)
{
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	0b b6       	in	r0, 0x3b	; 59
     7e2:	0f 92       	push	r0
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     7fc:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     800:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     804:	30 97       	sbiw	r30, 0x00	; 0
     806:	11 f0       	breq	.+4      	; 0x80c <__vector_3+0x36>
	{
		g_interrupt_callback(2);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	19 95       	eicall
	}
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <__vector_4>:

ISR(INT3_vect)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	0b b6       	in	r0, 0x3b	; 59
     83e:	0f 92       	push	r0
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     858:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     85c:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     860:	30 97       	sbiw	r30, 0x00	; 0
     862:	11 f0       	breq	.+4      	; 0x868 <__vector_4+0x36>
	{
		g_interrupt_callback(3);
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	19 95       	eicall
	}
}
     868:	ff 91       	pop	r31
     86a:	ef 91       	pop	r30
     86c:	bf 91       	pop	r27
     86e:	af 91       	pop	r26
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	7f 91       	pop	r23
     876:	6f 91       	pop	r22
     878:	5f 91       	pop	r21
     87a:	4f 91       	pop	r20
     87c:	3f 91       	pop	r19
     87e:	2f 91       	pop	r18
     880:	0f 90       	pop	r0
     882:	0b be       	out	0x3b, r0	; 59
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_5>:

ISR(INT4_vect)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	0b b6       	in	r0, 0x3b	; 59
     89a:	0f 92       	push	r0
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     8b4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     8b8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	11 f0       	breq	.+4      	; 0x8c4 <__vector_5+0x36>
	{
		g_interrupt_callback(4);
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	19 95       	eicall
	}
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0b be       	out	0x3b, r0	; 59
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_6>:

ISR(INT5_vect)
{
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	0b b6       	in	r0, 0x3b	; 59
     8f6:	0f 92       	push	r0
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     910:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     914:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	11 f0       	breq	.+4      	; 0x920 <__vector_6+0x36>
	{
		g_interrupt_callback(5);
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	19 95       	eicall
	}
}
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0b be       	out	0x3b, r0	; 59
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_7>:

ISR(INT6_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	0b b6       	in	r0, 0x3b	; 59
     952:	0f 92       	push	r0
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     96c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     970:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     974:	30 97       	sbiw	r30, 0x00	; 0
     976:	11 f0       	breq	.+4      	; 0x97c <__vector_7+0x36>
	{
		g_interrupt_callback(6);
     978:	86 e0       	ldi	r24, 0x06	; 6
     97a:	19 95       	eicall
	}
}
     97c:	ff 91       	pop	r31
     97e:	ef 91       	pop	r30
     980:	bf 91       	pop	r27
     982:	af 91       	pop	r26
     984:	9f 91       	pop	r25
     986:	8f 91       	pop	r24
     988:	7f 91       	pop	r23
     98a:	6f 91       	pop	r22
     98c:	5f 91       	pop	r21
     98e:	4f 91       	pop	r20
     990:	3f 91       	pop	r19
     992:	2f 91       	pop	r18
     994:	0f 90       	pop	r0
     996:	0b be       	out	0x3b, r0	; 59
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_8>:

ISR(INT7_vect)
{
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	0b b6       	in	r0, 0x3b	; 59
     9ae:	0f 92       	push	r0
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	4f 93       	push	r20
     9b6:	5f 93       	push	r21
     9b8:	6f 93       	push	r22
     9ba:	7f 93       	push	r23
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	af 93       	push	r26
     9c2:	bf 93       	push	r27
     9c4:	ef 93       	push	r30
     9c6:	ff 93       	push	r31
	if (g_interrupt_callback != NULL)
     9c8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
     9cc:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
     9d0:	30 97       	sbiw	r30, 0x00	; 0
     9d2:	11 f0       	breq	.+4      	; 0x9d8 <__vector_8+0x36>
	{
		g_interrupt_callback(7);
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	19 95       	eicall
	}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <map_registers>:
uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
	do
	{
		if (led_port!=PortA && led_port!=PortB && led_port!=PortC && led_port!=PortD && led_port!=PortE && led_port!=PortF && led_port!=PortG && led_port!=PortH && led_port!=PortJ && led_port!=PortK && led_port!=PortL )
     9fe:	8b 30       	cpi	r24, 0x0B	; 11
     a00:	08 f0       	brcs	.+2      	; 0xa04 <map_registers+0x6>
     a02:	bc c0       	rjmp	.+376    	; 0xb7c <map_registers+0x17e>
		{
			err=PORT_ERROR;
			break;
		}
		switch (led_port)
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	8b 30       	cpi	r24, 0x0B	; 11
     a08:	91 05       	cpc	r25, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <map_registers+0x10>
     a0c:	bc c0       	rjmp	.+376    	; 0xb86 <map_registers+0x188>
     a0e:	fc 01       	movw	r30, r24
     a10:	88 27       	eor	r24, r24
     a12:	ee 58       	subi	r30, 0x8E	; 142
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	8f 4f       	sbci	r24, 0xFF	; 255
     a18:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__tablejump2__>
		{
			case PortA:
			{
				DDRx = &DDRA;
     a1c:	81 e2       	ldi	r24, 0x21	; 33
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     a24:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTA;
     a28:	82 e2       	ldi	r24, 0x22	; 34
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     a30:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	cb 01       	movw	r24, r22
		{
			case PortA:
			{
				DDRx = &DDRA;
				PORTx = &PORTA;
				break;
     a3a:	08 95       	ret
			}
			case PortB:
			{
				DDRx = &DDRB;
     a3c:	84 e2       	ldi	r24, 0x24	; 36
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     a44:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTB;
     a48:	85 e2       	ldi	r24, 0x25	; 37
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     a50:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	cb 01       	movw	r24, r22
			}
			case PortB:
			{
				DDRx = &DDRB;
				PORTx = &PORTB;
				break;
     a5a:	08 95       	ret
			}
			case PortC:
			{
				DDRx = &DDRC;
     a5c:	87 e2       	ldi	r24, 0x27	; 39
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     a64:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTC;
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     a70:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	cb 01       	movw	r24, r22
			}
			case PortC:
			{
				DDRx = &DDRC;
				PORTx = &PORTC;
				break;
     a7a:	08 95       	ret
			}
			case PortD:
			{
				DDRx = &DDRD;
     a7c:	8a e2       	ldi	r24, 0x2A	; 42
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     a84:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTD;
     a88:	8b e2       	ldi	r24, 0x2B	; 43
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     a90:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	cb 01       	movw	r24, r22
			}
			case PortD:
			{
				DDRx = &DDRD;
				PORTx = &PORTD;
				break;
     a9a:	08 95       	ret
			}
			case PortE:
			{
				DDRx = &DDRE;
     a9c:	8d e2       	ldi	r24, 0x2D	; 45
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     aa4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTE;
     aa8:	8e e2       	ldi	r24, 0x2E	; 46
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     ab0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	cb 01       	movw	r24, r22
			}
			case PortE:
			{
				DDRx = &DDRE;
				PORTx = &PORTE;
				break;
     aba:	08 95       	ret
			}
			case PortF:
			{
				DDRx = &DDRF;
     abc:	80 e3       	ldi	r24, 0x30	; 48
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     ac4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTF;
     ac8:	81 e3       	ldi	r24, 0x31	; 49
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     ad0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	cb 01       	movw	r24, r22
			}
			case PortF:
			{
				DDRx = &DDRF;
				PORTx = &PORTF;
				break;
     ada:	08 95       	ret
			}
			case PortG:
			{
				DDRx = &DDRG;
     adc:	83 e3       	ldi	r24, 0x33	; 51
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     ae4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTG;
     ae8:	84 e3       	ldi	r24, 0x34	; 52
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     af0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	cb 01       	movw	r24, r22
			}
			case PortG:
			{
				DDRx = &DDRG;
				PORTx = &PORTG;
				break;
     afa:	08 95       	ret
			}
			case PortH:
			{
				DDRx = &DDRH;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     b04:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTH;
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     b10:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	cb 01       	movw	r24, r22
			}
			case PortH:
			{
				DDRx = &DDRH;
				PORTx = &PORTH;
				break;
     b1a:	08 95       	ret
			}
			case PortJ:
			{
				DDRx = &DDRJ;
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     b24:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTJ;
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     b30:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	cb 01       	movw	r24, r22
			}
			case PortJ:
			{
				DDRx = &DDRJ;
				PORTx = &PORTJ;
				break;
     b3a:	08 95       	ret
			}
			case PortK:
			{
				DDRx = &DDRK;
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     b44:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTK;
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     b50:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	cb 01       	movw	r24, r22
			}
			case PortK:
			{
				DDRx = &DDRK;
				PORTx = &PORTK;
				break;
     b5a:	08 95       	ret
			}
			case PortL:
			{
				DDRx = &DDRL;
     b5c:	8a e0       	ldi	r24, 0x0A	; 10
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <DDRx+0x1>
     b64:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <DDRx>
				PORTx = &PORTL;
     b68:	8b e0       	ldi	r24, 0x0B	; 11
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <PORTx+0x1>
     b70:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <PORTx>
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	cb 01       	movw	r24, r22
			}
			case PortL:
			{
				DDRx = &DDRL;
				PORTx = &PORTL;
				break;
     b7a:	08 95       	ret
	uint32_t err = NO_ERROR;
	do
	{
		if (led_port!=PortA && led_port!=PortB && led_port!=PortC && led_port!=PortD && led_port!=PortE && led_port!=PortF && led_port!=PortG && led_port!=PortH && led_port!=PortJ && led_port!=PortK && led_port!=PortL )
		{
			err=PORT_ERROR;
     b7c:	62 e0       	ldi	r22, 0x02	; 2
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	08 95       	ret
	return err;
}

uint32_t map_registers(portx led_port)
{
	uint32_t err = NO_ERROR;
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	cb 01       	movw	r24, r22
				break;
			}
		}
	}while(0);
	return err;
     b8c:	08 95       	ret

00000b8e <led_init>:
 * @return PORT_ERROR - port name wrong
 */
uint32_t map_registers(portx led_port);

uint32_t led_init (portx led_port, uint8_t led_pin)
{	
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	c8 2f       	mov	r28, r24
     b94:	d6 2f       	mov	r29, r22
	uint32_t err=NO_ERROR;
	do
	{
		if (map_registers(led_port))
     b96:	33 df       	rcall	.-410    	; 0x9fe <map_registers>
     b98:	67 2b       	or	r22, r23
     b9a:	68 2b       	or	r22, r24
     b9c:	69 2b       	or	r22, r25
     b9e:	c1 f4       	brne	.+48     	; 0xbd0 <led_init+0x42>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     ba0:	d8 30       	cpi	r29, 0x08	; 8
     ba2:	d8 f4       	brcc	.+54     	; 0xbda <led_init+0x4c>
		{
			err=PIN_ERROR;
			break;
		}
		if (led_pin>5 && led_port == PortG)
     ba4:	d6 30       	cpi	r29, 0x06	; 6
     ba6:	10 f0       	brcs	.+4      	; 0xbac <led_init+0x1e>
     ba8:	c6 30       	cpi	r28, 0x06	; 6
     baa:	e1 f0       	breq	.+56     	; 0xbe4 <led_init+0x56>
		{
			err=PIN_ERROR;
			break;
		}
		gpio_hal_pin_init(DDRx,led_pin,output);
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	6d 2f       	mov	r22, r29
     bb0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <DDRx>
     bb4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <DDRx+0x1>
     bb8:	63 db       	rcall	.-2362   	; 0x280 <gpio_hal_pin_init>
		gpio_hal_pin_set(PORTx, led_pin, 0);
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	6d 2f       	mov	r22, r29
     bbe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <PORTx>
     bc2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <PORTx+0x1>
     bc6:	c0 db       	rcall	.-2176   	; 0x348 <gpio_hal_pin_set>
 */
uint32_t map_registers(portx led_port);

uint32_t led_init (portx led_port, uint8_t led_pin)
{	
	uint32_t err=NO_ERROR;
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	cb 01       	movw	r24, r22
     bce:	0e c0       	rjmp	.+28     	; 0xbec <led_init+0x5e>
	do
	{
		if (map_registers(led_port))
		{
			err=PORT_ERROR;
     bd0:	62 e0       	ldi	r22, 0x02	; 2
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <led_init+0x5e>
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     bda:	63 e0       	ldi	r22, 0x03	; 3
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	04 c0       	rjmp	.+8      	; 0xbec <led_init+0x5e>
			break;
		}
		if (led_pin>5 && led_port == PortG)
		{
			err=PIN_ERROR;
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
		}
		gpio_hal_pin_init(DDRx,led_pin,output);
		gpio_hal_pin_set(PORTx, led_pin, 0);
	}while (0);
	return err;		
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <led_toggle>:

uint32_t led_toggle(portx led_port, uint8_t led_pin)
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	c8 2f       	mov	r28, r24
     bf8:	d6 2f       	mov	r29, r22
	uint32_t err=NO_ERROR;
	do
	{
		if (map_registers(led_port))
     bfa:	01 df       	rcall	.-510    	; 0x9fe <map_registers>
     bfc:	67 2b       	or	r22, r23
     bfe:	68 2b       	or	r22, r24
     c00:	69 2b       	or	r22, r25
     c02:	81 f4       	brne	.+32     	; 0xc24 <led_toggle+0x32>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     c04:	d8 30       	cpi	r29, 0x08	; 8
     c06:	98 f4       	brcc	.+38     	; 0xc2e <led_toggle+0x3c>
		{
			err=PIN_ERROR;
			break;
		}
		if (led_pin>5 && led_port == PortG)
     c08:	d6 30       	cpi	r29, 0x06	; 6
     c0a:	10 f0       	brcs	.+4      	; 0xc10 <led_toggle+0x1e>
     c0c:	c6 30       	cpi	r28, 0x06	; 6
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <led_toggle+0x46>
		{
			err=PIN_ERROR;
			break;
		}
		gpio_hal_pin_toggle(PORTx, led_pin);
     c10:	6d 2f       	mov	r22, r29
     c12:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <PORTx>
     c16:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <PORTx+0x1>
     c1a:	fa db       	rcall	.-2060   	; 0x410 <gpio_hal_pin_toggle>
	return err;		
}

uint32_t led_toggle(portx led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	cb 01       	movw	r24, r22
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <led_toggle+0x4e>
	do
	{
		if (map_registers(led_port))
		{
			err=PORT_ERROR;
     c24:	62 e0       	ldi	r22, 0x02	; 2
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <led_toggle+0x4e>
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     c2e:	63 e0       	ldi	r22, 0x03	; 3
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <led_toggle+0x4e>
			break;
		}
		if (led_pin>5 && led_port == PortG)
		{
			err=PIN_ERROR;
     c38:	63 e0       	ldi	r22, 0x03	; 3
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		gpio_hal_pin_toggle(PORTx, led_pin);
	}while (0);
	return err;
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <led_off>:

uint32_t led_off(portx led_port, uint8_t led_pin)
{
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	c8 2f       	mov	r28, r24
     c4c:	d6 2f       	mov	r29, r22
	uint32_t err=NO_ERROR;
	do
	{
		if (map_registers(led_port))
     c4e:	d7 de       	rcall	.-594    	; 0x9fe <map_registers>
     c50:	67 2b       	or	r22, r23
     c52:	68 2b       	or	r22, r24
     c54:	69 2b       	or	r22, r25
     c56:	89 f4       	brne	.+34     	; 0xc7a <led_off+0x34>
		{
			err=PORT_ERROR;
			break;
		}
		if (led_pin>7)
     c58:	d8 30       	cpi	r29, 0x08	; 8
     c5a:	a0 f4       	brcc	.+40     	; 0xc84 <led_off+0x3e>
		{
			err=PIN_ERROR;
			break;
		}
		if (led_pin>5 && led_port == PortG)
     c5c:	d6 30       	cpi	r29, 0x06	; 6
     c5e:	10 f0       	brcs	.+4      	; 0xc64 <led_off+0x1e>
     c60:	c6 30       	cpi	r28, 0x06	; 6
     c62:	a9 f0       	breq	.+42     	; 0xc8e <led_off+0x48>
		{
			err=PIN_ERROR;
			break;
		}
		gpio_hal_pin_set(PORTx, led_pin, 0);
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	6d 2f       	mov	r22, r29
     c68:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <PORTx>
     c6c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <PORTx+0x1>
     c70:	6b db       	rcall	.-2346   	; 0x348 <gpio_hal_pin_set>
	return err;
}

uint32_t led_off(portx led_port, uint8_t led_pin)
{
	uint32_t err=NO_ERROR;
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	cb 01       	movw	r24, r22
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <led_off+0x50>
	do
	{
		if (map_registers(led_port))
		{
			err=PORT_ERROR;
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	09 c0       	rjmp	.+18     	; 0xc96 <led_off+0x50>
			break;
		}
		if (led_pin>7)
		{
			err=PIN_ERROR;
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	04 c0       	rjmp	.+8      	; 0xc96 <led_off+0x50>
			break;
		}
		if (led_pin>5 && led_port == PortG)
		{
			err=PIN_ERROR;
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
		gpio_hal_pin_set(PORTx, led_pin, 0);
	}while (0);
	return err;
}
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <on_packet_transmission_complete>:
	}
}

void on_packet_transmission_complete(uint8_t uart_number ,uint32_t status)
{
	if(uart_number == g_uart_number)
     c9c:	81 11       	cpse	r24, r1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <on_packet_transmission_complete+0xa>
	{
		led_toggle(g_led_port, g_led_pin);
     ca0:	67 e0       	ldi	r22, 0x07	; 7
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	a6 cf       	rjmp	.-180    	; 0xbf2 <led_toggle>
     ca6:	08 95       	ret

00000ca8 <on_packet_receive_complete>:

void on_packet_receive_complete(uint8_t uart_number, packet_t * packet , PACKET_CRC_ERR_STATE_t error)
{
	
	uint8_t buffer [buffer_length] = {3, 5, 6, 10, 24};
	if(uart_number == g_uart_number && error == NO_CRC_ERROR)// && tl_packet==buffer)
     ca8:	81 11       	cpse	r24, r1
     caa:	43 c0       	rjmp	.+134    	; 0xd32 <on_packet_receive_complete+0x8a>
     cac:	41 11       	cpse	r20, r1
     cae:	41 c0       	rjmp	.+130    	; 0xd32 <on_packet_receive_complete+0x8a>
	{
		
		
			if (packet->data[0]==3 )
     cb0:	fb 01       	movw	r30, r22
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	09 f0       	breq	.+2      	; 0xcba <on_packet_receive_complete+0x12>
     cb8:	3c c0       	rjmp	.+120    	; 0xd32 <on_packet_receive_complete+0x8a>
			{
			 if (packet->data[1]==5)
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	85 30       	cpi	r24, 0x05	; 5
     cbe:	c9 f5       	brne	.+114    	; 0xd32 <on_packet_receive_complete+0x8a>
			 { 
			  if (packet->data[2]==6)
     cc0:	83 81       	ldd	r24, Z+3	; 0x03
     cc2:	86 30       	cpi	r24, 0x06	; 6
     cc4:	b1 f5       	brne	.+108    	; 0xd32 <on_packet_receive_complete+0x8a>
			  {
			   if (packet->data[3]==10)
     cc6:	84 81       	ldd	r24, Z+4	; 0x04
     cc8:	8a 30       	cpi	r24, 0x0A	; 10
     cca:	99 f5       	brne	.+102    	; 0xd32 <on_packet_receive_complete+0x8a>
			   {
				   if (packet->data[4]==24)
     ccc:	85 81       	ldd	r24, Z+5	; 0x05
     cce:	88 31       	cpi	r24, 0x18	; 24
     cd0:	81 f5       	brne	.+96     	; 0xd32 <on_packet_receive_complete+0x8a>
				   {
					  led_toggle(g_led_port, g_led_pin);
     cd2:	67 e0       	ldi	r22, 0x07	; 7
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	8d df       	rcall	.-230    	; 0xbf2 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd8:	ff ef       	ldi	r31, 0xFF	; 255
     cda:	29 e6       	ldi	r18, 0x69	; 105
     cdc:	88 e1       	ldi	r24, 0x18	; 24
     cde:	f1 50       	subi	r31, 0x01	; 1
     ce0:	20 40       	sbci	r18, 0x00	; 0
     ce2:	80 40       	sbci	r24, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <on_packet_receive_complete+0x36>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <on_packet_receive_complete+0x40>
     ce8:	00 00       	nop
					  _delay_ms(500);
					  led_toggle(g_led_port, g_led_pin);
     cea:	67 e0       	ldi	r22, 0x07	; 7
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	81 df       	rcall	.-254    	; 0xbf2 <led_toggle>
     cf0:	9f ef       	ldi	r25, 0xFF	; 255
     cf2:	e9 e6       	ldi	r30, 0x69	; 105
     cf4:	f8 e1       	ldi	r31, 0x18	; 24
     cf6:	91 50       	subi	r25, 0x01	; 1
     cf8:	e0 40       	sbci	r30, 0x00	; 0
     cfa:	f0 40       	sbci	r31, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <on_packet_receive_complete+0x4e>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <on_packet_receive_complete+0x58>
     d00:	00 00       	nop
					  _delay_ms(500);
					  led_toggle(g_led_port, g_led_pin);
     d02:	67 e0       	ldi	r22, 0x07	; 7
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	75 df       	rcall	.-278    	; 0xbf2 <led_toggle>
     d08:	2f ef       	ldi	r18, 0xFF	; 255
     d0a:	89 e6       	ldi	r24, 0x69	; 105
     d0c:	98 e1       	ldi	r25, 0x18	; 24
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	80 40       	sbci	r24, 0x00	; 0
     d12:	90 40       	sbci	r25, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <on_packet_receive_complete+0x66>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <on_packet_receive_complete+0x70>
					  _delay_ms(500);
					  led_toggle(g_led_port, g_led_pin);
     d18:	00 00       	nop
     d1a:	67 e0       	ldi	r22, 0x07	; 7
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	69 df       	rcall	.-302    	; 0xbf2 <led_toggle>
     d20:	ef ef       	ldi	r30, 0xFF	; 255
     d22:	f9 e6       	ldi	r31, 0x69	; 105
     d24:	28 e1       	ldi	r18, 0x18	; 24
     d26:	e1 50       	subi	r30, 0x01	; 1
     d28:	f0 40       	sbci	r31, 0x00	; 0
     d2a:	20 40       	sbci	r18, 0x00	; 0
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <on_packet_receive_complete+0x7e>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <on_packet_receive_complete+0x88>
     d30:	00 00       	nop
     d32:	08 95       	ret

00000d34 <on_button_pressed>:
	}	
}


void on_button_pressed(portx buttonPort, uint8_t buttonPin, btn_state buttonState)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	63 97       	sbiw	r28, 0x13	; 19
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
	packet_t temp;
	packet_t * packet;
	packet=&temp;
	uint8_t len = 5;
	uint8_t arr[5]={3, 5, 6, 10, 24};
     d48:	95 e0       	ldi	r25, 0x05	; 5
     d4a:	e0 e0       	ldi	r30, 0x00	; 0
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	de 01       	movw	r26, r28
     d50:	1f 96       	adiw	r26, 0x0f	; 15
     d52:	01 90       	ld	r0, Z+
     d54:	0d 92       	st	X+, r0
     d56:	9a 95       	dec	r25
     d58:	e1 f7       	brne	.-8      	; 0xd52 <on_button_pressed+0x1e>
	
 	packet->length= len;
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	99 83       	std	Y+1, r25	; 0x01
	 memcpy(packet->data,arr,len);
     d5e:	fe 01       	movw	r30, r28
     d60:	3f 96       	adiw	r30, 0x0f	; 15
     d62:	de 01       	movw	r26, r28
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	01 90       	ld	r0, Z+
     d68:	0d 92       	st	X+, r0
     d6a:	9a 95       	dec	r25
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <on_button_pressed+0x32>
	//hal_uart_send(0, &(packet->data), len);
	//led_toggle(g_led_port, g_led_pin);	
	if( (buttonPort == g_btn_port) && (buttonPin == g_btn_pin) && (buttonState == pressed) )
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	49 f4       	brne	.+18     	; 0xd84 <on_button_pressed+0x50>
     d72:	61 11       	cpse	r22, r1
     d74:	07 c0       	rjmp	.+14     	; 0xd84 <on_button_pressed+0x50>
     d76:	41 11       	cpse	r20, r1
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <on_button_pressed+0x50>
	{
		
		uint32_t err=0;
		err = ph_transmit_packet(g_uart_number, packet);
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	b0 d0       	rcall	.+352    	; 0xee4 <ph_transmit_packet>
		//hal_uart_send(0, &err, 4);
		
	}
}
     d84:	63 96       	adiw	r28, 0x13	; 19
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <main>:
void on_packet_receive_complete(uint8_t uart_number, packet_t * packet , PACKET_CRC_ERR_STATE_t error);
void on_packet_transmission_complete(uint8_t uart_number ,uint32_t status);


int main(void)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <main+0x6>
     d9c:	1f 92       	push	r1
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	btn_init (g_btn_port,g_btn_pin);
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	03 da       	rcall	.-3066   	; 0x1ae <btn_init>
	btn_set_event_callback(on_button_pressed);
     da8:	8a e9       	ldi	r24, 0x9A	; 154
     daa:	96 e0       	ldi	r25, 0x06	; 6
     dac:	5a da       	rcall	.-2892   	; 0x262 <btn_set_event_callback>
	PH_CALLBACKS_t callbacks;
	callbacks.tx_complete_cb = on_packet_transmission_complete;
     dae:	8e e4       	ldi	r24, 0x4E	; 78
     db0:	96 e0       	ldi	r25, 0x06	; 6
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
	callbacks.rx_complete_cb= on_packet_receive_complete;
     db6:	84 e5       	ldi	r24, 0x54	; 84
     db8:	96 e0       	ldi	r25, 0x06	; 6
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
	ph_init(g_uart_number, &callbacks);
     dbe:	be 01       	movw	r22, r28
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	16 d0       	rcall	.+44     	; 0xdf4 <ph_init>
	led_init (g_led_port, g_led_pin);
     dc8:	67 e0       	ldi	r22, 0x07	; 7
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	e0 de       	rcall	.-576    	; 0xb8e <led_init>
	led_off (g_led_port, g_led_pin);
     dce:	67 e0       	ldi	r22, 0x07	; 7
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	39 df       	rcall	.-398    	; 0xc46 <led_off>
     dd4:	ff cf       	rjmp	.-2      	; 0xdd4 <main+0x3e>

00000dd6 <when_transmission_complete>:
     dd6:	e8 2f       	mov	r30, r24
}

PH_STATUS_t ph_get_status(uint8_t uart_number)
{
	return g_ph_status[uart_number]; 
}
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e9 5d       	subi	r30, 0xD9	; 217
     ddc:	fd 4f       	sbci	r31, 0xFD	; 253
     dde:	10 82       	st	Z, r1
     de0:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <g_app_callbacks>
     de4:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <g_app_callbacks+0x1>
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	19 95       	eicall
     df2:	08 95       	ret

00000df4 <ph_init>:
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	f8 2e       	mov	r15, r24
     dfe:	eb 01       	movw	r28, r22
     e00:	02 e0       	ldi	r16, 0x02	; 2
     e02:	28 e0       	ldi	r18, 0x08	; 8
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	55 e2       	ldi	r21, 0x25	; 37
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	29 d4       	rcall	.+2130   	; 0x1660 <hal_uart_init>
     e0e:	61 15       	cp	r22, r1
     e10:	71 05       	cpc	r23, r1
     e12:	81 05       	cpc	r24, r1
     e14:	91 05       	cpc	r25, r1
     e16:	a1 f5       	brne	.+104    	; 0xe80 <ph_init+0x8c>
     e18:	88 81       	ld	r24, Y
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
     e1c:	89 2b       	or	r24, r25
     e1e:	39 f1       	breq	.+78     	; 0xe6e <ph_init+0x7a>
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	41 f1       	breq	.+80     	; 0xe78 <ph_init+0x84>
     e28:	ed e0       	ldi	r30, 0x0D	; 13
     e2a:	f2 e0       	ldi	r31, 0x02	; 2
     e2c:	93 83       	std	Z+3, r25	; 0x03
     e2e:	82 83       	std	Z+2, r24	; 0x02
     e30:	88 81       	ld	r24, Y
     e32:	99 81       	ldd	r25, Y+1	; 0x01
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	6b ee       	ldi	r22, 0xEB	; 235
     e3a:	76 e0       	ldi	r23, 0x06	; 6
     e3c:	8b ec       	ldi	r24, 0xCB	; 203
     e3e:	97 e0       	ldi	r25, 0x07	; 7
     e40:	a9 d1       	rcall	.+850    	; 0x1194 <hal_uart_set_callbacks>
     e42:	61 15       	cp	r22, r1
     e44:	71 05       	cpc	r23, r1
     e46:	81 05       	cpc	r24, r1
     e48:	91 05       	cpc	r25, r1
     e4a:	d1 f4       	brne	.+52     	; 0xe80 <ph_init+0x8c>
     e4c:	ef 2d       	mov	r30, r15
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	e9 5d       	subi	r30, 0xD9	; 217
     e52:	fd 4f       	sbci	r31, 0xFD	; 253
     e54:	10 82       	st	Z, r1
     e56:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
     e5a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <g_rx_buff_idx>
     e5e:	ec e2       	ldi	r30, 0x2C	; 44
     e60:	f2 e0       	ldi	r31, 0x02	; 2
     e62:	22 e0       	ldi	r18, 0x02	; 2
     e64:	20 83       	st	Z, r18
     e66:	21 83       	std	Z+1, r18	; 0x01
     e68:	22 83       	std	Z+2, r18	; 0x02
     e6a:	23 83       	std	Z+3, r18	; 0x03
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <ph_init+0x8c>
     e6e:	6c e0       	ldi	r22, 0x0C	; 12
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <ph_init+0x8c>
     e78:	6c e0       	ldi	r22, 0x0C	; 12
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	08 95       	ret

00000e8a <crc16>:
uint16_t crc16(uint8_t* data_p, uint8_t length)
{
	unsigned char x;
	uint16_t crc = CRC_INIT;

	while (length--)
     e8a:	7f ef       	ldi	r23, 0xFF	; 255
     e8c:	76 0f       	add	r23, r22
     e8e:	66 23       	and	r22, r22
     e90:	29 f1       	breq	.+74     	; 0xedc <crc16+0x52>
     e92:	e8 2f       	mov	r30, r24
     e94:	f9 2f       	mov	r31, r25
     e96:	4f ef       	ldi	r20, 0xFF	; 255
     e98:	5f ef       	ldi	r21, 0xFF	; 255
	{
		x = crc >> 8 ^ *data_p++;
     e9a:	21 91       	ld	r18, Z+
     e9c:	25 27       	eor	r18, r21
		x ^= x>>4;
     e9e:	32 2f       	mov	r19, r18
     ea0:	32 95       	swap	r19
     ea2:	3f 70       	andi	r19, 0x0F	; 15
     ea4:	92 2f       	mov	r25, r18
     ea6:	93 27       	eor	r25, r19
		crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
     ea8:	29 2f       	mov	r18, r25
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	54 2f       	mov	r21, r20
     eae:	44 27       	eor	r20, r20
     eb0:	42 27       	eor	r20, r18
     eb2:	53 27       	eor	r21, r19
     eb4:	c9 01       	movw	r24, r18
     eb6:	98 2f       	mov	r25, r24
     eb8:	88 27       	eor	r24, r24
     eba:	92 95       	swap	r25
     ebc:	90 7f       	andi	r25, 0xF0	; 240
     ebe:	48 27       	eor	r20, r24
     ec0:	59 27       	eor	r21, r25
     ec2:	22 0f       	add	r18, r18
     ec4:	33 1f       	adc	r19, r19
     ec6:	22 95       	swap	r18
     ec8:	32 95       	swap	r19
     eca:	30 7f       	andi	r19, 0xF0	; 240
     ecc:	32 27       	eor	r19, r18
     ece:	20 7f       	andi	r18, 0xF0	; 240
     ed0:	32 27       	eor	r19, r18
     ed2:	42 27       	eor	r20, r18
     ed4:	53 27       	eor	r21, r19
uint16_t crc16(uint8_t* data_p, uint8_t length)
{
	unsigned char x;
	uint16_t crc = CRC_INIT;

	while (length--)
     ed6:	71 50       	subi	r23, 0x01	; 1
     ed8:	00 f7       	brcc	.-64     	; 0xe9a <crc16+0x10>
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <crc16+0x56>
}

uint16_t crc16(uint8_t* data_p, uint8_t length)
{
	unsigned char x;
	uint16_t crc = CRC_INIT;
     edc:	4f ef       	ldi	r20, 0xFF	; 255
     ede:	5f ef       	ldi	r21, 0xFF	; 255
		x = crc >> 8 ^ *data_p++;
		x ^= x>>4;
		crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
	}
	return crc;
     ee0:	ca 01       	movw	r24, r20
     ee2:	08 95       	ret

00000ee4 <ph_transmit_packet>:
	} while (0);
	return err;
}

uint32_t ph_transmit_packet(uint8_t uart_number, packet_t * packet)
{
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
	uint32_t err = NO_ERROR;
	do
	{
		if (g_ph_status [uart_number] == PH_STATUS_TRANSMITTING)
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f9 01       	movw	r30, r18
     ef6:	e9 5d       	subi	r30, 0xD9	; 217
     ef8:	fd 4f       	sbci	r31, 0xFD	; 253
     efa:	90 81       	ld	r25, Z
     efc:	91 30       	cpi	r25, 0x01	; 1
     efe:	09 f4       	brne	.+2      	; 0xf02 <ph_transmit_packet+0x1e>
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <ph_transmit_packet+0x9c>
		{
			err = UART_ERROR_TX_BUSY;
			break;
		}
		g_ph_status [uart_number] = PH_STATUS_TRANSMITTING;
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	f9 01       	movw	r30, r18
     f06:	e9 5d       	subi	r30, 0xD9	; 217
     f08:	fd 4f       	sbci	r31, 0xFD	; 253
     f0a:	90 83       	st	Z, r25
		if (uart_number < 0 || uart_number > 3)
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	48 f0       	brcs	.+18     	; 0xf22 <ph_transmit_packet+0x3e>
		{
			err=UNSUPPORTED_UART;
			g_ph_status [uart_number] = PH_STATUS_READY_TO_SEND;
     f10:	f9 01       	movw	r30, r18
     f12:	e9 5d       	subi	r30, 0xD9	; 217
     f14:	fd 4f       	sbci	r31, 0xFD	; 253
     f16:	10 82       	st	Z, r1
			break;
		}
		g_ph_status [uart_number] = PH_STATUS_TRANSMITTING;
		if (uart_number < 0 || uart_number > 3)
		{
			err=UNSUPPORTED_UART;
     f18:	65 e0       	ldi	r22, 0x05	; 5
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
			g_ph_status [uart_number] = PH_STATUS_READY_TO_SEND;
			break;
     f20:	33 c0       	rjmp	.+102    	; 0xf88 <ph_transmit_packet+0xa4>
		}
		if (packet->length > MAX_PACKET_SIZE)
     f22:	fb 01       	movw	r30, r22
     f24:	90 81       	ld	r25, Z
     f26:	9e 30       	cpi	r25, 0x0E	; 14
     f28:	48 f0       	brcs	.+18     	; 0xf3c <ph_transmit_packet+0x58>
		{
			err=PACKET_BODY_LENGTH_ERROR;
			g_ph_status[uart_number] = PH_STATUS_READY_TO_SEND;
     f2a:	f9 01       	movw	r30, r18
     f2c:	e9 5d       	subi	r30, 0xD9	; 217
     f2e:	fd 4f       	sbci	r31, 0xFD	; 253
     f30:	10 82       	st	Z, r1
			g_ph_status [uart_number] = PH_STATUS_READY_TO_SEND;
			break;
		}
		if (packet->length > MAX_PACKET_SIZE)
		{
			err=PACKET_BODY_LENGTH_ERROR;
     f32:	6d e0       	ldi	r22, 0x0D	; 13
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
			g_ph_status[uart_number] = PH_STATUS_READY_TO_SEND;
			break;
     f3a:	26 c0       	rjmp	.+76     	; 0xf88 <ph_transmit_packet+0xa4>
     f3c:	8b 01       	movw	r16, r22
     f3e:	c8 2f       	mov	r28, r24
		}
		g_tx_buff[4] = packet->length;
     f40:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <g_tx_buff+0x4>
		memcpy(g_tx_buff+5, &(packet->data), packet->length);
     f44:	7b 01       	movw	r14, r22
     f46:	ff ef       	ldi	r31, 0xFF	; 255
     f48:	ef 1a       	sub	r14, r31
     f4a:	ff 0a       	sbc	r15, r31
     f4c:	fb 01       	movw	r30, r22
     f4e:	40 81       	ld	r20, Z
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	b7 01       	movw	r22, r14
     f54:	81 e3       	ldi	r24, 0x31	; 49
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	5d d6       	rcall	.+3258   	; 0x1c14 <memcpy>
		uint8_t *CRC_arr;
		uint16_t CRC_val= crc16(&packet->data, packet->length);
     f5a:	f8 01       	movw	r30, r16
     f5c:	d0 81       	ld	r29, Z
     f5e:	6d 2f       	mov	r22, r29
     f60:	c7 01       	movw	r24, r14
     f62:	93 df       	rcall	.-218    	; 0xe8a <crc16>
		CRC_arr = &CRC_val;
		memcpy(g_tx_buff+5+(packet->length), CRC_arr, 2);
     f64:	ed 2f       	mov	r30, r29
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	ef 5c       	subi	r30, 0xCF	; 207
     f6a:	fd 4f       	sbci	r31, 0xFD	; 253
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
		err = hal_uart_send(uart_number, &g_tx_buff, (packet->length)+7);
     f70:	f8 01       	movw	r30, r16
     f72:	40 81       	ld	r20, Z
     f74:	49 5f       	subi	r20, 0xF9	; 249
     f76:	6c e2       	ldi	r22, 0x2C	; 44
     f78:	72 e0       	ldi	r23, 0x02	; 2
     f7a:	8c 2f       	mov	r24, r28
     f7c:	13 d2       	rcall	.+1062   	; 0x13a4 <hal_uart_send>
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <ph_transmit_packet+0xa4>
	uint32_t err = NO_ERROR;
	do
	{
		if (g_ph_status [uart_number] == PH_STATUS_TRANSMITTING)
		{
			err = UART_ERROR_TX_BUSY;
     f80:	69 e0       	ldi	r22, 0x09	; 9
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
		err = hal_uart_send(uart_number, &g_tx_buff, (packet->length)+7);
		
		
	} while (0); 
	return err;
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	08 95       	ret

00000f96 <when_byte_received>:
}



void when_byte_received(uint8_t uart_number, uint8_t data, bool parity_error)
{
     f96:	26 2f       	mov	r18, r22
	switch (g_packet_collector_state)
     f98:	40 91 40 02 	lds	r20, 0x0240	; 0x800240 <g_packet_collector_state>
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	48 30       	cpi	r20, 0x08	; 8
     fa0:	51 05       	cpc	r21, r1
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <when_byte_received+0x10>
     fa4:	f6 c0       	rjmp	.+492    	; 0x1192 <when_byte_received+0x1fc>
     fa6:	98 2f       	mov	r25, r24
     fa8:	fa 01       	movw	r30, r20
     faa:	88 27       	eor	r24, r24
     fac:	e3 58       	subi	r30, 0x83	; 131
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	28 c6       	rjmp	.+3152   	; 0x1c04 <__tablejump2__>
	{
		 case PACKET_COLLECTOR_STATE_STATE_STX_1:
		 {
			 if (data == STX1)
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <when_byte_received+0x24>
     fb8:	ec c0       	rjmp	.+472    	; 0x1192 <when_byte_received+0x1fc>
			 {
				 g_packet_collector_uartnum = uart_number;
     fba:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
				 g_crc_err = NO_CRC_ERROR;
     fbe:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <g_crc_err>
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
     fc8:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_STX_2:
		 {
			 if (data == STX2 && uart_number == g_packet_collector_uartnum)
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	71 f4       	brne	.+28     	; 0xfea <when_byte_received+0x54>
     fce:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
     fd2:	98 13       	cpse	r25, r24
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <when_byte_received+0x48>
			 {
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_3;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
     fdc:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
				 {
					 g_packet_collector_uartnum = uart_number;
     fde:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
     fe8:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
     fea:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
     fee:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
     ff2:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_STX_3:
		 {
			 if (data == STX3 && uart_number == g_packet_collector_uartnum)
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	71 f4       	brne	.+28     	; 0x1014 <when_byte_received+0x7e>
     ff8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
     ffc:	98 13       	cpse	r25, r24
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <when_byte_received+0x72>
			 {
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_4;
    1000:	83 e0       	ldi	r24, 0x03	; 3
    1002:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1006:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
				 {
					 g_packet_collector_uartnum = uart_number;
    1008:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1012:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    1014:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    1018:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    101c:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_STX_4:
		 {
			 if (data == STX4 && uart_number == g_packet_collector_uartnum)
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	71 f4       	brne	.+28     	; 0x103e <when_byte_received+0xa8>
    1022:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    1026:	98 13       	cpse	r25, r24
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <when_byte_received+0x9c>
			 {
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_LENGTH;
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1030:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
				 {
					 g_packet_collector_uartnum = uart_number;
    1032:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    103c:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    103e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    1042:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    1046:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_LENGTH:
		 {
			 if (data < MAX_PACKET_SIZE && data != 0 && uart_number == g_packet_collector_uartnum)
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	82 0f       	add	r24, r18
    104c:	8c 30       	cpi	r24, 0x0C	; 12
    104e:	60 f4       	brcc	.+24     	; 0x1068 <when_byte_received+0xd2>
    1050:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    1054:	98 13       	cpse	r25, r24
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <when_byte_received+0xd2>
			 {
				 g_rx_buff_idx = 0;
    1058:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <g_rx_buff_idx>
				 g_rx_packet_buffer.length = data;
    105c:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <g_rx_packet_buffer>
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_DATA;
    1060:	85 e0       	ldi	r24, 0x05	; 5
    1062:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1066:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 f4       	brne	.+12     	; 0x1078 <when_byte_received+0xe2>
				 {
					 g_packet_collector_uartnum = uart_number;
    106c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1076:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    1078:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    107c:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    1080:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_DATA:
		 {
			 if (g_rx_buff_idx < (g_rx_packet_buffer.length-1) && uart_number == g_packet_collector_uartnum)
    1082:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <g_rx_buff_idx>
    1086:	e8 2f       	mov	r30, r24
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <g_rx_packet_buffer>
    108e:	46 2f       	mov	r20, r22
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	41 50       	subi	r20, 0x01	; 1
    1094:	51 09       	sbc	r21, r1
    1096:	e4 17       	cp	r30, r20
    1098:	f5 07       	cpc	r31, r21
    109a:	5c f4       	brge	.+22     	; 0x10b2 <when_byte_received+0x11c>
    109c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    10a0:	93 13       	cpse	r25, r19
    10a2:	1e c0       	rjmp	.+60     	; 0x10e0 <when_byte_received+0x14a>
			 {
				 g_rx_packet_buffer.data[g_rx_buff_idx++] = data;
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <g_rx_buff_idx>
    10aa:	ef 5b       	subi	r30, 0xBF	; 191
    10ac:	fd 4f       	sbci	r31, 0xFD	; 253
    10ae:	21 83       	std	Z+1, r18	; 0x01
    10b0:	08 95       	ret
			 }
			 else if (g_rx_buff_idx == (g_rx_packet_buffer.length-1) && uart_number == g_packet_collector_uartnum)
    10b2:	e4 17       	cp	r30, r20
    10b4:	f5 07       	cpc	r31, r21
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <when_byte_received+0x14a>
    10b8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    10bc:	98 13       	cpse	r25, r24
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <when_byte_received+0x14a>
			 {
				 g_rx_packet_buffer.data[g_rx_buff_idx] = data;
    10c0:	ef 5b       	subi	r30, 0xBF	; 191
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	21 83       	std	Z+1, r18	; 0x01
				 g_rx_buff_idx = 0;
    10c6:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <g_rx_buff_idx>
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_CRC_L;
    10ca:	86 e0       	ldi	r24, 0x06	; 6
    10cc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
				 g_cal_crc = crc16(&g_rx_packet_buffer.data, g_rx_packet_buffer.length);
    10d0:	82 e4       	ldi	r24, 0x42	; 66
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	da de       	rcall	.-588    	; 0xe8a <crc16>
    10d6:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <g_cal_crc+0x1>
    10da:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <g_cal_crc>
    10de:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 f4       	brne	.+12     	; 0x10f0 <when_byte_received+0x15a>
				 {
					 g_packet_collector_uartnum = uart_number;
    10e4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    10ee:	08 95       	ret
					 
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    10f0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    10f4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    10f8:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_CRC_L:
		 {
			 if (uart_number == g_packet_collector_uartnum)
    10fa:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    10fe:	98 13       	cpse	r25, r24
    1100:	10 c0       	rjmp	.+32     	; 0x1122 <when_byte_received+0x18c>
			 {
				 if (data != (0x00FF & g_cal_crc))
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <g_cal_crc>
    1108:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <g_cal_crc+0x1>
    110c:	99 27       	eor	r25, r25
    110e:	28 17       	cp	r18, r24
    1110:	39 07       	cpc	r19, r25
    1112:	19 f0       	breq	.+6      	; 0x111a <when_byte_received+0x184>
				 {
					 g_crc_err=CRC_ERROR_DETECTED;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <g_crc_err>
				 }
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_CRC_H;
    111a:	87 e0       	ldi	r24, 0x07	; 7
    111c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1120:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 f4       	brne	.+12     	; 0x1132 <when_byte_received+0x19c>
				 {
					 g_packet_collector_uartnum = uart_number;
    1126:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1130:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    1132:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    1136:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    113a:	08 95       	ret
			 }
			 break;
		 }
		 case PACKET_COLLECTOR_STATE_STATE_CRC_H:
		 {
			 if (uart_number == g_packet_collector_uartnum)
    113c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <g_packet_collector_uartnum>
    1140:	98 13       	cpse	r25, r24
    1142:	1b c0       	rjmp	.+54     	; 0x117a <when_byte_received+0x1e4>
			 {
				 if (data != ((0xFF00 & g_cal_crc)>>8))
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <g_cal_crc+0x1>
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	24 17       	cp	r18, r20
    114e:	35 07       	cpc	r19, r21
    1150:	19 f0       	breq	.+6      	; 0x1158 <when_byte_received+0x1c2>
				 {
					 g_crc_err=CRC_ERROR_DETECTED;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <g_crc_err>
				 }
				 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    1158:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
				 if (g_app_callbacks.rx_complete_cb != NULL)
    115c:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <g_app_callbacks+0x2>
    1160:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <g_app_callbacks+0x3>
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	31 f0       	breq	.+12     	; 0x1174 <when_byte_received+0x1de>
				 {
					 g_app_callbacks.rx_complete_cb(uart_number,&g_rx_packet_buffer,g_crc_err);
    1168:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <g_crc_err>
    116c:	61 e4       	ldi	r22, 0x41	; 65
    116e:	72 e0       	ldi	r23, 0x02	; 2
    1170:	89 2f       	mov	r24, r25
    1172:	19 95       	eicall
				 }
				 g_crc_err=NO_CRC_ERROR;
    1174:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <g_crc_err>
    1178:	08 95       	ret
			 }
			 else
			 {
				 if (data == STX1)
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 f4       	brne	.+12     	; 0x118a <when_byte_received+0x1f4>
				 {
					 g_packet_collector_uartnum = uart_number;
    117e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_2;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_packet_collector_state>
    1188:	08 95       	ret
				 }
				 else
				 {
					 g_packet_collector_uartnum = NULL;
    118a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <g_packet_collector_uartnum>
					 g_packet_collector_state = PACKET_COLLECTOR_STATE_STATE_STX_1;
    118e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <g_packet_collector_state>
    1192:	08 95       	ret

00001194 <hal_uart_set_callbacks>:
uint32_t hal_uart_set_callbacks(on_byte_received obr, on_transmission_complete otc)
{	
	uint32_t err = NO_ERROR;
	do 
	{
		if (obr == NULL || otc == NULL)
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	79 f0       	breq	.+30     	; 0x11b6 <hal_uart_set_callbacks+0x22>
    1198:	61 15       	cp	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	89 f0       	breq	.+34     	; 0x11c0 <hal_uart_set_callbacks+0x2c>
		{
			err=DRIV_CALLBACK_MISSING;
			break;
		}
		g_on_byte_received = obr;
    119e:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <g_on_byte_received+0x1>
    11a2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <g_on_byte_received>
		g_on_transmission_complete = otc;
    11a6:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <g_on_transmission_complete+0x1>
    11aa:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <g_on_transmission_complete>
	return err;
}

uint32_t hal_uart_set_callbacks(on_byte_received obr, on_transmission_complete otc)
{	
	uint32_t err = NO_ERROR;
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	cb 01       	movw	r24, r22
    11b4:	08 95       	ret
	do 
	{
		if (obr == NULL || otc == NULL)
		{
			err=DRIV_CALLBACK_MISSING;
    11b6:	68 e0       	ldi	r22, 0x08	; 8
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	08 95       	ret
    11c0:	68 e0       	ldi	r22, 0x08	; 8
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
		g_on_byte_received = obr;
		g_on_transmission_complete = otc;
	}while (0);
		
	return err;
}
    11c8:	08 95       	ret

000011ca <map_uart_registers>:
uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
	do 
	{	
		if (uart_number > 3)
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <map_uart_registers+0x6>
    11ce:	aa c0       	rjmp	.+340    	; 0x1324 <map_uart_registers+0x15a>
		{
			err = UNSUPPORTED_UART;
			break;
		}
		
		switch (uart_number)
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	81 f1       	breq	.+96     	; 0x1234 <map_uart_registers+0x6a>
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <map_uart_registers+0x1a>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	09 f4       	brne	.+2      	; 0x11dc <map_uart_registers+0x12>
    11da:	54 c0       	rjmp	.+168    	; 0x1284 <map_uart_registers+0xba>
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	09 f4       	brne	.+2      	; 0x11e2 <map_uart_registers+0x18>
    11e0:	79 c0       	rjmp	.+242    	; 0x12d4 <map_uart_registers+0x10a>
    11e2:	a5 c0       	rjmp	.+330    	; 0x132e <map_uart_registers+0x164>
		{
			case 0:
			{
				UCSRnA = &UCSR0A;
    11e4:	80 ec       	ldi	r24, 0xC0	; 192
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <UCSRnA+0x1>
    11ec:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <UCSRnA>
				UCSRnB = &UCSR0B;
    11f0:	81 ec       	ldi	r24, 0xC1	; 193
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <UCSRnB+0x1>
    11f8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <UCSRnB>
				UCSRnC = &UCSR0C;
    11fc:	82 ec       	ldi	r24, 0xC2	; 194
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <UCSRnC+0x1>
    1204:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <UCSRnC>
				UBRRnL = &UBRR0L;
    1208:	84 ec       	ldi	r24, 0xC4	; 196
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <UBRRnL+0x1>
    1210:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <UBRRnL>
				UBRRnH = &UBRR0H;
    1214:	85 ec       	ldi	r24, 0xC5	; 197
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <UBRRnH+0x1>
    121c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <UBRRnH>
				UDRn = &UDR0;
    1220:	86 ec       	ldi	r24, 0xC6	; 198
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UDRn+0x1>
    1228:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UDRn>
	sei();
}

uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR0B;
				UCSRnC = &UCSR0C;
				UBRRnL = &UBRR0L;
				UBRRnH = &UBRR0H;
				UDRn = &UDR0;
				break;
    1232:	08 95       	ret
			}
			case 1:
			{
				UCSRnA = &UCSR1A;
    1234:	88 ec       	ldi	r24, 0xC8	; 200
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <UCSRnA+0x1>
    123c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <UCSRnA>
				UCSRnB = &UCSR1B;
    1240:	89 ec       	ldi	r24, 0xC9	; 201
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <UCSRnB+0x1>
    1248:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <UCSRnB>
				UCSRnC = &UCSR1C;
    124c:	8a ec       	ldi	r24, 0xCA	; 202
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <UCSRnC+0x1>
    1254:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <UCSRnC>
				UBRRnL = &UBRR1L;
    1258:	8c ec       	ldi	r24, 0xCC	; 204
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <UBRRnL+0x1>
    1260:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <UBRRnL>
				UBRRnH = &UBRR1H;
    1264:	8d ec       	ldi	r24, 0xCD	; 205
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <UBRRnH+0x1>
    126c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <UBRRnH>
				UDRn = &UDR1;
    1270:	8e ec       	ldi	r24, 0xCE	; 206
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UDRn+0x1>
    1278:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UDRn>
	sei();
}

uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR1B;
				UCSRnC = &UCSR1C;
				UBRRnL = &UBRR1L;
				UBRRnH = &UBRR1H;
				UDRn = &UDR1;
				break;
    1282:	08 95       	ret
			}
			case 2:
			{
				UCSRnA = &UCSR2A;
    1284:	80 ed       	ldi	r24, 0xD0	; 208
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <UCSRnA+0x1>
    128c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <UCSRnA>
				UCSRnB = &UCSR2B;
    1290:	81 ed       	ldi	r24, 0xD1	; 209
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <UCSRnB+0x1>
    1298:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <UCSRnB>
				UCSRnC = &UCSR2C;
    129c:	82 ed       	ldi	r24, 0xD2	; 210
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <UCSRnC+0x1>
    12a4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <UCSRnC>
				UBRRnL = &UBRR2L;
    12a8:	84 ed       	ldi	r24, 0xD4	; 212
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <UBRRnL+0x1>
    12b0:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <UBRRnL>
				UBRRnH = &UBRR2H;
    12b4:	85 ed       	ldi	r24, 0xD5	; 213
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <UBRRnH+0x1>
    12bc:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <UBRRnH>
				UDRn = &UDR2;
    12c0:	86 ed       	ldi	r24, 0xD6	; 214
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UDRn+0x1>
    12c8:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UDRn>
	sei();
}

uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR2B;
				UCSRnC = &UCSR2C;
				UBRRnL = &UBRR2L;
				UBRRnH = &UBRR2H;
				UDRn = &UDR2;
				break;
    12d2:	08 95       	ret
			}
			case 3:
			{
				UCSRnA = &UCSR3A;
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <UCSRnA+0x1>
    12dc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <UCSRnA>
				UCSRnB = &UCSR3B;
    12e0:	81 e3       	ldi	r24, 0x31	; 49
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <UCSRnB+0x1>
    12e8:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <UCSRnB>
				UCSRnC = &UCSR3C;
    12ec:	82 e3       	ldi	r24, 0x32	; 50
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <UCSRnC+0x1>
    12f4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <UCSRnC>
				UBRRnL = &UBRR3L;
    12f8:	84 e3       	ldi	r24, 0x34	; 52
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <UBRRnL+0x1>
    1300:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <UBRRnL>
				UBRRnH = &UBRR3H;
    1304:	85 e3       	ldi	r24, 0x35	; 53
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <UBRRnH+0x1>
    130c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <UBRRnH>
				UDRn = &UDR3;
    1310:	86 e3       	ldi	r24, 0x36	; 54
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <UDRn+0x1>
    1318:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UDRn>
	sei();
}

uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	cb 01       	movw	r24, r22
				UCSRnB = &UCSR3B;
				UCSRnC = &UCSR3C;
				UBRRnL = &UBRR3L;
				UBRRnH = &UBRR3H;
				UDRn = &UDR3;
				break;
    1322:	08 95       	ret
	uint32_t err = NO_ERROR;
	do 
	{	
		if (uart_number > 3)
		{
			err = UNSUPPORTED_UART;
    1324:	65 e0       	ldi	r22, 0x05	; 5
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	08 95       	ret
	sei();
}

uint32_t map_uart_registers(uint8_t uart_number)
{
	uint32_t err = NO_ERROR;
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	cb 01       	movw	r24, r22
			}
		}
	} while (0);
		
	return err;
}
    1334:	08 95       	ret

00001336 <on_trasmit_buffer_empty>:

/////////////////////////Private Functions////////////////////

void on_trasmit_buffer_empty (uint8_t uart_number)
{	
	cli();
    1336:	f8 94       	cli
	map_uart_registers(uart_number);
    1338:	48 df       	rcall	.-368    	; 0x11ca <map_uart_registers>
	if (g_tx_buff_idx < g_bytes_to_be_tx  && g_tx_busy)
    133a:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <g_tx_buff_idx>
    133e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_bytes_to_be_tx>
    1342:	e8 17       	cp	r30, r24
    1344:	00 f5       	brcc	.+64     	; 0x1386 <on_trasmit_buffer_empty+0x50>
    1346:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <g_tx_busy>
    134a:	88 23       	and	r24, r24
    134c:	49 f1       	breq	.+82     	; 0x13a0 <on_trasmit_buffer_empty+0x6a>
	{	
		if ( (*UCSRnA) & (1<<UDREn))
    134e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <UCSRnA>
    1352:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <UCSRnA+0x1>
    1356:	8c 91       	ld	r24, X
    1358:	85 ff       	sbrs	r24, 5
    135a:	22 c0       	rjmp	.+68     	; 0x13a0 <on_trasmit_buffer_empty+0x6a>
		{
			*UDRn = g_internal_tx_buff[g_tx_buff_idx++];
    135c:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <UDRn>
    1360:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <UDRn+0x1>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	8e 0f       	add	r24, r30
    1368:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <g_tx_buff_idx>
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ef 5a       	subi	r30, 0xAF	; 175
    1370:	fd 4f       	sbci	r31, 0xFD	; 253
    1372:	80 81       	ld	r24, Z
    1374:	8c 93       	st	X, r24
			(*UCSRnA) &= ~(1<<UDREn);
    1376:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <UCSRnA>
    137a:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <UCSRnA+0x1>
    137e:	80 81       	ld	r24, Z
    1380:	8f 7d       	andi	r24, 0xDF	; 223
    1382:	80 83       	st	Z, r24
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <on_trasmit_buffer_empty+0x6a>
		}
	}
	else if (g_tx_buff_idx == g_bytes_to_be_tx  && g_tx_busy)
    1386:	e8 13       	cpse	r30, r24
    1388:	0b c0       	rjmp	.+22     	; 0x13a0 <on_trasmit_buffer_empty+0x6a>
    138a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <g_tx_busy>
    138e:	88 23       	and	r24, r24
    1390:	39 f0       	breq	.+14     	; 0x13a0 <on_trasmit_buffer_empty+0x6a>
	{
		(*UCSRnB) &= ~(1<<UDRIEn); //disable Tx buffer empty interrupt
    1392:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1396:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    139a:	80 81       	ld	r24, Z
    139c:	8f 7d       	andi	r24, 0xDF	; 223
    139e:	80 83       	st	Z, r24
	}
	sei();
    13a0:	78 94       	sei
    13a2:	08 95       	ret

000013a4 <hal_uart_send>:
		
	return err;
}

uint32_t hal_uart_send(uint8_t uart_number, uint8_t *tx_buffer, uint8_t length)
{	
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	d8 2f       	mov	r29, r24
    13ae:	8b 01       	movw	r16, r22
    13b0:	c4 2f       	mov	r28, r20
	uint32_t err = NO_ERROR;
	do 
	{	
		if(length == 0)
    13b2:	41 11       	cpse	r20, r1
    13b4:	0c c0       	rjmp	.+24     	; 0x13ce <hal_uart_send+0x2a>
		{
			err = TX_ARRAY_LENGTH_ZERO_WARNING;
			if (g_on_transmission_complete != NULL)
    13b6:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <g_on_transmission_complete>
    13ba:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <g_on_transmission_complete+0x1>
    13be:	30 97       	sbiw	r30, 0x00	; 0
    13c0:	61 f1       	breq	.+88     	; 0x141a <hal_uart_send+0x76>
			{
				g_on_transmission_complete(uart_number);
    13c2:	19 95       	eicall
	uint32_t err = NO_ERROR;
	do 
	{	
		if(length == 0)
		{
			err = TX_ARRAY_LENGTH_ZERO_WARNING;
    13c4:	6b e0       	ldi	r22, 0x0B	; 11
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	39 c0       	rjmp	.+114    	; 0x1440 <hal_uart_send+0x9c>
			{
				g_on_transmission_complete(uart_number);
			}
			break;
		}		
		if(g_tx_busy)
    13ce:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <g_tx_busy>
    13d2:	81 11       	cpse	r24, r1
    13d4:	27 c0       	rjmp	.+78     	; 0x1424 <hal_uart_send+0x80>
		{
			err = UART_ERROR_TX_BUSY;
			break;
		}
		if (map_uart_registers(uart_number))
    13d6:	8d 2f       	mov	r24, r29
    13d8:	f8 de       	rcall	.-528    	; 0x11ca <map_uart_registers>
    13da:	67 2b       	or	r22, r23
    13dc:	68 2b       	or	r22, r24
    13de:	69 2b       	or	r22, r25
    13e0:	31 f5       	brne	.+76     	; 0x142e <hal_uart_send+0x8a>
		{
			err = UNSUPPORTED_UART;
			break;
		}
		if (INT_TX_BUFF_LEN < length)
    13e2:	c5 31       	cpi	r28, 0x15	; 21
    13e4:	48 f5       	brcc	.+82     	; 0x1438 <hal_uart_send+0x94>
		{
			err = TX_ARRAY_ERROR;
			break;
		}
		g_tx_busy = true;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <g_tx_busy>
		memcpy(g_internal_tx_buff, tx_buffer, length);
    13ec:	4c 2f       	mov	r20, r28
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	b8 01       	movw	r22, r16
    13f2:	81 e5       	ldi	r24, 0x51	; 81
    13f4:	92 e0       	ldi	r25, 0x02	; 2
    13f6:	0e d4       	rcall	.+2076   	; 0x1c14 <memcpy>
		g_bytes_to_be_tx = length;
    13f8:	c0 93 50 02 	sts	0x0250, r28	; 0x800250 <g_bytes_to_be_tx>
		g_tx_buff_idx = 0;
    13fc:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_tx_buff_idx>
		on_trasmit_buffer_empty (uart_number);
    1400:	8d 2f       	mov	r24, r29
    1402:	99 df       	rcall	.-206    	; 0x1336 <on_trasmit_buffer_empty>
		(*UCSRnB) |= (1<<UDRIEn) | (1<<TXCIEn); //enable Tx buffer empty interrupt
    1404:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1408:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    140c:	80 81       	ld	r24, Z
    140e:	80 66       	ori	r24, 0x60	; 96
    1410:	80 83       	st	Z, r24
	return err;
}

uint32_t hal_uart_send(uint8_t uart_number, uint8_t *tx_buffer, uint8_t length)
{	
	uint32_t err = NO_ERROR;
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	cb 01       	movw	r24, r22
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <hal_uart_send+0x9c>
	do 
	{	
		if(length == 0)
		{
			err = TX_ARRAY_LENGTH_ZERO_WARNING;
    141a:	6b e0       	ldi	r22, 0x0B	; 11
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e c0       	rjmp	.+28     	; 0x1440 <hal_uart_send+0x9c>
			}
			break;
		}		
		if(g_tx_busy)
		{
			err = UART_ERROR_TX_BUSY;
    1424:	69 e0       	ldi	r22, 0x09	; 9
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <hal_uart_send+0x9c>
			break;
		}
		if (map_uart_registers(uart_number))
		{
			err = UNSUPPORTED_UART;
    142e:	65 e0       	ldi	r22, 0x05	; 5
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <hal_uart_send+0x9c>
			break;
		}
		if (INT_TX_BUFF_LEN < length)
		{
			err = TX_ARRAY_ERROR;
    1438:	6a e0       	ldi	r22, 0x0A	; 10
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
		on_trasmit_buffer_empty (uart_number);
		(*UCSRnB) |= (1<<UDRIEn) | (1<<TXCIEn); //enable Tx buffer empty interrupt
	} while (0);
	
	return err;
}
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <set_baudrate_registers>:
	uint32_t err = NO_ERROR;
	uint16_t regValue = 0;
	
	do
	{	
		if (baudrate != 2400 && baudrate != 4800 && baudrate != 9600 && baudrate != 19200)
    144a:	60 36       	cpi	r22, 0x60	; 96
    144c:	29 e0       	ldi	r18, 0x09	; 9
    144e:	72 07       	cpc	r23, r18
    1450:	81 05       	cpc	r24, r1
    1452:	91 05       	cpc	r25, r1
    1454:	a1 f0       	breq	.+40     	; 0x147e <set_baudrate_registers+0x34>
    1456:	60 3c       	cpi	r22, 0xC0	; 192
    1458:	22 e1       	ldi	r18, 0x12	; 18
    145a:	72 07       	cpc	r23, r18
    145c:	81 05       	cpc	r24, r1
    145e:	91 05       	cpc	r25, r1
    1460:	89 f0       	breq	.+34     	; 0x1484 <set_baudrate_registers+0x3a>
    1462:	60 38       	cpi	r22, 0x80	; 128
    1464:	25 e2       	ldi	r18, 0x25	; 37
    1466:	72 07       	cpc	r23, r18
    1468:	81 05       	cpc	r24, r1
    146a:	91 05       	cpc	r25, r1
    146c:	71 f0       	breq	.+28     	; 0x148a <set_baudrate_registers+0x40>
    146e:	61 15       	cp	r22, r1
    1470:	7b 44       	sbci	r23, 0x4B	; 75
    1472:	81 05       	cpc	r24, r1
    1474:	91 05       	cpc	r25, r1
    1476:	d9 f4       	brne	.+54     	; 0x14ae <set_baudrate_registers+0x64>
				regValue = 103;
				break;
			}
			case 19200	:
			{
				regValue = 51;
    1478:	83 e3       	ldi	r24, 0x33	; 51
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	08 c0       	rjmp	.+16     	; 0x148e <set_baudrate_registers+0x44>
		
		//considering 16MHz clock rate
		switch (baudrate){
			case 2400   :
			{
				regValue = 416;
    147e:	80 ea       	ldi	r24, 0xA0	; 160
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	05 c0       	rjmp	.+10     	; 0x148e <set_baudrate_registers+0x44>
				break;
			}
			case 4800   :
			{
				regValue = 207;
    1484:	8f ec       	ldi	r24, 0xCF	; 207
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <set_baudrate_registers+0x44>
				break;
			}
			case 9600   :
			{
				regValue = 103;
    148a:	87 e6       	ldi	r24, 0x67	; 103
    148c:	90 e0       	ldi	r25, 0x00	; 0
				regValue = 103;
				break;  // baudrate = 9600
			}
		}
		
		*UBRRnL = (regValue & 0x00FF);   // set the upper 8 bits
    148e:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <UBRRnL>
    1492:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <UBRRnL+0x1>
    1496:	80 83       	st	Z, r24
		*UBRRnH = ((regValue & 0x0F00)>>8); // set the lower 8 bits
    1498:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <UBRRnH>
    149c:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <UBRRnH+0x1>
    14a0:	88 27       	eor	r24, r24
    14a2:	9f 70       	andi	r25, 0x0F	; 15
    14a4:	90 83       	st	Z, r25
	return err;
}

uint32_t set_baudrate_registers(uint32_t baudrate)
{	
	uint32_t err = NO_ERROR;
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	cb 01       	movw	r24, r22
    14ac:	08 95       	ret
	
	do
	{	
		if (baudrate != 2400 && baudrate != 4800 && baudrate != 9600 && baudrate != 19200)
		{
			err = UNSUPPORTED_BAUDRATE;
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
		*UBRRnL = (regValue & 0x00FF);   // set the upper 8 bits
		*UBRRnH = ((regValue & 0x0F00)>>8); // set the lower 8 bits
	}while(0);
	
	return err;
}
    14b6:	08 95       	ret

000014b8 <set_frame_size>:
uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
	do
	{	
		if (frame_size > 8 || frame_size < 5)
    14b8:	9b ef       	ldi	r25, 0xFB	; 251
    14ba:	98 0f       	add	r25, r24
    14bc:	94 30       	cpi	r25, 0x04	; 4
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <set_frame_size+0xa>
    14c0:	89 c0       	rjmp	.+274    	; 0x15d4 <set_frame_size+0x11c>
		{
			err = UNSUPPORTED_FRAME_SIZE;
			break;
		}
		switch (frame_size){
    14c2:	86 30       	cpi	r24, 0x06	; 6
    14c4:	19 f1       	breq	.+70     	; 0x150c <set_frame_size+0x54>
    14c6:	18 f4       	brcc	.+6      	; 0x14ce <set_frame_size+0x16>
    14c8:	85 30       	cpi	r24, 0x05	; 5
    14ca:	39 f0       	breq	.+14     	; 0x14da <set_frame_size+0x22>
    14cc:	6a c0       	rjmp	.+212    	; 0x15a2 <set_frame_size+0xea>
    14ce:	87 30       	cpi	r24, 0x07	; 7
    14d0:	b1 f1       	breq	.+108    	; 0x153e <set_frame_size+0x86>
    14d2:	88 30       	cpi	r24, 0x08	; 8
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <set_frame_size+0x20>
    14d6:	4c c0       	rjmp	.+152    	; 0x1570 <set_frame_size+0xb8>
    14d8:	64 c0       	rjmp	.+200    	; 0x15a2 <set_frame_size+0xea>
			case 5 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    14da:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    14de:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    14e2:	80 81       	ld	r24, Z
    14e4:	8b 7f       	andi	r24, 0xFB	; 251
    14e6:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn1);
    14e8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    14ec:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    14f0:	80 81       	ld	r24, Z
    14f2:	8b 7f       	andi	r24, 0xFB	; 251
    14f4:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn0);
    14f6:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    14fa:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    14fe:	80 81       	ld	r24, Z
    1500:	8d 7f       	andi	r24, 0xFD	; 253
    1502:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	cb 01       	movw	r24, r22
			case 5 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) &= ~(1<<UCSZn1);
				(*UCSRnC) &= ~(1<<UCSZn0);
				break;
    150a:	08 95       	ret
			}
			case 6 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    150c:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1510:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1514:	80 81       	ld	r24, Z
    1516:	8b 7f       	andi	r24, 0xFB	; 251
    1518:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn1);
    151a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    151e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1522:	80 81       	ld	r24, Z
    1524:	8b 7f       	andi	r24, 0xFB	; 251
    1526:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    1528:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    152c:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1530:	80 81       	ld	r24, Z
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	cb 01       	movw	r24, r22
			case 6 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) &= ~(1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break;
    153c:	08 95       	ret
			}
			case 7 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    153e:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1542:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1546:	80 81       	ld	r24, Z
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    154c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1550:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1554:	80 81       	ld	r24, Z
    1556:	84 60       	ori	r24, 0x04	; 4
    1558:	80 83       	st	Z, r24
				(*UCSRnC) &= ~(1<<UCSZn0);
    155a:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    155e:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1562:	80 81       	ld	r24, Z
    1564:	8d 7f       	andi	r24, 0xFD	; 253
    1566:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	cb 01       	movw	r24, r22
			case 7 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) &= ~(1<<UCSZn0);
				break;
    156e:	08 95       	ret
			}
			case 8 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    1570:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1574:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1578:	80 81       	ld	r24, Z
    157a:	8b 7f       	andi	r24, 0xFB	; 251
    157c:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    157e:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1582:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1586:	80 81       	ld	r24, Z
    1588:	84 60       	ori	r24, 0x04	; 4
    158a:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    158c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1590:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	cb 01       	movw	r24, r22
			case 8 :
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break;
    15a0:	08 95       	ret
			}
			default:
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
    15a2:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    15a6:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    15aa:	80 81       	ld	r24, Z
    15ac:	8b 7f       	andi	r24, 0xFB	; 251
    15ae:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn1);
    15b0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    15b4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    15b8:	80 81       	ld	r24, Z
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	80 83       	st	Z, r24
				(*UCSRnC) |=  (1<<UCSZn0);
    15be:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    15c2:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    15c6:	80 81       	ld	r24, Z
    15c8:	82 60       	ori	r24, 0x02	; 2
    15ca:	80 83       	st	Z, r24
	return err;
}

uint32_t set_frame_size(uint8_t frame_size)  // can not configure for 9 bit version.
{	
	uint32_t err = NO_ERROR;
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	cb 01       	movw	r24, r22
			default:
			{
				(*UCSRnB) &= ~(1<<UCSZn2);
				(*UCSRnC) |=  (1<<UCSZn1);
				(*UCSRnC) |=  (1<<UCSZn0);
				break; // default is 8 bit version
    15d2:	08 95       	ret
	uint32_t err = NO_ERROR;
	do
	{	
		if (frame_size > 8 || frame_size < 5)
		{
			err = UNSUPPORTED_FRAME_SIZE;
    15d4:	67 e0       	ldi	r22, 0x07	; 7
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	} while (0);
	
	return err;
}
    15dc:	08 95       	ret

000015de <set_parity_register_values>:

void set_parity_register_values(parity_types parity_type)
{
	switch (parity_type){
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	09 f1       	breq	.+66     	; 0x1624 <set_parity_register_values+0x46>
    15e2:	88 f0       	brcs	.+34     	; 0x1606 <set_parity_register_values+0x28>
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	69 f5       	brne	.+90     	; 0x1642 <set_parity_register_values+0x64>
		case (NO_PARITY): 
		{
			(*UCSRnC) &= ~(1<<UPMn1);	 
    15e8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    15ec:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7d       	andi	r24, 0xDF	; 223
    15f4:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    15f6:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    15fa:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    15fe:	80 81       	ld	r24, Z
    1600:	8f 7e       	andi	r24, 0xEF	; 239
    1602:	80 83       	st	Z, r24
			break;
    1604:	08 95       	ret
		}
		case (EVEN)		: 
		{
			(*UCSRnC) |=  (1<<UPMn1);	 
    1606:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    160a:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    160e:	80 81       	ld	r24, Z
    1610:	80 62       	ori	r24, 0x20	; 32
    1612:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    1614:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1618:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    161c:	80 81       	ld	r24, Z
    161e:	8f 7e       	andi	r24, 0xEF	; 239
    1620:	80 83       	st	Z, r24
			break;
    1622:	08 95       	ret
		}
		case (ODD)		: 
		{
			(*UCSRnC) |=  (1<<UPMn1);  
    1624:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1628:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    162c:	80 81       	ld	r24, Z
    162e:	80 62       	ori	r24, 0x20	; 32
    1630:	80 83       	st	Z, r24
			(*UCSRnC) |=  (1<<UPMn0);	
    1632:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1636:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    163a:	80 81       	ld	r24, Z
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	80 83       	st	Z, r24
			break;
    1640:	08 95       	ret
		}
		default			: 
		{
			(*UCSRnC) &= ~(1<<UPMn1);	 
    1642:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1646:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    164a:	80 81       	ld	r24, Z
    164c:	8f 7d       	andi	r24, 0xDF	; 223
    164e:	80 83       	st	Z, r24
			(*UCSRnC) &= ~(1<<UPMn0);	
    1650:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
    1654:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    1658:	80 81       	ld	r24, Z
    165a:	8f 7e       	andi	r24, 0xEF	; 239
    165c:	80 83       	st	Z, r24
    165e:	08 95       	ret

00001660 <hal_uart_init>:


/////////////////////////Public Functions////////////////////

uint32_t hal_uart_init(uint8_t uart_number, uint32_t baudrate, uint8_t frame_size, parity_types parity_type)
{	
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	cf 93       	push	r28
    166c:	6a 01       	movw	r12, r20
    166e:	7b 01       	movw	r14, r22
    1670:	c2 2f       	mov	r28, r18
	uint32_t err = NO_ERROR;
	do 
	{
		sei();  // to enable global interrupts
    1672:	78 94       	sei
		
		if (map_uart_registers(uart_number))  //choose correct register set for the given UART number
    1674:	aa dd       	rcall	.-1196   	; 0x11ca <map_uart_registers>
    1676:	67 2b       	or	r22, r23
    1678:	68 2b       	or	r22, r24
    167a:	69 2b       	or	r22, r25
    167c:	09 f0       	breq	.+2      	; 0x1680 <hal_uart_init+0x20>
    167e:	4d c0       	rjmp	.+154    	; 0x171a <hal_uart_init+0xba>
		{
			err=UNSUPPORTED_UART;
			break;
		}
		
		if (set_baudrate_registers(baudrate))  // to fill the UBRRn register according to the given baudrate
    1680:	c7 01       	movw	r24, r14
    1682:	b6 01       	movw	r22, r12
    1684:	e2 de       	rcall	.-572    	; 0x144a <set_baudrate_registers>
    1686:	67 2b       	or	r22, r23
    1688:	68 2b       	or	r22, r24
    168a:	69 2b       	or	r22, r25
    168c:	09 f0       	breq	.+2      	; 0x1690 <hal_uart_init+0x30>
    168e:	4a c0       	rjmp	.+148    	; 0x1724 <hal_uart_init+0xc4>
		{
			err=UNSUPPORTED_BAUDRATE;
			break;
		}
		
		if (set_frame_size(frame_size)) // set register values belongs to frame size configuration
    1690:	8c 2f       	mov	r24, r28
    1692:	12 df       	rcall	.-476    	; 0x14b8 <set_frame_size>
    1694:	67 2b       	or	r22, r23
    1696:	68 2b       	or	r22, r24
    1698:	69 2b       	or	r22, r25
    169a:	09 f0       	breq	.+2      	; 0x169e <hal_uart_init+0x3e>
    169c:	48 c0       	rjmp	.+144    	; 0x172e <hal_uart_init+0xce>
		{
			err=UNSUPPORTED_FRAME_SIZE;
			break;
		}
		
		set_parity_register_values(parity_type);
    169e:	80 2f       	mov	r24, r16
    16a0:	9e df       	rcall	.-196    	; 0x15de <set_parity_register_values>
    16a2:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
		
		(*UCSRnC) &= ~(1<<UMSELn1) & ~(1<<UMSELn0); // set mode to asynchronous UART
    16a6:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 73       	andi	r24, 0x3F	; 63
    16ae:	80 83       	st	Z, r24
    16b0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
		(*UCSRnC) &= ~(1<<USBSn); // to use only 1 stop bit
    16b4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    16b8:	80 81       	ld	r24, Z
    16ba:	87 7f       	andi	r24, 0xF7	; 247
    16bc:	80 83       	st	Z, r24
    16be:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <UCSRnC>
		(*UCSRnC) &= ~(1<<UCPOLn); //don't use clock parity as asynchronous mode is used
    16c2:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <UCSRnC+0x1>
    16c6:	80 81       	ld	r24, Z
    16c8:	8e 7f       	andi	r24, 0xFE	; 254
    16ca:	80 83       	st	Z, r24
    16cc:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <UCSRnA>
		
		(*UCSRnA) |= (1<<TXCn);  // to clear the flag should give 1
    16d0:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <UCSRnA+0x1>
    16d4:	80 81       	ld	r24, Z
    16d6:	80 64       	ori	r24, 0x40	; 64
    16d8:	80 83       	st	Z, r24
    16da:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <UCSRnA>
		(*UCSRnA) &= ~(1<<FEn) & ~(1<<DORn) & ~(1<<UPEn) & ~(1<<U2Xn) & ~(1<<MPCMn);
    16de:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <UCSRnA+0x1>
    16e2:	80 81       	ld	r24, Z
    16e4:	80 7e       	andi	r24, 0xE0	; 224
    16e6:	80 83       	st	Z, r24
    16e8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
		
		(*UCSRnB) |= (1<<RXCIEn); //enable Rx complete and Tx complete interrupts
    16ec:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    16f0:	80 81       	ld	r24, Z
    16f2:	80 68       	ori	r24, 0x80	; 128
    16f4:	80 83       	st	Z, r24
    16f6:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
		(*UCSRnB) &= ~(1<<UDRIEn) & ~(1<<TXCIEn); //disable Tx buffer empty interrupt
    16fa:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    16fe:	80 81       	ld	r24, Z
    1700:	8f 79       	andi	r24, 0x9F	; 159
    1702:	80 83       	st	Z, r24
    1704:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
		(*UCSRnB) |= (1<<RXENn) | (1<<TXENn); // enable UART transmitter and receiver
    1708:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    170c:	80 81       	ld	r24, Z
    170e:	88 61       	ori	r24, 0x18	; 24
    1710:	80 83       	st	Z, r24
    1712:	60 e0       	ldi	r22, 0x00	; 0

/////////////////////////Public Functions////////////////////

uint32_t hal_uart_init(uint8_t uart_number, uint32_t baudrate, uint8_t frame_size, parity_types parity_type)
{	
	uint32_t err = NO_ERROR;
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	cb 01       	movw	r24, r22
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <hal_uart_init+0xd6>
    171a:	65 e0       	ldi	r22, 0x05	; 5
	{
		sei();  // to enable global interrupts
		
		if (map_uart_registers(uart_number))  //choose correct register set for the given UART number
		{
			err=UNSUPPORTED_UART;
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <hal_uart_init+0xd6>
    1724:	66 e0       	ldi	r22, 0x06	; 6
			break;
		}
		
		if (set_baudrate_registers(baudrate))  // to fill the UBRRn register according to the given baudrate
		{
			err=UNSUPPORTED_BAUDRATE;
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <hal_uart_init+0xd6>
    172e:	67 e0       	ldi	r22, 0x07	; 7
			break;
		}
		
		if (set_frame_size(frame_size)) // set register values belongs to frame size configuration
		{
			err=UNSUPPORTED_FRAME_SIZE;
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	cf 91       	pop	r28
		(*UCSRnB) |= (1<<RXENn) | (1<<TXENn); // enable UART transmitter and receiver
		
	} while (0);
		
	return err;
}
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	08 95       	ret

00001744 <__vector_25>:
    1744:	1f 92       	push	r1
	}
}

////////////////////////////received complete interrupt callings/////////////
ISR(USART0_RX_vect)
{
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	0b b6       	in	r0, 0x3b	; 59
    1750:	0f 92       	push	r0
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	6f 93       	push	r22
    175c:	7f 93       	push	r23
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	af 93       	push	r26
    1764:	bf 93       	push	r27
    1766:	ef 93       	push	r30
    1768:	ff 93       	push	r31
	bool parity_error = (UCSR0A & (1<<UPE0))>>UPE0;
    176a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	82 ff       	sbrs	r24, 2
    1772:	40 e0       	ldi	r20, 0x00	; 0
	if (g_on_byte_received != NULL)
    1774:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <g_on_byte_received>
    1778:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <g_on_byte_received+0x1>
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	21 f0       	breq	.+8      	; 0x1788 <__vector_25+0x44>
	{
		g_on_byte_received(0, UDR0, parity_error);
    1780:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	19 95       	eicall
	}
}
    1788:	ff 91       	pop	r31
    178a:	ef 91       	pop	r30
    178c:	bf 91       	pop	r27
    178e:	af 91       	pop	r26
    1790:	9f 91       	pop	r25
    1792:	8f 91       	pop	r24
    1794:	7f 91       	pop	r23
    1796:	6f 91       	pop	r22
    1798:	5f 91       	pop	r21
    179a:	4f 91       	pop	r20
    179c:	3f 91       	pop	r19
    179e:	2f 91       	pop	r18
    17a0:	0f 90       	pop	r0
    17a2:	0b be       	out	0x3b, r0	; 59
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <__vector_36>:

ISR(USART1_RX_vect)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	0b b6       	in	r0, 0x3b	; 59
    17ba:	0f 92       	push	r0
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
	bool parity_error = (UCSR1A & (1<<UPE1))>>UPE1;
    17d4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	82 ff       	sbrs	r24, 2
    17dc:	40 e0       	ldi	r20, 0x00	; 0
	if (g_on_byte_received != NULL)
    17de:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <g_on_byte_received>
    17e2:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <g_on_byte_received+0x1>
    17e6:	30 97       	sbiw	r30, 0x00	; 0
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <__vector_36+0x44>
	{
		g_on_byte_received(1, UDR1, parity_error);
    17ea:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	19 95       	eicall
	}
}
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	0f 90       	pop	r0
    180c:	0b be       	out	0x3b, r0	; 59
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	0f 90       	pop	r0
    1814:	1f 90       	pop	r1
    1816:	18 95       	reti

00001818 <__vector_51>:

ISR(USART2_RX_vect)
{
    1818:	1f 92       	push	r1
    181a:	0f 92       	push	r0
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	0b b6       	in	r0, 0x3b	; 59
    1824:	0f 92       	push	r0
    1826:	2f 93       	push	r18
    1828:	3f 93       	push	r19
    182a:	4f 93       	push	r20
    182c:	5f 93       	push	r21
    182e:	6f 93       	push	r22
    1830:	7f 93       	push	r23
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
	bool parity_error = (UCSR2A & (1<<UPE2))>>UPE2;
    183e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	82 ff       	sbrs	r24, 2
    1846:	40 e0       	ldi	r20, 0x00	; 0
	if (g_on_byte_received != NULL)
    1848:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <g_on_byte_received>
    184c:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <g_on_byte_received+0x1>
    1850:	30 97       	sbiw	r30, 0x00	; 0
    1852:	21 f0       	breq	.+8      	; 0x185c <__vector_51+0x44>
	{
		g_on_byte_received(2, UDR2, parity_error);
    1854:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	19 95       	eicall
	}
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_54>:

ISR(USART3_RX_vect)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
	bool parity_error = (UCSR3A & (1<<UPE3))>>UPE3;
    18a8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	82 ff       	sbrs	r24, 2
    18b0:	40 e0       	ldi	r20, 0x00	; 0
	if (g_on_byte_received != NULL) 
    18b2:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <g_on_byte_received>
    18b6:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <g_on_byte_received+0x1>
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	21 f0       	breq	.+8      	; 0x18c6 <__vector_54+0x44>
	{
		g_on_byte_received(3, UDR3, parity_error);
    18be:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	19 95       	eicall
	}
}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0b be       	out	0x3b, r0	; 59
    18e2:	0f 90       	pop	r0
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	0f 90       	pop	r0
    18e8:	1f 90       	pop	r1
    18ea:	18 95       	reti

000018ec <__vector_27>:

/////////////////////////transmission complete interrupt callings //////////////
ISR(USART0_TX_vect)
{
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	0b b6       	in	r0, 0x3b	; 59
    18f8:	0f 92       	push	r0
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
	g_tx_buff_idx=0;
    1912:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_tx_buff_idx>
	g_tx_busy=false;
    1916:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_tx_busy>
	map_uart_registers(0);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	56 dc       	rcall	.-1876   	; 0x11ca <map_uart_registers>
	(*UCSRnB) &= ~(1<<TXCIEn);
    191e:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1922:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1926:	80 81       	ld	r24, Z
    1928:	8f 7b       	andi	r24, 0xBF	; 191
    192a:	80 83       	st	Z, r24
	if (g_on_transmission_complete != NULL)
    192c:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <g_on_transmission_complete>
    1930:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <g_on_transmission_complete+0x1>
    1934:	30 97       	sbiw	r30, 0x00	; 0
    1936:	11 f0       	breq	.+4      	; 0x193c <__vector_27+0x50>
	{
		g_on_transmission_complete(0);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	19 95       	eicall
	}
}
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0b be       	out	0x3b, r0	; 59
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_38>:

ISR(USART1_TX_vect)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	0b b6       	in	r0, 0x3b	; 59
    196e:	0f 92       	push	r0
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	af 93       	push	r26
    1982:	bf 93       	push	r27
    1984:	ef 93       	push	r30
    1986:	ff 93       	push	r31
	g_tx_buff_idx=0;
    1988:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_tx_buff_idx>
	g_tx_busy=false;
    198c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_tx_busy>
	map_uart_registers(1);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	1b dc       	rcall	.-1994   	; 0x11ca <map_uart_registers>
	(*UCSRnB) &= ~(1<<TXCIEn);
    1994:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1998:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    199c:	80 81       	ld	r24, Z
    199e:	8f 7b       	andi	r24, 0xBF	; 191
    19a0:	80 83       	st	Z, r24
	if (g_on_transmission_complete != NULL)
    19a2:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <g_on_transmission_complete>
    19a6:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <g_on_transmission_complete+0x1>
    19aa:	30 97       	sbiw	r30, 0x00	; 0
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <__vector_38+0x50>
	{
		g_on_transmission_complete(1);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	19 95       	eicall
	}
}
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	0f 90       	pop	r0
    19cc:	0b be       	out	0x3b, r0	; 59
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_53>:

ISR(USART2_TX_vect)
{	
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	0b b6       	in	r0, 0x3b	; 59
    19e4:	0f 92       	push	r0
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
	g_tx_buff_idx=0;
    19fe:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_tx_buff_idx>
	g_tx_busy=false;
    1a02:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_tx_busy>
	map_uart_registers(2);
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	e0 db       	rcall	.-2112   	; 0x11ca <map_uart_registers>
	(*UCSRnB) &= ~(1<<TXCIEn);
    1a0a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1a0e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7b       	andi	r24, 0xBF	; 191
    1a16:	80 83       	st	Z, r24
	if (g_on_transmission_complete != NULL)
    1a18:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <g_on_transmission_complete>
    1a1c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <g_on_transmission_complete+0x1>
    1a20:	30 97       	sbiw	r30, 0x00	; 0
    1a22:	11 f0       	breq	.+4      	; 0x1a28 <__vector_53+0x50>
	{
		g_on_transmission_complete(2);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	19 95       	eicall
	}
}
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0b be       	out	0x3b, r0	; 59
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <__vector_56>:

ISR(USART3_TX_vect)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	0b b6       	in	r0, 0x3b	; 59
    1a5a:	0f 92       	push	r0
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	ef 93       	push	r30
    1a72:	ff 93       	push	r31
	g_tx_buff_idx=0;
    1a74:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <g_tx_buff_idx>
	g_tx_busy=false;
    1a78:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <g_tx_busy>
	map_uart_registers(3);
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	a5 db       	rcall	.-2230   	; 0x11ca <map_uart_registers>
	(*UCSRnB) &= ~(1<<TXCIEn);
    1a80:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <UCSRnB>
    1a84:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <UCSRnB+0x1>
    1a88:	80 81       	ld	r24, Z
    1a8a:	8f 7b       	andi	r24, 0xBF	; 191
    1a8c:	80 83       	st	Z, r24
	if (g_on_transmission_complete != NULL)
    1a8e:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <g_on_transmission_complete>
    1a92:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <g_on_transmission_complete+0x1>
    1a96:	30 97       	sbiw	r30, 0x00	; 0
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <__vector_56+0x50>
	{		
		g_on_transmission_complete(3);
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	19 95       	eicall
	}
}
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0b be       	out	0x3b, r0	; 59
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <__vector_26>:


/////////////////////////transmit buffer empty interrupt callings //////////////
ISR(USART0_UDRE_vect)
{	
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	0b b6       	in	r0, 0x3b	; 59
    1ad0:	0f 92       	push	r0
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	af 93       	push	r26
    1ae4:	bf 93       	push	r27
    1ae6:	ef 93       	push	r30
    1ae8:	ff 93       	push	r31
	on_trasmit_buffer_empty (0);
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	24 dc       	rcall	.-1976   	; 0x1336 <on_trasmit_buffer_empty>
}
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0b be       	out	0x3b, r0	; 59
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <__vector_37>:

ISR(USART1_UDRE_vect)
{
    1b14:	1f 92       	push	r1
    1b16:	0f 92       	push	r0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	0f 92       	push	r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	0b b6       	in	r0, 0x3b	; 59
    1b20:	0f 92       	push	r0
    1b22:	2f 93       	push	r18
    1b24:	3f 93       	push	r19
    1b26:	4f 93       	push	r20
    1b28:	5f 93       	push	r21
    1b2a:	6f 93       	push	r22
    1b2c:	7f 93       	push	r23
    1b2e:	8f 93       	push	r24
    1b30:	9f 93       	push	r25
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
	on_trasmit_buffer_empty (1);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	fc db       	rcall	.-2056   	; 0x1336 <on_trasmit_buffer_empty>
}
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0b be       	out	0x3b, r0	; 59
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <__vector_52>:

ISR(USART2_UDRE_vect)
{
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	0b b6       	in	r0, 0x3b	; 59
    1b70:	0f 92       	push	r0
    1b72:	2f 93       	push	r18
    1b74:	3f 93       	push	r19
    1b76:	4f 93       	push	r20
    1b78:	5f 93       	push	r21
    1b7a:	6f 93       	push	r22
    1b7c:	7f 93       	push	r23
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	ef 93       	push	r30
    1b88:	ff 93       	push	r31
	on_trasmit_buffer_empty (2);
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	d4 db       	rcall	.-2136   	; 0x1336 <on_trasmit_buffer_empty>
}
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0b be       	out	0x3b, r0	; 59
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_55>:

ISR(USART3_UDRE_vect)
{
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	0b b6       	in	r0, 0x3b	; 59
    1bc0:	0f 92       	push	r0
    1bc2:	2f 93       	push	r18
    1bc4:	3f 93       	push	r19
    1bc6:	4f 93       	push	r20
    1bc8:	5f 93       	push	r21
    1bca:	6f 93       	push	r22
    1bcc:	7f 93       	push	r23
    1bce:	8f 93       	push	r24
    1bd0:	9f 93       	push	r25
    1bd2:	af 93       	push	r26
    1bd4:	bf 93       	push	r27
    1bd6:	ef 93       	push	r30
    1bd8:	ff 93       	push	r31
	on_trasmit_buffer_empty (3);
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	ac db       	rcall	.-2216   	; 0x1336 <on_trasmit_buffer_empty>
    1bde:	ff 91       	pop	r31
    1be0:	ef 91       	pop	r30
    1be2:	bf 91       	pop	r27
    1be4:	af 91       	pop	r26
    1be6:	9f 91       	pop	r25
    1be8:	8f 91       	pop	r24
    1bea:	7f 91       	pop	r23
    1bec:	6f 91       	pop	r22
    1bee:	5f 91       	pop	r21
    1bf0:	4f 91       	pop	r20
    1bf2:	3f 91       	pop	r19
    1bf4:	2f 91       	pop	r18
    1bf6:	0f 90       	pop	r0
    1bf8:	0b be       	out	0x3b, r0	; 59
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	0f 90       	pop	r0
    1c00:	1f 90       	pop	r1
    1c02:	18 95       	reti

00001c04 <__tablejump2__>:
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	88 1f       	adc	r24, r24
    1c0a:	8b bf       	out	0x3b, r24	; 59
    1c0c:	07 90       	elpm	r0, Z+
    1c0e:	f6 91       	elpm	r31, Z
    1c10:	e0 2d       	mov	r30, r0
    1c12:	19 94       	eijmp

00001c14 <memcpy>:
    1c14:	fb 01       	movw	r30, r22
    1c16:	dc 01       	movw	r26, r24
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <memcpy+0xa>
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	41 50       	subi	r20, 0x01	; 1
    1c20:	50 40       	sbci	r21, 0x00	; 0
    1c22:	d8 f7       	brcc	.-10     	; 0x1c1a <memcpy+0x6>
    1c24:	08 95       	ret

00001c26 <_exit>:
    1c26:	f8 94       	cli

00001c28 <__stop_program>:
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <__stop_program>
